// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bio2rdf.rest_bio2rdf_9000_2_4;

import routines.Mathematical;
import routines.DataOperation;
import routines.BioUtil;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.MD5;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_5
//import java.util.List;

//the import part of tJavaRow_13
//import java.util.List;

//the import part of tJavaRow_11
//import java.util.List;

//the import part of tJavaRow_12
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJavaRow_6
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_18
//import java.util.List;

//the import part of tJavaRow_17
//import java.util.List;

//the import part of tJavaRow_16
//import java.util.List;

//the import part of tJavaRow_7
//import java.util.List;

//the import part of tJavaRow_8
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_9
//import java.util.List;

//the import part of tJavaRow_10
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: REST_Bio2RDF_9000 Purpose: Bio2RDF REST services for Linked Data Hubb for the Life Science<br>
 * Description: francois.belleau@bio2rdf.org & vincent.emonet@gmail.com
 20140507 VE 2.3 Possibility to request sparql or rest services, new way to display test, new way to parse URLs
 20140429 VE 2.2 searchns and linksns services added, modification of reader_converter to accept REST PC responses. JSON LD conversion unactivated : compilation issues 
 20140428 FB 2.1 use url redirection link from dataset.bio2rdf.org <br>
 * @author test@talend.com
 * @version 5.5.0.r117820
 * @status 
 */
public class REST_Bio2RDF_9000 implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (pageTest != null) {

				this.setProperty("pageTest", pageTest.toString());

			}

			if (request != null) {

				this.setProperty("request", request.toString());

			}

			if (message != null) {

				this.setProperty("message", message.toString());

			}

			if (ns != null) {

				this.setProperty("ns", ns.toString());

			}

			if (id != null) {

				this.setProperty("id", id.toString());

			}

			if (format != null) {

				this.setProperty("format", format.toString());

			}

			if (localhost != null) {

				this.setProperty("localhost", localhost.toString());

			}

			if (sparql != null) {

				this.setProperty("sparql", sparql.toString());

			}

			if (database_endpoint != null) {

				this.setProperty("database_endpoint",
						database_endpoint.toString());

			}

			if (query != null) {

				this.setProperty("query", query.toString());

			}

			if (debug != null) {

				this.setProperty("debug", debug.toString());

			}

			if (namespace != null) {

				this.setProperty("namespace", namespace.toString());

			}

			if (database_endpoint1 != null) {

				this.setProperty("database_endpoint1",
						database_endpoint1.toString());

			}

			if (localhost1 != null) {

				this.setProperty("localhost1", localhost1.toString());

			}

			if (localhost2 != null) {

				this.setProperty("localhost2", localhost2.toString());

			}

			if (uri != null) {

				this.setProperty("uri", uri.toString());

			}

			if (parm1 != null) {

				this.setProperty("parm1", parm1.toString());

			}

			if (parm2 != null) {

				this.setProperty("parm2", parm2.toString());

			}

			if (parm3 != null) {

				this.setProperty("parm3", parm3.toString());

			}

			if (restUrl != null) {

				this.setProperty("restUrl", restUrl.toString());

			}

		}

		public String pageTest;

		public String getPageTest() {
			return this.pageTest;
		}

		public String request;

		public String getRequest() {
			return this.request;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String localhost;

		public String getLocalhost() {
			return this.localhost;
		}

		public String sparql;

		public String getSparql() {
			return this.sparql;
		}

		public String database_endpoint;

		public String getDatabase_endpoint() {
			return this.database_endpoint;
		}

		public String query;

		public String getQuery() {
			return this.query;
		}

		public Boolean debug;

		public Boolean getDebug() {
			return this.debug;
		}

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String database_endpoint1;

		public String getDatabase_endpoint1() {
			return this.database_endpoint1;
		}

		public String localhost1;

		public String getLocalhost1() {
			return this.localhost1;
		}

		public String localhost2;

		public String getLocalhost2() {
			return this.localhost2;
		}

		public String uri;

		public String getUri() {
			return this.uri;
		}

		public String parm1;

		public String getParm1() {
			return this.parm1;
		}

		public String parm2;

		public String getParm2() {
			return this.parm2;
		}

		public String parm3;

		public String getParm3() {
			return this.parm3;
		}

		public String restUrl;

		public String getRestUrl() {
			return this.restUrl;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "2.4";
	private final String jobName = "REST_Bio2RDF_9000";
	private final String projectName = "BIO2RDF";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					REST_Bio2RDF_9000.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(REST_Bio2RDF_9000.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFlowToIterate_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSparqlSelectRequest_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplace_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSparqlSelectRequest_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplace_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSparqlSelectRequest_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_30_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_29_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_28_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_31_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_25_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSparqlSelectRequest_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHttpRequest_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTRequest_1_Loop_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tRESTRequest_1_In_error(exception, errorComponent, globalMap);

	}

	public void tRESTRequest_1_In_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_1_SortOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tSortRow_1_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_1_SortIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDenormalize_2_DenormalizeOut_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tDenormalize_2_ArrayIn_error(exception, errorComponent, globalMap);

	}

	public void tDenormalize_2_ArrayIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_2_SortOut_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tSortRow_2_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_2_SortIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDenormalize_1_DenormalizeOut_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tDenormalize_1_ArrayIn_error(exception, errorComponent, globalMap);

	}

	public void tDenormalize_1_ArrayIn_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRESTRequest_1_Loop_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	private boolean runInTalendEsbRuntimeContainer = false;

	public void setRunInTalendEsbRuntimeContainer(boolean flag) {
		runInTalendEsbRuntimeContainer = flag;
	}

	private boolean restTalendJobAlreadyStarted = false;

	/**
	 * REST provider implementation
	 */
	@javax.ws.rs.Path("/")
	public static class RestServiceProviderImpl4TalendJob {

		@javax.ws.rs.core.Context
		private org.apache.cxf.jaxrs.ext.MessageContext messageContext;

		private final REST_Bio2RDF_9000 job;

		public RestServiceProviderImpl4TalendJob(REST_Bio2RDF_9000 job) {
			this.job = job;
		}

		private javax.ws.rs.core.Response processRequest(
				java.util.Map<String, Object> request) {
			final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
			try {
				globalMap.put("restRequest", request);

				// pass DataSource
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources = (java.util.Map<String, routines.system.TalendDataSource>) job.globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources) {
					java.util.Map<String, routines.system.TalendDataSource> restDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry : talendDataSources
							.entrySet()) {
						restDataSources.put(talendDataSourceEntry.getKey(),
								new routines.system.TalendDataSource(
										talendDataSourceEntry.getValue()
												.getRawDataSource()));
					}
					globalMap.put(KEY_DB_DATASOURCES, restDataSources);
				}

				// pass JMS connections
				globalMap.putAll(job.getSharedConnections4REST());

				globalMap.put("concurrentHashMap",
						job.globalMap.get("concurrentHashMap"));

				job.tRESTRequest_1_LoopProcess(globalMap);

				java.util.Map<String, Object> response = (java.util.Map<String, Object>) globalMap
						.get("restResponse");

				Object responseBody = null;
				Integer status = null;
				java.util.Map<String, String> headers = null;
				if (null != response) {
					Object dropJsonRootProp = response
							.get("drop.json.root.element");
					Boolean dropJsonRoot = (null == dropJsonRootProp) ? false
							: (Boolean) dropJsonRootProp;
					messageContext.put("drop.json.root.element",
							dropJsonRoot.toString());

					responseBody = response.get("BODY");
					status = (Integer) response.get("STATUS");
					headers = (java.util.Map<String, String>) response
							.get("HEADERS");
				}
				if (null == status) {
					status = (request.containsKey("STATUS")) ? (Integer) request
							.get("STATUS") : 404;
				}

				javax.ws.rs.core.Response.ResponseBuilder responseBuilder = javax.ws.rs.core.Response
						.status(status).entity(responseBody);
				if (headers != null) {
					for (java.util.Map.Entry<String, String> header : headers
							.entrySet()) {
						responseBuilder.header(header.getKey(),
								header.getValue());
					}
				}

				return responseBuilder.build();

			} catch (Throwable ex) {
				ex.printStackTrace();
				throw new javax.ws.rs.WebApplicationException(ex, 500);
			} finally {
				// close DB connections
				try {
					java.util.Map<String, routines.system.TalendDataSource> restDataSources = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (null != restDataSources) {
						for (routines.system.TalendDataSource restDataSource : restDataSources
								.values()) {
							restDataSource.close();
						}
					}
				} catch (Throwable e) {
					e.printStackTrace(System.err);
				}
			}
		}

		@javax.ws.rs.GET()
		@javax.ws.rs.Path("/queryall/{ns}:{id}")
		@javax.ws.rs.Produces({ "*/*" })
		public javax.ws.rs.core.Response queryall(

		@javax.ws.rs.PathParam("id") String id,
				@javax.ws.rs.PathParam("ns") String ns,
				@javax.ws.rs.HeaderParam("Accept") String Accept

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "queryall");
			request_tRESTRequest_1.put("PATTERN", "/queryall/{ns}:{id}");

			final javax.ws.rs.core.UriInfo ui = messageContext.getUriInfo();

			request_tRESTRequest_1.put("URI", ui.getPath());
			request_tRESTRequest_1.put("URI_BASE", ui.getBaseUri().toString());
			request_tRESTRequest_1.put("URI_ABSOLUTE", ui.getAbsolutePath()
					.toString());

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			parameters_tRESTRequest_1.put("PATH:id:id_String", id);

			parameters_tRESTRequest_1.put("PATH:ns:id_String", ns);

			parameters_tRESTRequest_1.put("HEADER:Accept:id_String", Accept);

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			request_tRESTRequest_1.put("ALL_HEADER_PARAMS", messageContext
					.getHttpHeaders().getRequestHeaders());
			request_tRESTRequest_1.put("ALL_QUERY_PARAMS",
					ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext_tRESTRequest_1 = messageContext
					.getSecurityContext();
			if (null != securityContext_tRESTRequest_1
					&& null != securityContext_tRESTRequest_1
							.getUserPrincipal()) {
				request_tRESTRequest_1.put("PRINCIPAL_NAME",
						securityContext_tRESTRequest_1.getUserPrincipal()
								.getName());
			}
			request_tRESTRequest_1.put("CorrelationID",
					messageContext.get("CorrelationID"));

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.GET()
		@javax.ws.rs.Path("/{format}/searchns/{namespace}/{query}")
		@javax.ws.rs.Produces({ "*/*" })
		public javax.ws.rs.core.Response method_searchns(

		@javax.ws.rs.PathParam("namespace") String namespace,
				@javax.ws.rs.PathParam("query") String query,
				@javax.ws.rs.PathParam("format") String format

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "method_searchns");
			request_tRESTRequest_1.put("PATTERN",
					"/{format}/searchns/{namespace}/{query}");

			final javax.ws.rs.core.UriInfo ui = messageContext.getUriInfo();

			request_tRESTRequest_1.put("URI", ui.getPath());
			request_tRESTRequest_1.put("URI_BASE", ui.getBaseUri().toString());
			request_tRESTRequest_1.put("URI_ABSOLUTE", ui.getAbsolutePath()
					.toString());

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			parameters_tRESTRequest_1
					.put("PATH:namespace:id_String", namespace);

			parameters_tRESTRequest_1.put("PATH:query:id_String", query);

			parameters_tRESTRequest_1.put("PATH:format:id_String", format);

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			request_tRESTRequest_1.put("ALL_HEADER_PARAMS", messageContext
					.getHttpHeaders().getRequestHeaders());
			request_tRESTRequest_1.put("ALL_QUERY_PARAMS",
					ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext_tRESTRequest_1 = messageContext
					.getSecurityContext();
			if (null != securityContext_tRESTRequest_1
					&& null != securityContext_tRESTRequest_1
							.getUserPrincipal()) {
				request_tRESTRequest_1.put("PRINCIPAL_NAME",
						securityContext_tRESTRequest_1.getUserPrincipal()
								.getName());
			}
			request_tRESTRequest_1.put("CorrelationID",
					messageContext.get("CorrelationID"));

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.GET()
		@javax.ws.rs.Path("/{format}/linksns/{namespace}/{ns}:{id}")
		@javax.ws.rs.Produces({ "*/*" })
		public javax.ws.rs.core.Response method_linksns(

		@javax.ws.rs.PathParam("id") String id,
				@javax.ws.rs.PathParam("ns") String ns,
				@javax.ws.rs.PathParam("namespace") String namespace,
				@javax.ws.rs.PathParam("format") String format

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "method_linksns");
			request_tRESTRequest_1.put("PATTERN",
					"/{format}/linksns/{namespace}/{ns}:{id}");

			final javax.ws.rs.core.UriInfo ui = messageContext.getUriInfo();

			request_tRESTRequest_1.put("URI", ui.getPath());
			request_tRESTRequest_1.put("URI_BASE", ui.getBaseUri().toString());
			request_tRESTRequest_1.put("URI_ABSOLUTE", ui.getAbsolutePath()
					.toString());

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			parameters_tRESTRequest_1.put("PATH:id:id_String", id);

			parameters_tRESTRequest_1.put("PATH:ns:id_String", ns);

			parameters_tRESTRequest_1
					.put("PATH:namespace:id_String", namespace);

			parameters_tRESTRequest_1.put("PATH:format:id_String", format);

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			request_tRESTRequest_1.put("ALL_HEADER_PARAMS", messageContext
					.getHttpHeaders().getRequestHeaders());
			request_tRESTRequest_1.put("ALL_QUERY_PARAMS",
					ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext_tRESTRequest_1 = messageContext
					.getSecurityContext();
			if (null != securityContext_tRESTRequest_1
					&& null != securityContext_tRESTRequest_1
							.getUserPrincipal()) {
				request_tRESTRequest_1.put("PRINCIPAL_NAME",
						securityContext_tRESTRequest_1.getUserPrincipal()
								.getName());
			}
			request_tRESTRequest_1.put("CorrelationID",
					messageContext.get("CorrelationID"));

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.GET()
		@javax.ws.rs.Path("/test/{namespace}")
		@javax.ws.rs.Produces({ "*/*" })
		public javax.ws.rs.core.Response test_namespace(

		@javax.ws.rs.PathParam("namespace") String namespace

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "test_namespace");
			request_tRESTRequest_1.put("PATTERN", "/test/{namespace}");

			final javax.ws.rs.core.UriInfo ui = messageContext.getUriInfo();

			request_tRESTRequest_1.put("URI", ui.getPath());
			request_tRESTRequest_1.put("URI_BASE", ui.getBaseUri().toString());
			request_tRESTRequest_1.put("URI_ABSOLUTE", ui.getAbsolutePath()
					.toString());

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			parameters_tRESTRequest_1
					.put("PATH:namespace:id_String", namespace);

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			request_tRESTRequest_1.put("ALL_HEADER_PARAMS", messageContext
					.getHttpHeaders().getRequestHeaders());
			request_tRESTRequest_1.put("ALL_QUERY_PARAMS",
					ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext_tRESTRequest_1 = messageContext
					.getSecurityContext();
			if (null != securityContext_tRESTRequest_1
					&& null != securityContext_tRESTRequest_1
							.getUserPrincipal()) {
				request_tRESTRequest_1.put("PRINCIPAL_NAME",
						securityContext_tRESTRequest_1.getUserPrincipal()
								.getName());
			}
			request_tRESTRequest_1.put("CorrelationID",
					messageContext.get("CorrelationID"));

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.GET()
		@javax.ws.rs.Path("/{namespace}/{method}/{format}/{query}")
		@javax.ws.rs.Produces({ "*/*" })
		public javax.ws.rs.core.Response method_query(

		@javax.ws.rs.PathParam("method") String method,
				@javax.ws.rs.PathParam("namespace") String namespace,
				@javax.ws.rs.PathParam("query") String query,
				@javax.ws.rs.PathParam("format") String format

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "method_query");
			request_tRESTRequest_1.put("PATTERN",
					"/{namespace}/{method}/{format}/{query}");

			final javax.ws.rs.core.UriInfo ui = messageContext.getUriInfo();

			request_tRESTRequest_1.put("URI", ui.getPath());
			request_tRESTRequest_1.put("URI_BASE", ui.getBaseUri().toString());
			request_tRESTRequest_1.put("URI_ABSOLUTE", ui.getAbsolutePath()
					.toString());

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			parameters_tRESTRequest_1.put("PATH:method:id_String", method);

			parameters_tRESTRequest_1
					.put("PATH:namespace:id_String", namespace);

			parameters_tRESTRequest_1.put("PATH:query:id_String", query);

			parameters_tRESTRequest_1.put("PATH:format:id_String", format);

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			request_tRESTRequest_1.put("ALL_HEADER_PARAMS", messageContext
					.getHttpHeaders().getRequestHeaders());
			request_tRESTRequest_1.put("ALL_QUERY_PARAMS",
					ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext_tRESTRequest_1 = messageContext
					.getSecurityContext();
			if (null != securityContext_tRESTRequest_1
					&& null != securityContext_tRESTRequest_1
							.getUserPrincipal()) {
				request_tRESTRequest_1.put("PRINCIPAL_NAME",
						securityContext_tRESTRequest_1.getUserPrincipal()
								.getName());
			}
			request_tRESTRequest_1.put("CorrelationID",
					messageContext.get("CorrelationID"));

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.GET()
		@javax.ws.rs.Path("/{namespace}/{method}/{format}")
		@javax.ws.rs.Produces({ "*/*" })
		public javax.ws.rs.core.Response method_uri(

		@javax.ws.rs.PathParam("method") String method,
				@javax.ws.rs.QueryParam("query") String query,
				@javax.ws.rs.PathParam("namespace") String namespace,
				@javax.ws.rs.QueryParam("uri") String uri,
				@javax.ws.rs.PathParam("format") String format

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "method_uri");
			request_tRESTRequest_1.put("PATTERN",
					"/{namespace}/{method}/{format}");

			final javax.ws.rs.core.UriInfo ui = messageContext.getUriInfo();

			request_tRESTRequest_1.put("URI", ui.getPath());
			request_tRESTRequest_1.put("URI_BASE", ui.getBaseUri().toString());
			request_tRESTRequest_1.put("URI_ABSOLUTE", ui.getAbsolutePath()
					.toString());

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			parameters_tRESTRequest_1.put("PATH:method:id_String", method);

			parameters_tRESTRequest_1.put("QUERY:query:id_String", query);

			parameters_tRESTRequest_1
					.put("PATH:namespace:id_String", namespace);

			parameters_tRESTRequest_1.put("QUERY:uri:id_String", uri);

			parameters_tRESTRequest_1.put("PATH:format:id_String", format);

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			request_tRESTRequest_1.put("ALL_HEADER_PARAMS", messageContext
					.getHttpHeaders().getRequestHeaders());
			request_tRESTRequest_1.put("ALL_QUERY_PARAMS",
					ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext_tRESTRequest_1 = messageContext
					.getSecurityContext();
			if (null != securityContext_tRESTRequest_1
					&& null != securityContext_tRESTRequest_1
							.getUserPrincipal()) {
				request_tRESTRequest_1.put("PRINCIPAL_NAME",
						securityContext_tRESTRequest_1.getUserPrincipal()
								.getName());
			}
			request_tRESTRequest_1.put("CorrelationID",
					messageContext.get("CorrelationID"));

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.GET()
		@javax.ws.rs.Path("/{namespace}/{method}/{format}/{ns}:{id}")
		@javax.ws.rs.Produces({ "*/*" })
		public javax.ws.rs.core.Response method_nsid(

		@javax.ws.rs.PathParam("method") String method,
				@javax.ws.rs.PathParam("id") String id,
				@javax.ws.rs.PathParam("ns") String ns,
				@javax.ws.rs.PathParam("namespace") String namespace,
				@javax.ws.rs.PathParam("format") String format

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "method_nsid");
			request_tRESTRequest_1.put("PATTERN",
					"/{namespace}/{method}/{format}/{ns}:{id}");

			final javax.ws.rs.core.UriInfo ui = messageContext.getUriInfo();

			request_tRESTRequest_1.put("URI", ui.getPath());
			request_tRESTRequest_1.put("URI_BASE", ui.getBaseUri().toString());
			request_tRESTRequest_1.put("URI_ABSOLUTE", ui.getAbsolutePath()
					.toString());

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			parameters_tRESTRequest_1.put("PATH:method:id_String", method);

			parameters_tRESTRequest_1.put("PATH:id:id_String", id);

			parameters_tRESTRequest_1.put("PATH:ns:id_String", ns);

			parameters_tRESTRequest_1
					.put("PATH:namespace:id_String", namespace);

			parameters_tRESTRequest_1.put("PATH:format:id_String", format);

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			request_tRESTRequest_1.put("ALL_HEADER_PARAMS", messageContext
					.getHttpHeaders().getRequestHeaders());
			request_tRESTRequest_1.put("ALL_QUERY_PARAMS",
					ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext_tRESTRequest_1 = messageContext
					.getSecurityContext();
			if (null != securityContext_tRESTRequest_1
					&& null != securityContext_tRESTRequest_1
							.getUserPrincipal()) {
				request_tRESTRequest_1.put("PRINCIPAL_NAME",
						securityContext_tRESTRequest_1.getUserPrincipal()
								.getName());
			}
			request_tRESTRequest_1.put("CorrelationID",
					messageContext.get("CorrelationID"));

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.GET()
		@javax.ws.rs.Path("/datasets")
		@javax.ws.rs.Produces({ "*/*" })
		public javax.ws.rs.core.Response datasets(

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "datasets");
			request_tRESTRequest_1.put("PATTERN", "/datasets");

			final javax.ws.rs.core.UriInfo ui = messageContext.getUriInfo();

			request_tRESTRequest_1.put("URI", ui.getPath());
			request_tRESTRequest_1.put("URI_BASE", ui.getBaseUri().toString());
			request_tRESTRequest_1.put("URI_ABSOLUTE", ui.getAbsolutePath()
					.toString());

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			request_tRESTRequest_1.put("ALL_HEADER_PARAMS", messageContext
					.getHttpHeaders().getRequestHeaders());
			request_tRESTRequest_1.put("ALL_QUERY_PARAMS",
					ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext_tRESTRequest_1 = messageContext
					.getSecurityContext();
			if (null != securityContext_tRESTRequest_1
					&& null != securityContext_tRESTRequest_1
							.getUserPrincipal()) {
				request_tRESTRequest_1.put("PRINCIPAL_NAME",
						securityContext_tRESTRequest_1.getUserPrincipal()
								.getName());
			}
			request_tRESTRequest_1.put("CorrelationID",
					messageContext.get("CorrelationID"));

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.GET()
		@javax.ws.rs.Path("/test")
		@javax.ws.rs.Produces({ "*/*" })
		public javax.ws.rs.core.Response test(

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "test");
			request_tRESTRequest_1.put("PATTERN", "/test");

			final javax.ws.rs.core.UriInfo ui = messageContext.getUriInfo();

			request_tRESTRequest_1.put("URI", ui.getPath());
			request_tRESTRequest_1.put("URI_BASE", ui.getBaseUri().toString());
			request_tRESTRequest_1.put("URI_ABSOLUTE", ui.getAbsolutePath()
					.toString());

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			request_tRESTRequest_1.put("ALL_HEADER_PARAMS", messageContext
					.getHttpHeaders().getRequestHeaders());
			request_tRESTRequest_1.put("ALL_QUERY_PARAMS",
					ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext_tRESTRequest_1 = messageContext
					.getSecurityContext();
			if (null != securityContext_tRESTRequest_1
					&& null != securityContext_tRESTRequest_1
							.getUserPrincipal()) {
				request_tRESTRequest_1.put("PRINCIPAL_NAME",
						securityContext_tRESTRequest_1.getUserPrincipal()
								.getName());
			}
			request_tRESTRequest_1.put("CorrelationID",
					messageContext.get("CorrelationID"));

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.GET()
		@javax.ws.rs.Path("/page/{ns}:{id}")
		@javax.ws.rs.Produces({ "*/*" })
		public javax.ws.rs.core.Response page(

		@javax.ws.rs.PathParam("id") String id,
				@javax.ws.rs.PathParam("ns") String ns

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "page");
			request_tRESTRequest_1.put("PATTERN", "/page/{ns}:{id}");

			final javax.ws.rs.core.UriInfo ui = messageContext.getUriInfo();

			request_tRESTRequest_1.put("URI", ui.getPath());
			request_tRESTRequest_1.put("URI_BASE", ui.getBaseUri().toString());
			request_tRESTRequest_1.put("URI_ABSOLUTE", ui.getAbsolutePath()
					.toString());

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			parameters_tRESTRequest_1.put("PATH:id:id_String", id);

			parameters_tRESTRequest_1.put("PATH:ns:id_String", ns);

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			request_tRESTRequest_1.put("ALL_HEADER_PARAMS", messageContext
					.getHttpHeaders().getRequestHeaders());
			request_tRESTRequest_1.put("ALL_QUERY_PARAMS",
					ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext_tRESTRequest_1 = messageContext
					.getSecurityContext();
			if (null != securityContext_tRESTRequest_1
					&& null != securityContext_tRESTRequest_1
							.getUserPrincipal()) {
				request_tRESTRequest_1.put("PRINCIPAL_NAME",
						securityContext_tRESTRequest_1.getUserPrincipal()
								.getName());
			}
			request_tRESTRequest_1.put("CorrelationID",
					messageContext.get("CorrelationID"));

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.GET()
		@javax.ws.rs.Path("/{format}/{ns}:{id}")
		@javax.ws.rs.Produces({ "*/*" })
		public javax.ws.rs.core.Response nsid_format(

		@javax.ws.rs.PathParam("id") String id,
				@javax.ws.rs.PathParam("ns") String ns,
				@javax.ws.rs.PathParam("format") String format

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "nsid_format");
			request_tRESTRequest_1.put("PATTERN", "/{format}/{ns}:{id}");

			final javax.ws.rs.core.UriInfo ui = messageContext.getUriInfo();

			request_tRESTRequest_1.put("URI", ui.getPath());
			request_tRESTRequest_1.put("URI_BASE", ui.getBaseUri().toString());
			request_tRESTRequest_1.put("URI_ABSOLUTE", ui.getAbsolutePath()
					.toString());

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			parameters_tRESTRequest_1.put("PATH:id:id_String", id);

			parameters_tRESTRequest_1.put("PATH:ns:id_String", ns);

			parameters_tRESTRequest_1.put("PATH:format:id_String", format);

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			request_tRESTRequest_1.put("ALL_HEADER_PARAMS", messageContext
					.getHttpHeaders().getRequestHeaders());
			request_tRESTRequest_1.put("ALL_QUERY_PARAMS",
					ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext_tRESTRequest_1 = messageContext
					.getSecurityContext();
			if (null != securityContext_tRESTRequest_1
					&& null != securityContext_tRESTRequest_1
							.getUserPrincipal()) {
				request_tRESTRequest_1.put("PRINCIPAL_NAME",
						securityContext_tRESTRequest_1.getUserPrincipal()
								.getName());
			}
			request_tRESTRequest_1.put("CorrelationID",
					messageContext.get("CorrelationID"));

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.GET()
		@javax.ws.rs.Path("/{ns}:{id}")
		@javax.ws.rs.Produces({ "*/*" })
		public javax.ws.rs.core.Response nsid(

		@javax.ws.rs.PathParam("id") String id,
				@javax.ws.rs.PathParam("ns") String ns,
				@javax.ws.rs.HeaderParam("Accept") String Accept

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "nsid");
			request_tRESTRequest_1.put("PATTERN", "/{ns}:{id}");

			final javax.ws.rs.core.UriInfo ui = messageContext.getUriInfo();

			request_tRESTRequest_1.put("URI", ui.getPath());
			request_tRESTRequest_1.put("URI_BASE", ui.getBaseUri().toString());
			request_tRESTRequest_1.put("URI_ABSOLUTE", ui.getAbsolutePath()
					.toString());

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			parameters_tRESTRequest_1.put("PATH:id:id_String", id);

			parameters_tRESTRequest_1.put("PATH:ns:id_String", ns);

			parameters_tRESTRequest_1.put("HEADER:Accept:id_String", Accept);

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			request_tRESTRequest_1.put("ALL_HEADER_PARAMS", messageContext
					.getHttpHeaders().getRequestHeaders());
			request_tRESTRequest_1.put("ALL_QUERY_PARAMS",
					ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext_tRESTRequest_1 = messageContext
					.getSecurityContext();
			if (null != securityContext_tRESTRequest_1
					&& null != securityContext_tRESTRequest_1
							.getUserPrincipal()) {
				request_tRESTRequest_1.put("PRINCIPAL_NAME",
						securityContext_tRESTRequest_1.getUserPrincipal()
								.getName());
			}
			request_tRESTRequest_1.put("CorrelationID",
					messageContext.get("CorrelationID"));

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.GET()
		@javax.ws.rs.Path("/")
		@javax.ws.rs.Produces({ "*/*" })
		public javax.ws.rs.core.Response index(

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "index");
			request_tRESTRequest_1.put("PATTERN", "/");

			final javax.ws.rs.core.UriInfo ui = messageContext.getUriInfo();

			request_tRESTRequest_1.put("URI", ui.getPath());
			request_tRESTRequest_1.put("URI_BASE", ui.getBaseUri().toString());
			request_tRESTRequest_1.put("URI_ABSOLUTE", ui.getAbsolutePath()
					.toString());

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			request_tRESTRequest_1.put("ALL_HEADER_PARAMS", messageContext
					.getHttpHeaders().getRequestHeaders());
			request_tRESTRequest_1.put("ALL_QUERY_PARAMS",
					ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext_tRESTRequest_1 = messageContext
					.getSecurityContext();
			if (null != securityContext_tRESTRequest_1
					&& null != securityContext_tRESTRequest_1
							.getUserPrincipal()) {
				request_tRESTRequest_1.put("PRINCIPAL_NAME",
						securityContext_tRESTRequest_1.getUserPrincipal()
								.getName());
			}
			request_tRESTRequest_1.put("CorrelationID",
					messageContext.get("CorrelationID"));

			return processRequest(request_tRESTRequest_1);
		}

		public javax.ws.rs.core.Response handleWrongRequest(
				org.apache.cxf.jaxrs.ext.MessageContext context, int status,
				String error) {

			// System.out.println("wrong call [uri: " +
			// context.getUriInfo().getPath() + " ; method: " +
			// context.getRequest().getMethod() + " ; status: " + status +
			// " ; error: " + error + "]");

			java.util.Map<String, Object> wrongRequest = new java.util.HashMap<String, Object>();
			wrongRequest.put("ERROR", error);
			wrongRequest.put("STATUS", status);
			wrongRequest.put("VERB", context.getRequest().getMethod());
			wrongRequest.put("URI", context.getUriInfo().getPath());
			wrongRequest.put("URI_BASE", context.getUriInfo().getBaseUri()
					.toString());
			wrongRequest.put("URI_ABSOLUTE", context.getUriInfo()
					.getAbsolutePath().toString());

			return processRequest(wrongRequest);
		}

		private static org.apache.cxf.jaxrs.ext.multipart.Attachment getFirstMatchingPart(
				org.apache.cxf.jaxrs.ext.MessageContext messageContext,
				String partName) {
			List<org.apache.cxf.jaxrs.ext.multipart.Attachment> all = org.apache.cxf.jaxrs.utils.multipart.AttachmentUtils
					.getAttachments(messageContext);
			for (org.apache.cxf.jaxrs.ext.multipart.Attachment att : all) {
				if (partName.equals(att.getContentId())) {
					return att;
				}
				org.apache.cxf.jaxrs.ext.multipart.ContentDisposition cd = att
						.getContentDisposition();
				if (null != cd && partName.equals(cd.getParameter("name"))) {
					return att;
				}
			}
			// unexpected
			throw new javax.ws.rs.InternalServerErrorException();
		}
	}

	public static class ExceptionMapper4TalendJobRestService extends
			org.apache.cxf.jaxrs.impl.WebApplicationExceptionMapper {

		@javax.ws.rs.core.Context
		private org.apache.cxf.jaxrs.ext.MessageContext messageContext;

		private RestServiceProviderImpl4TalendJob provider;

		public ExceptionMapper4TalendJobRestService(
				RestServiceProviderImpl4TalendJob provider) {
			this.provider = provider;
		}

		public javax.ws.rs.core.Response toResponse(
				javax.ws.rs.WebApplicationException ex) {
			String error = null;
			javax.ws.rs.core.Response response = ex.getResponse();
			if (null != response && null != response.getEntity()) {
				error = response.getEntity().toString();
			}
			response = super.toResponse(ex);
			if (null == error) {
				if (null != response && null != response.getEntity()) {
					error = response.getEntity().toString();
				} else {
					error = null == ex.getCause() ? ex.getMessage() : ex
							.getCause().getMessage();
				}
			}
			response = provider.handleWrongRequest(messageContext,
					response.getStatus(), error);

			java.util.List<javax.ws.rs.core.MediaType> accepts = messageContext
					.getHttpHeaders().getAcceptableMediaTypes();
			javax.ws.rs.core.MediaType responseType = accepts.isEmpty() ? null
					: accepts.get(0);

			if (responseType == null
					|| !responseType.getSubtype().equals("xml")
					&& !responseType.getSubtype().equals("json")) {
				responseType = javax.ws.rs.core.MediaType.APPLICATION_XML_TYPE;
			}

			return javax.ws.rs.core.Response.status(response.getStatus())
					.entity(response.getEntity()).type(responseType).build();
		}
	}

	Thread4RestServiceProviderEndpoint thread4RestServiceProviderEndpoint = null;

	class Thread4RestServiceProviderEndpoint extends Thread {
		private final String defaultEndpointUrl = "http://127.0.0.1:8090/";

		private String endpointUrl = context.restUrl;

		private org.apache.cxf.endpoint.Server server;

		private final REST_Bio2RDF_9000 job;

		public Thread4RestServiceProviderEndpoint(REST_Bio2RDF_9000 job) {
			this.job = job;
		}

		public void run() {
			try {
				if (null == endpointUrl || endpointUrl.trim().isEmpty()) {
					endpointUrl = defaultEndpointUrl;
				} else if (!endpointUrl.contains("://")) { // relative
					if (endpointUrl.startsWith("/")) {
						endpointUrl = endpointUrl.substring(1);
					}
					endpointUrl = defaultEndpointUrl + endpointUrl;
				}

				// test for busy
				java.net.URI endpointURI = java.net.URI.create(endpointUrl);
				String host = endpointURI.getHost();
				try {
					if (java.net.InetAddress.getByName(host)
							.isLoopbackAddress()) {
						int port = endpointURI.getPort();
						java.net.ServerSocket ss = null;
						try {
							ss = new java.net.ServerSocket(port);
						} catch (IOException e) {
							// rethrow exception
							throw new IllegalArgumentException(
									"Cannot start provider with uri: "
											+ endpointUrl + ". Port " + port
											+ " already in use.");
						} finally {
							if (ss != null) {
								try {
									ss.close();
								} catch (IOException e) {
									// ignore
								}
							}
						}
						try {
							// ok, let's doublecheck for silent listeners
							java.net.Socket cs = new java.net.Socket(host, port);
							// if succeed - somebody silently listening, fail!
							cs.close();
							// rethrow exception
							throw new IllegalArgumentException(
									"Cannot start provider with uri: "
											+ endpointUrl + ". Port " + port
											+ " already in use.");
						} catch (IOException e) {
							// ok, nobody listens, proceed
						}
					}
				} catch (java.net.UnknownHostException e) {
					// ignore
				}

				RestServiceProviderImpl4TalendJob provider = new RestServiceProviderImpl4TalendJob(
						job);

				org.apache.cxf.jaxrs.JAXRSServerFactoryBean sf = new org.apache.cxf.jaxrs.JAXRSServerFactoryBean();
				java.util.List<Object> providers = new java.util.ArrayList<Object>();
				providers
						.add(new ExceptionMapper4TalendJobRestService(provider));
				providers
						.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider());
				org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
				jsonProvider.setIgnoreNamespaces(true);
				jsonProvider.setAttributesToElements(true);

				providers.add(jsonProvider);
				sf.setProviders(providers);
				sf.setTransportId("http://cxf.apache.org/transports/http");
				sf.setResourceClasses(RestServiceProviderImpl4TalendJob.class);
				sf.setResourceProvider(
						RestServiceProviderImpl4TalendJob.class,
						new org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider(
								provider));
				sf.setAddress(endpointUrl);

				final java.util.List<org.apache.cxf.feature.Feature> features = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

				sf.setFeatures(features);

				server = sf.create();

				// System.out.println("REST service [endpoint: " + endpointUrl +
				// "] published");
			} catch (Throwable e) {
				e.printStackTrace();
			}
		}

		public void stopEndpoint() {
			if (null != server) {
				server.stop();
				server.destroy();
				// System.out.println("REST service [endpoint: " + endpointUrl +
				// "] unpublished");
			}
		}
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */
				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */
				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tJava_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				// context.database_endpoint =
				// "http://dataset.bio2rdf.org/sparql";
				// context.database_endpoint =
				// "http://beta.dataset.bio2rdf.org/sparql";

				// context.restUrl = "http://192.168.3.25:9000";
				// context.restUrl = "http://localhost:9000";

				System.out.println("Dataset endpoint: "
						+ context.database_endpoint);
				System.out.println("REST URL: " + context.restUrl);

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row48Struct implements
			routines.system.IPersistableRow<row48Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String string;

		public String getString() {
			return this.string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row48Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row47Struct implements
			routines.system.IPersistableRow<row47Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String request;

		public String getRequest() {
			return this.request;
		}

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String Accept;

		public String getAccept() {
			return this.Accept;
		}

		public String ResponseContent;

		public String getResponseContent() {
			return this.ResponseContent;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.request = readString(dis);

					this.ns = readString(dis);

					this.id = readString(dis);

					this.Accept = readString(dis);

					this.ResponseContent = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.request, dos);

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.Accept, dos);

				// String

				writeString(this.ResponseContent, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("request=" + request);
			sb.append(",ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",Accept=" + Accept);
			sb.append(",ResponseContent=" + ResponseContent);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row47Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row46Struct implements
			routines.system.IPersistableRow<row46Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String request;

		public String getRequest() {
			return this.request;
		}

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String Accept;

		public String getAccept() {
			return this.Accept;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.request = readString(dis);

					this.ns = readString(dis);

					this.id = readString(dis);

					this.Accept = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.request, dos);

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.Accept, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("request=" + request);
			sb.append(",ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",Accept=" + Accept);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row46Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row45Struct implements
			routines.system.IPersistableRow<row45Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String Accept;

		public String getAccept() {
			return this.Accept;
		}

		public String request;

		public String getRequest() {
			return this.request;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.ns = readString(dis);

					this.id = readString(dis);

					this.Accept = readString(dis);

					this.request = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.Accept, dos);

				// String

				writeString(this.request, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",Accept=" + Accept);
			sb.append(",request=" + request);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row45Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row29Struct implements
			routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String string;

		public String getString() {
			return this.string;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.string = readString(dis);

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.string, dos);

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("string=" + string);
			sb.append(",body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String query;

		public String getQuery() {
			return this.query;
		}

		public String request;

		public String getRequest() {
			return this.request;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.namespace = readString(dis);

					this.format = readString(dis);

					this.ns = readString(dis);

					this.id = readString(dis);

					this.query = readString(dis);

					this.request = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.query, dos);

				// String

				writeString(this.request, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("namespace=" + namespace);
			sb.append(",format=" + format);
			sb.append(",ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",query=" + query);
			sb.append(",request=" + request);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String query;

		public String getQuery() {
			return this.query;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.format = readString(dis);

					this.namespace = readString(dis);

					this.query = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.format, dos);

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.query, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("format=" + format);
			sb.append(",namespace=" + namespace);
			sb.append(",query=" + query);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String string;

		public String getString() {
			return this.string;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.string = readString(dis);

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.string, dos);

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("string=" + string);
			sb.append(",body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String query;

		public String getQuery() {
			return this.query;
		}

		public String request;

		public String getRequest() {
			return this.request;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.namespace = readString(dis);

					this.format = readString(dis);

					this.ns = readString(dis);

					this.id = readString(dis);

					this.query = readString(dis);

					this.request = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.query, dos);

				// String

				writeString(this.request, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("namespace=" + namespace);
			sb.append(",format=" + format);
			sb.append(",ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",query=" + query);
			sb.append(",request=" + request);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.format = readString(dis);

					this.namespace = readString(dis);

					this.ns = readString(dis);

					this.id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.format, dos);

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("format=" + format);
			sb.append(",namespace=" + namespace);
			sb.append(",ns=" + ns);
			sb.append(",id=" + id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row44Struct implements
			routines.system.IPersistableRow<row44Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row44Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row43Struct implements
			routines.system.IPersistableRow<row43Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		public String comment;

		public String getComment() {
			return this.comment;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

					this.comment = readString(dis);

					this.title = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

				// String

				writeString(this.comment, dos);

				// String

				writeString(this.title, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append(",comment=" + comment);
			sb.append(",title=" + title);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row43Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtDenormalize_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtDenormalize_1> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		public String comment;

		public String getComment() {
			return this.comment;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

					this.comment = readString(dis);

					this.title = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

				// String

				writeString(this.comment, dos);

				// String

				writeString(this.title, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append(",comment=" + comment);
			sb.append(",title=" + title);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtDenormalize_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row41Struct implements
			routines.system.IPersistableRow<row41Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		public String comment;

		public String getComment() {
			return this.comment;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

					this.comment = readString(dis);

					this.title = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

				// String

				writeString(this.comment, dos);

				// String

				writeString(this.title, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append(",comment=" + comment);
			sb.append(",title=" + title);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row41Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_2 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_2> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		public String comment;

		public String getComment() {
			return this.comment;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

					this.comment = readString(dis);

					this.title = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

				// String

				writeString(this.comment, dos);

				// String

				writeString(this.title, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append(",comment=" + comment);
			sb.append(",title=" + title);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfout6Struct implements
			routines.system.IPersistableRow<copyOfout6Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		public String comment;

		public String getComment() {
			return this.comment;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

					this.comment = readString(dis);

					this.title = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

				// String

				writeString(this.comment, dos);

				// String

				writeString(this.title, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append(",comment=" + comment);
			sb.append(",title=" + title);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row40Struct implements
			routines.system.IPersistableRow<row40Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String o;

		public String getO() {
			return this.o;
		}

		public String comment;

		public String getComment() {
			return this.comment;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.o = readString(dis);

					this.comment = readString(dis);

					this.title = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.o, dos);

				// String

				writeString(this.comment, dos);

				// String

				writeString(this.title, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("o=" + o);
			sb.append(",comment=" + comment);
			sb.append(",title=" + title);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row40Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row34Struct implements
			routines.system.IPersistableRow<row34Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String o;

		public String getO() {
			return this.o;
		}

		public String comment;

		public String getComment() {
			return this.comment;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.o = readString(dis);

					this.comment = readString(dis);

					this.title = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.o, dos);

				// String

				writeString(this.comment, dos);

				// String

				writeString(this.title, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("o=" + o);
			sb.append(",comment=" + comment);
			sb.append(",title=" + title);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row31Struct implements
			routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.namespace = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.namespace, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("namespace=" + namespace);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements
			routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.namespace = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.namespace, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("namespace=" + namespace);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row59Struct implements
			routines.system.IPersistableRow<row59Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String string;

		public String getString() {
			return this.string;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.string = readString(dis);

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.string, dos);

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("string=" + string);
			sb.append(",body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row59Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row57Struct implements
			routines.system.IPersistableRow<row57Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String query;

		public String getQuery() {
			return this.query;
		}

		public String request;

		public String getRequest() {
			return this.request;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.namespace = readString(dis);

					this.format = readString(dis);

					this.ns = readString(dis);

					this.id = readString(dis);

					this.query = readString(dis);

					this.request = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.query, dos);

				// String

				writeString(this.request, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("namespace=" + namespace);
			sb.append(",format=" + format);
			sb.append(",ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",query=" + query);
			sb.append(",request=" + request);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row57Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row64Struct implements
			routines.system.IPersistableRow<row64Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String method;

		public String getMethod() {
			return this.method;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String query;

		public String getQuery() {
			return this.query;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.namespace = readString(dis);

					this.method = readString(dis);

					this.format = readString(dis);

					this.query = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.method, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.query, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("namespace=" + namespace);
			sb.append(",method=" + method);
			sb.append(",format=" + format);
			sb.append(",query=" + query);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row64Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row68Struct implements
			routines.system.IPersistableRow<row68Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String string;

		public String getString() {
			return this.string;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.string = readString(dis);

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.string, dos);

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("string=" + string);
			sb.append(",body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row68Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row67Struct implements
			routines.system.IPersistableRow<row67Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String uri;

		public String getUri() {
			return this.uri;
		}

		public String query;

		public String getQuery() {
			return this.query;
		}

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String request;

		public String getRequest() {
			return this.request;
		}

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.uri = readString(dis);

					this.query = readString(dis);

					this.ns = readString(dis);

					this.id = readString(dis);

					this.request = readString(dis);

					this.namespace = readString(dis);

					this.format = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.uri, dos);

				// String

				writeString(this.query, dos);

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.request, dos);

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.format, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uri=" + uri);
			sb.append(",query=" + query);
			sb.append(",ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",request=" + request);
			sb.append(",namespace=" + namespace);
			sb.append(",format=" + format);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row67Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row66Struct implements
			routines.system.IPersistableRow<row66Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String uri;

		public String getUri() {
			return this.uri;
		}

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String method;

		public String getMethod() {
			return this.method;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String query;

		public String getQuery() {
			return this.query;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.uri = readString(dis);

					this.namespace = readString(dis);

					this.method = readString(dis);

					this.format = readString(dis);

					this.query = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.uri, dos);

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.method, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.query, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uri=" + uri);
			sb.append(",namespace=" + namespace);
			sb.append(",method=" + method);
			sb.append(",format=" + format);
			sb.append(",query=" + query);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row66Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row60Struct implements
			routines.system.IPersistableRow<row60Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String string;

		public String getString() {
			return this.string;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.string = readString(dis);

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.string, dos);

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("string=" + string);
			sb.append(",body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row60Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row58Struct implements
			routines.system.IPersistableRow<row58Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String query;

		public String getQuery() {
			return this.query;
		}

		public String request;

		public String getRequest() {
			return this.request;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.namespace = readString(dis);

					this.format = readString(dis);

					this.ns = readString(dis);

					this.id = readString(dis);

					this.query = readString(dis);

					this.request = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.query, dos);

				// String

				writeString(this.request, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("namespace=" + namespace);
			sb.append(",format=" + format);
			sb.append(",ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",query=" + query);
			sb.append(",request=" + request);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row58Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row63Struct implements
			routines.system.IPersistableRow<row63Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String method;

		public String getMethod() {
			return this.method;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.method = readString(dis);

					this.format = readString(dis);

					this.ns = readString(dis);

					this.id = readString(dis);

					this.namespace = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.method, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.namespace, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("method=" + method);
			sb.append(",format=" + format);
			sb.append(",ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",namespace=" + namespace);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row63Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements
			routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String string;

		public String getString() {
			return this.string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtDenormalize_2 implements
			routines.system.IPersistableRow<OnRowsEndStructtDenormalize_2> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtDenormalize_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row42Struct implements
			routines.system.IPersistableRow<row42Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row42Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String nsid;

		public String getNsid() {
			return this.nsid;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.nsid = readString(dis);

					this.label = readString(dis);

					this.title = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nsid, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.title, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nsid=" + nsid);
			sb.append(",label=" + label);
			sb.append(",title=" + title);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String nsid;

		public String getNsid() {
			return this.nsid;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.nsid = readString(dis);

					this.label = readString(dis);

					this.title = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nsid, dos);

				// String

				writeString(this.label, dos);

				// String

				writeString(this.title, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nsid=" + nsid);
			sb.append(",label=" + label);
			sb.append(",title=" + title);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String request;

		public String getRequest() {
			return this.request;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.ns = readString(dis);

					this.id = readString(dis);

					this.request = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.request, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",request=" + request);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String request;

		public String getRequest() {
			return this.request;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.request = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.request, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("request=" + request);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String string;

		public String getString() {
			return this.string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String string;

		public String getString() {
			return this.string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String string;

		public String getString() {
			return this.string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String sparql;

		public String getSparql() {
			return this.sparql;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.sparql = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sparql, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sparql=" + sparql);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String request;

		public String getRequest() {
			return this.request;
		}

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String Accept;

		public String getAccept() {
			return this.Accept;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.request = readString(dis);

					this.ns = readString(dis);

					this.id = readString(dis);

					this.Accept = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.request, dos);

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.Accept, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("request=" + request);
			sb.append(",ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",Accept=" + Accept);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String request;

		public String getRequest() {
			return this.request;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.ns = readString(dis);

					this.id = readString(dis);

					this.request = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.request, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",request=" + request);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row33Struct implements
			routines.system.IPersistableRow<row33Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String string;

		public String getString() {
			return this.string;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.string = readString(dis);

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.string, dos);

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("string=" + string);
			sb.append(",body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row32Struct implements
			routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String sparql;

		public String getSparql() {
			return this.sparql;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.sparql = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sparql, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sparql=" + sparql);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String sparql;

		public String getSparql() {
			return this.sparql;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.sparql = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sparql, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sparql=" + sparql);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String sparql;

		public String getSparql() {
			return this.sparql;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.sparql = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sparql, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sparql=" + sparql);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String request;

		public String getRequest() {
			return this.request;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.ns = readString(dis);

					this.id = readString(dis);

					this.format = readString(dis);

					this.request = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.request, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",format=" + format);
			sb.append(",request=" + request);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String request;

		public String getRequest() {
			return this.request;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.ns = readString(dis);

					this.id = readString(dis);

					this.format = readString(dis);

					this.request = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.request, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",format=" + format);
			sb.append(",request=" + request);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row50Struct implements
			routines.system.IPersistableRow<row50Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String string;

		public String getString() {
			return this.string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row50Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row51Struct implements
			routines.system.IPersistableRow<row51Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String rdf;

		public String getRdf() {
			return this.rdf;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.rdf = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.rdf, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("rdf=" + rdf);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row51Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String request;

		public String getRequest() {
			return this.request;
		}

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String Accept;

		public String getAccept() {
			return this.Accept;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.request = readString(dis);

					this.ns = readString(dis);

					this.id = readString(dis);

					this.Accept = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.request, dos);

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.Accept, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("request=" + request);
			sb.append(",ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",Accept=" + Accept);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String Accept;

		public String getAccept() {
			return this.Accept;
		}

		public String request;

		public String getRequest() {
			return this.request;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.ns = readString(dis);

					this.id = readString(dis);

					this.Accept = readString(dis);

					this.request = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.Accept, dos);

				// String

				writeString(this.request, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",Accept=" + Accept);
			sb.append(",request=" + request);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String string;

		public String getString() {
			return this.string;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.string = readString(dis);

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.string, dos);

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("string=" + string);
			sb.append(",body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class indexStruct implements
			routines.system.IPersistableRow<indexStruct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(indexStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class nsidStruct implements
			routines.system.IPersistableRow<nsidStruct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String Accept;

		public String getAccept() {
			return this.Accept;
		}

		public String request;

		public String getRequest() {
			return this.request;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.ns = readString(dis);

					this.id = readString(dis);

					this.Accept = readString(dis);

					this.request = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.Accept, dos);

				// String

				writeString(this.request, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",Accept=" + Accept);
			sb.append(",request=" + request);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(nsidStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row39Struct implements
			routines.system.IPersistableRow<row39Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String uri;

		public String getUri() {
			return this.uri;
		}

		public String method;

		public String getMethod() {
			return this.method;
		}

		public Integer status;

		public Integer getStatus() {
			return this.status;
		}

		public String error;

		public String getError() {
			return this.error;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.uri = readString(dis);

					this.method = readString(dis);

					this.status = readInteger(dis);

					this.error = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.uri, dos);

				// String

				writeString(this.method, dos);

				// Integer

				writeInteger(this.status, dos);

				// String

				writeString(this.error, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uri=" + uri);
			sb.append(",method=" + method);
			sb.append(",status=" + String.valueOf(status));
			sb.append(",error=" + error);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row39Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class nsid_formatStruct implements
			routines.system.IPersistableRow<nsid_formatStruct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String request;

		public String getRequest() {
			return this.request;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.ns = readString(dis);

					this.id = readString(dis);

					this.format = readString(dis);

					this.request = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.request, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",format=" + format);
			sb.append(",request=" + request);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(nsid_formatStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class pageStruct implements
			routines.system.IPersistableRow<pageStruct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String request;

		public String getRequest() {
			return this.request;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.ns = readString(dis);

					this.id = readString(dis);

					this.request = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.request, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",request=" + request);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(pageStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class testStruct implements
			routines.system.IPersistableRow<testStruct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String request;

		public String getRequest() {
			return this.request;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.request = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.request, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("request=" + request);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(testStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class datasetsStruct implements
			routines.system.IPersistableRow<datasetsStruct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(datasetsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class method_nsidStruct implements
			routines.system.IPersistableRow<method_nsidStruct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String method;

		public String getMethod() {
			return this.method;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.method = readString(dis);

					this.format = readString(dis);

					this.ns = readString(dis);

					this.id = readString(dis);

					this.namespace = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.method, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.namespace, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("method=" + method);
			sb.append(",format=" + format);
			sb.append(",ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",namespace=" + namespace);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(method_nsidStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class method_uriStruct implements
			routines.system.IPersistableRow<method_uriStruct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String uri;

		public String getUri() {
			return this.uri;
		}

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String method;

		public String getMethod() {
			return this.method;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String query;

		public String getQuery() {
			return this.query;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.uri = readString(dis);

					this.namespace = readString(dis);

					this.method = readString(dis);

					this.format = readString(dis);

					this.query = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.uri, dos);

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.method, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.query, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uri=" + uri);
			sb.append(",namespace=" + namespace);
			sb.append(",method=" + method);
			sb.append(",format=" + format);
			sb.append(",query=" + query);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(method_uriStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class method_queryStruct implements
			routines.system.IPersistableRow<method_queryStruct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String method;

		public String getMethod() {
			return this.method;
		}

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String query;

		public String getQuery() {
			return this.query;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.namespace = readString(dis);

					this.method = readString(dis);

					this.format = readString(dis);

					this.query = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.method, dos);

				// String

				writeString(this.format, dos);

				// String

				writeString(this.query, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("namespace=" + namespace);
			sb.append(",method=" + method);
			sb.append(",format=" + format);
			sb.append(",query=" + query);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(method_queryStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class test_namespaceStruct implements
			routines.system.IPersistableRow<test_namespaceStruct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.namespace = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.namespace, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("namespace=" + namespace);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(test_namespaceStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class method_linksnsStruct implements
			routines.system.IPersistableRow<method_linksnsStruct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.format = readString(dis);

					this.namespace = readString(dis);

					this.ns = readString(dis);

					this.id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.format, dos);

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("format=" + format);
			sb.append(",namespace=" + namespace);
			sb.append(",ns=" + ns);
			sb.append(",id=" + id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(method_linksnsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class method_searchnsStruct implements
			routines.system.IPersistableRow<method_searchnsStruct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String format;

		public String getFormat() {
			return this.format;
		}

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String query;

		public String getQuery() {
			return this.query;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.format = readString(dis);

					this.namespace = readString(dis);

					this.query = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.format, dos);

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.query, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("format=" + format);
			sb.append(",namespace=" + namespace);
			sb.append(",query=" + query);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(method_searchnsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class queryallStruct implements
			routines.system.IPersistableRow<queryallStruct> {
		final static byte[] commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];
		static byte[] commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[0];

		public String ns;

		public String getNs() {
			return this.ns;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String Accept;

		public String getAccept() {
			return this.Accept;
		}

		public String request;

		public String getRequest() {
			return this.request;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_REST_Bio2RDF_9000.length == 0) {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_REST_Bio2RDF_9000, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_REST_Bio2RDF_9000) {

				try {

					int length = 0;

					this.ns = readString(dis);

					this.id = readString(dis);

					this.Accept = readString(dis);

					this.request = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ns, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.Accept, dos);

				// String

				writeString(this.request, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ns=" + ns);
			sb.append(",id=" + id);
			sb.append(",Accept=" + Accept);
			sb.append(",request=" + request);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(queryallStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRESTRequest_1_LoopProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				indexStruct index = new indexStruct();
				row2Struct row2 = new row2Struct();
				nsidStruct nsid = new nsidStruct();
				nsidStruct row5 = nsid;
				row12Struct row12 = new row12Struct();
				row51Struct row51 = new row51Struct();
				row50Struct row50 = new row50Struct();
				row39Struct row39 = new row39Struct();
				nsid_formatStruct nsid_format = new nsid_formatStruct();
				nsid_formatStruct row6 = nsid_format;
				row4Struct row4 = new row4Struct();
				row20Struct row20 = new row20Struct();
				row25Struct row25 = new row25Struct();
				row25Struct row32 = row25;
				row33Struct row33 = new row33Struct();
				pageStruct page = new pageStruct();
				pageStruct row13 = page;
				row14Struct row14 = new row14Struct();
				row10Struct row10 = new row10Struct();
				out1Struct out1 = new out1Struct();
				out1Struct row8 = out1;
				row9Struct row9 = new row9Struct();
				testStruct test = new testStruct();
				testStruct row7 = test;
				row1Struct row1 = new row1Struct();
				row15Struct row15 = new row15Struct();
				row15Struct row16 = row15;
				row42Struct row42 = new row42Struct();
				row21Struct row21 = new row21Struct();
				row17Struct row17 = new row17Struct();
				row19Struct row19 = new row19Struct();
				datasetsStruct datasets = new datasetsStruct();
				row26Struct row26 = new row26Struct();
				method_nsidStruct method_nsid = new method_nsidStruct();
				method_nsidStruct row63 = method_nsid;
				row58Struct row58 = new row58Struct();
				row60Struct row60 = new row60Struct();
				method_uriStruct method_uri = new method_uriStruct();
				method_uriStruct row66 = method_uri;
				row67Struct row67 = new row67Struct();
				row68Struct row68 = new row68Struct();
				method_queryStruct method_query = new method_queryStruct();
				method_queryStruct row64 = method_query;
				row57Struct row57 = new row57Struct();
				row59Struct row59 = new row59Struct();
				test_namespaceStruct test_namespace = new test_namespaceStruct();
				test_namespaceStruct row30 = test_namespace;
				row31Struct row31 = new row31Struct();
				row34Struct row34 = new row34Struct();
				row34Struct row40 = row34;
				copyOfout6Struct copyOfout6 = new copyOfout6Struct();
				row41Struct row41 = new row41Struct();
				row43Struct row43 = new row43Struct();
				row44Struct row44 = new row44Struct();
				method_linksnsStruct method_linksns = new method_linksnsStruct();
				method_linksnsStruct row3 = method_linksns;
				row18Struct row18 = new row18Struct();
				row22Struct row22 = new row22Struct();
				method_searchnsStruct method_searchns = new method_searchnsStruct();
				method_searchnsStruct row23 = method_searchns;
				row24Struct row24 = new row24Struct();
				row29Struct row29 = new row29Struct();
				queryallStruct queryall = new queryallStruct();
				queryallStruct row45 = queryall;
				row46Struct row46 = new row46Struct();
				row47Struct row47 = new row47Struct();
				row48Struct row48 = new row48Struct();

				/**
				 * [tRESTRequest_1_Loop begin ] start
				 */

				int NB_ITERATE_tRESTRequest_1_In = 0; // for statistics

				ok_Hash.put("tRESTRequest_1_Loop", false);
				start_Hash.put("tRESTRequest_1_Loop",
						System.currentTimeMillis());

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_Loop";

				int tos_count_tRESTRequest_1_Loop = 0;

				queryall = null;

				method_searchns = null;

				method_linksns = null;

				test_namespace = null;

				method_query = null;

				method_uri = null;

				method_nsid = null;

				datasets = null;

				test = null;

				page = null;

				nsid_format = null;

				nsid = null;

				index = null;

				row39 = null;

				int nb_line_tRESTRequest_1 = 0;

				try {

					java.util.Map<String, Object> requestMessage_tRESTRequest_1 = (java.util.Map<String, Object>) globalMap
							.get("restRequest");

					if (null == requestMessage_tRESTRequest_1) {

						if (restTalendJobAlreadyStarted) {
							throw new RuntimeException(
									"request is not provided");
						} else {
							if (!runInTalendEsbRuntimeContainer
									&& null == thread4RestServiceProviderEndpoint) {
								// *** external thread for endpoint
								// initialization
								thread4RestServiceProviderEndpoint = new Thread4RestServiceProviderEndpoint(
										this);
								thread4RestServiceProviderEndpoint.start();
								// *** external thread for endpoint
								// initialization
							}

							restTalendJobAlreadyStarted = true;

							Thread.currentThread();
							try {
								while (true) {
									Thread.sleep(60000);
								}
							} catch (InterruptedException e_tRESTRequest_1) {
								// e_tRESTRequest_1.printStackTrace();
								// throw new TalendException(e_tRESTRequest_1,
								// "wholeJob", globalMap);
							}
						}
						return;
					}

					/**
					 * [tRESTRequest_1_Loop begin ] stop
					 */
					/**
					 * [tRESTRequest_1_Loop main ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

					tos_count_tRESTRequest_1_Loop++;

					/**
					 * [tRESTRequest_1_Loop main ] stop
					 */
					NB_ITERATE_tRESTRequest_1_In++;
					iterateLoop++;

					/**
					 * [tFlowToIterate_3 begin ] start
					 */

					int NB_ITERATE_tFixedFlowInput_1 = 0; // for statistics

					ok_Hash.put("tFlowToIterate_3", false);
					start_Hash.put("tFlowToIterate_3",
							System.currentTimeMillis());

					currentComponent = "tFlowToIterate_3";

					int tos_count_tFlowToIterate_3 = 0;

					int nb_line_tFlowToIterate_3 = 0;
					int counter_tFlowToIterate_3 = 0;

					/**
					 * [tFlowToIterate_3 begin ] stop
					 */

					/**
					 * [tFlowToIterate_6 begin ] start
					 */

					int NB_ITERATE_tRunJob_5 = 0; // for statistics

					ok_Hash.put("tFlowToIterate_6", false);
					start_Hash.put("tFlowToIterate_6",
							System.currentTimeMillis());

					currentComponent = "tFlowToIterate_6";

					int tos_count_tFlowToIterate_6 = 0;

					int nb_line_tFlowToIterate_6 = 0;
					int counter_tFlowToIterate_6 = 0;

					/**
					 * [tFlowToIterate_6 begin ] stop
					 */

					/**
					 * [tJavaRow_5 begin ] start
					 */

					ok_Hash.put("tJavaRow_5", false);
					start_Hash.put("tJavaRow_5", System.currentTimeMillis());

					currentComponent = "tJavaRow_5";

					int tos_count_tJavaRow_5 = 0;

					int nb_line_tJavaRow_5 = 0;

					/**
					 * [tJavaRow_5 begin ] stop
					 */

					/**
					 * [tLogRow_2 begin ] start
					 */

					ok_Hash.put("tLogRow_2", false);
					start_Hash.put("tLogRow_2", System.currentTimeMillis());

					currentComponent = "tLogRow_2";

					int tos_count_tLogRow_2 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = " |2| ";
					java.io.PrintStream consoleOut_tLogRow_2 = null;

					StringBuilder strBuffer_tLogRow_2 = null;
					int nb_line_tLogRow_2 = 0;
					// /////////////////////

					/**
					 * [tLogRow_2 begin ] stop
					 */

					/**
					 * [tLogRow_21 begin ] start
					 */

					ok_Hash.put("tLogRow_21", false);
					start_Hash.put("tLogRow_21", System.currentTimeMillis());

					currentComponent = "tLogRow_21";

					int tos_count_tLogRow_21 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_21 = "|";
					java.io.PrintStream consoleOut_tLogRow_21 = null;

					StringBuilder strBuffer_tLogRow_21 = null;
					int nb_line_tLogRow_21 = 0;
					// /////////////////////

					/**
					 * [tLogRow_21 begin ] stop
					 */

					/**
					 * [tFlowToIterate_12 begin ] start
					 */

					int NB_ITERATE_tSparqlSelectRequest_6 = 0; // for statistics

					ok_Hash.put("tFlowToIterate_12", false);
					start_Hash.put("tFlowToIterate_12",
							System.currentTimeMillis());

					currentComponent = "tFlowToIterate_12";

					int tos_count_tFlowToIterate_12 = 0;

					int nb_line_tFlowToIterate_12 = 0;
					int counter_tFlowToIterate_12 = 0;

					/**
					 * [tFlowToIterate_12 begin ] stop
					 */

					/**
					 * [tJavaRow_11 begin ] start
					 */

					ok_Hash.put("tJavaRow_11", false);
					start_Hash.put("tJavaRow_11", System.currentTimeMillis());

					currentComponent = "tJavaRow_11";

					int tos_count_tJavaRow_11 = 0;

					int nb_line_tJavaRow_11 = 0;

					/**
					 * [tJavaRow_11 begin ] stop
					 */

					/**
					 * [tLogRow_8 begin ] start
					 */

					ok_Hash.put("tLogRow_8", false);
					start_Hash.put("tLogRow_8", System.currentTimeMillis());

					currentComponent = "tLogRow_8";

					int tos_count_tLogRow_8 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_8 = " |8| ";
					java.io.PrintStream consoleOut_tLogRow_8 = null;

					StringBuilder strBuffer_tLogRow_8 = null;
					int nb_line_tLogRow_8 = 0;
					// /////////////////////

					/**
					 * [tLogRow_8 begin ] stop
					 */

					/**
					 * [tFlowToIterate_17 begin ] start
					 */

					int NB_ITERATE_tSparqlSelectRequest_3 = 0; // for statistics

					ok_Hash.put("tFlowToIterate_17", false);
					start_Hash.put("tFlowToIterate_17",
							System.currentTimeMillis());

					currentComponent = "tFlowToIterate_17";

					int tos_count_tFlowToIterate_17 = 0;

					int nb_line_tFlowToIterate_17 = 0;
					int counter_tFlowToIterate_17 = 0;

					/**
					 * [tFlowToIterate_17 begin ] stop
					 */

					/**
					 * [tJavaRow_12 begin ] start
					 */

					ok_Hash.put("tJavaRow_12", false);
					start_Hash.put("tJavaRow_12", System.currentTimeMillis());

					currentComponent = "tJavaRow_12";

					int tos_count_tJavaRow_12 = 0;

					int nb_line_tJavaRow_12 = 0;

					/**
					 * [tJavaRow_12 begin ] stop
					 */

					/**
					 * [tLogRow_14 begin ] start
					 */

					ok_Hash.put("tLogRow_14", false);
					start_Hash.put("tLogRow_14", System.currentTimeMillis());

					currentComponent = "tLogRow_14";

					int tos_count_tLogRow_14 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_14 = "|";
					java.io.PrintStream consoleOut_tLogRow_14 = null;

					StringBuilder strBuffer_tLogRow_14 = null;
					int nb_line_tLogRow_14 = 0;
					// /////////////////////

					/**
					 * [tLogRow_14 begin ] stop
					 */

					/**
					 * [tFlowToIterate_5 begin ] start
					 */

					int NB_ITERATE_tSparqlSelectRequest_1 = 0; // for statistics

					ok_Hash.put("tFlowToIterate_5", false);
					start_Hash.put("tFlowToIterate_5",
							System.currentTimeMillis());

					currentComponent = "tFlowToIterate_5";

					int tos_count_tFlowToIterate_5 = 0;

					int nb_line_tFlowToIterate_5 = 0;
					int counter_tFlowToIterate_5 = 0;

					/**
					 * [tFlowToIterate_5 begin ] stop
					 */

					/**
					 * [tJavaRow_3 begin ] start
					 */

					ok_Hash.put("tJavaRow_3", false);
					start_Hash.put("tJavaRow_3", System.currentTimeMillis());

					currentComponent = "tJavaRow_3";

					int tos_count_tJavaRow_3 = 0;

					int nb_line_tJavaRow_3 = 0;

					/**
					 * [tJavaRow_3 begin ] stop
					 */

					/**
					 * [tLogRow_9 begin ] start
					 */

					ok_Hash.put("tLogRow_9", false);
					start_Hash.put("tLogRow_9", System.currentTimeMillis());

					currentComponent = "tLogRow_9";

					int tos_count_tLogRow_9 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_9 = " |9| ";
					java.io.PrintStream consoleOut_tLogRow_9 = null;

					StringBuilder strBuffer_tLogRow_9 = null;
					int nb_line_tLogRow_9 = 0;
					// /////////////////////

					/**
					 * [tLogRow_9 begin ] stop
					 */

					/**
					 * [tFlowToIterate_18 begin ] start
					 */

					int NB_ITERATE_tFixedFlowInput_7 = 0; // for statistics

					ok_Hash.put("tFlowToIterate_18", false);
					start_Hash.put("tFlowToIterate_18",
							System.currentTimeMillis());

					currentComponent = "tFlowToIterate_18";

					int tos_count_tFlowToIterate_18 = 0;

					int nb_line_tFlowToIterate_18 = 0;
					int counter_tFlowToIterate_18 = 0;

					/**
					 * [tFlowToIterate_18 begin ] stop
					 */

					/**
					 * [tFlowToIterate_29 begin ] start
					 */

					int NB_ITERATE_tRunJob_10 = 0; // for statistics

					ok_Hash.put("tFlowToIterate_29", false);
					start_Hash.put("tFlowToIterate_29",
							System.currentTimeMillis());

					currentComponent = "tFlowToIterate_29";

					int tos_count_tFlowToIterate_29 = 0;

					int nb_line_tFlowToIterate_29 = 0;
					int counter_tFlowToIterate_29 = 0;

					/**
					 * [tFlowToIterate_29 begin ] stop
					 */

					/**
					 * [tJavaRow_18 begin ] start
					 */

					ok_Hash.put("tJavaRow_18", false);
					start_Hash.put("tJavaRow_18", System.currentTimeMillis());

					currentComponent = "tJavaRow_18";

					int tos_count_tJavaRow_18 = 0;

					int nb_line_tJavaRow_18 = 0;

					/**
					 * [tJavaRow_18 begin ] stop
					 */

					/**
					 * [tLogRow_30 begin ] start
					 */

					ok_Hash.put("tLogRow_30", false);
					start_Hash.put("tLogRow_30", System.currentTimeMillis());

					currentComponent = "tLogRow_30";

					int tos_count_tLogRow_30 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_30 = " |30| ";
					java.io.PrintStream consoleOut_tLogRow_30 = null;

					StringBuilder strBuffer_tLogRow_30 = null;
					int nb_line_tLogRow_30 = 0;
					// /////////////////////

					/**
					 * [tLogRow_30 begin ] stop
					 */

					/**
					 * [tFlowToIterate_26 begin ] start
					 */

					int NB_ITERATE_tRunJob_12 = 0; // for statistics

					ok_Hash.put("tFlowToIterate_26", false);
					start_Hash.put("tFlowToIterate_26",
							System.currentTimeMillis());

					currentComponent = "tFlowToIterate_26";

					int tos_count_tFlowToIterate_26 = 0;

					int nb_line_tFlowToIterate_26 = 0;
					int counter_tFlowToIterate_26 = 0;

					/**
					 * [tFlowToIterate_26 begin ] stop
					 */

					/**
					 * [tJavaRow_17 begin ] start
					 */

					ok_Hash.put("tJavaRow_17", false);
					start_Hash.put("tJavaRow_17", System.currentTimeMillis());

					currentComponent = "tJavaRow_17";

					int tos_count_tJavaRow_17 = 0;

					int nb_line_tJavaRow_17 = 0;

					/**
					 * [tJavaRow_17 begin ] stop
					 */

					/**
					 * [tLogRow_28 begin ] start
					 */

					ok_Hash.put("tLogRow_28", false);
					start_Hash.put("tLogRow_28", System.currentTimeMillis());

					currentComponent = "tLogRow_28";

					int tos_count_tLogRow_28 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_28 = " |28| ";
					java.io.PrintStream consoleOut_tLogRow_28 = null;

					StringBuilder strBuffer_tLogRow_28 = null;
					int nb_line_tLogRow_28 = 0;
					// /////////////////////

					/**
					 * [tLogRow_28 begin ] stop
					 */

					/**
					 * [tFlowToIterate_25 begin ] start
					 */

					int NB_ITERATE_tRunJob_9 = 0; // for statistics

					ok_Hash.put("tFlowToIterate_25", false);
					start_Hash.put("tFlowToIterate_25",
							System.currentTimeMillis());

					currentComponent = "tFlowToIterate_25";

					int tos_count_tFlowToIterate_25 = 0;

					int nb_line_tFlowToIterate_25 = 0;
					int counter_tFlowToIterate_25 = 0;

					/**
					 * [tFlowToIterate_25 begin ] stop
					 */

					/**
					 * [tJavaRow_16 begin ] start
					 */

					ok_Hash.put("tJavaRow_16", false);
					start_Hash.put("tJavaRow_16", System.currentTimeMillis());

					currentComponent = "tJavaRow_16";

					int tos_count_tJavaRow_16 = 0;

					int nb_line_tJavaRow_16 = 0;

					/**
					 * [tJavaRow_16 begin ] stop
					 */

					/**
					 * [tLogRow_31 begin ] start
					 */

					ok_Hash.put("tLogRow_31", false);
					start_Hash.put("tLogRow_31", System.currentTimeMillis());

					currentComponent = "tLogRow_31";

					int tos_count_tLogRow_31 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_31 = " |31| ";
					java.io.PrintStream consoleOut_tLogRow_31 = null;

					StringBuilder strBuffer_tLogRow_31 = null;
					int nb_line_tLogRow_31 = 0;
					// /////////////////////

					/**
					 * [tLogRow_31 begin ] stop
					 */

					/**
					 * [tFlowToIterate_7 begin ] start
					 */

					int NB_ITERATE_tSparqlSelectRequest_2 = 0; // for statistics

					ok_Hash.put("tFlowToIterate_7", false);
					start_Hash.put("tFlowToIterate_7",
							System.currentTimeMillis());

					currentComponent = "tFlowToIterate_7";

					int tos_count_tFlowToIterate_7 = 0;

					int nb_line_tFlowToIterate_7 = 0;
					int counter_tFlowToIterate_7 = 0;

					/**
					 * [tFlowToIterate_7 begin ] stop
					 */

					/**
					 * [tJavaRow_7 begin ] start
					 */

					ok_Hash.put("tJavaRow_7", false);
					start_Hash.put("tJavaRow_7", System.currentTimeMillis());

					currentComponent = "tJavaRow_7";

					int tos_count_tJavaRow_7 = 0;

					int nb_line_tJavaRow_7 = 0;

					/**
					 * [tJavaRow_7 begin ] stop
					 */

					/**
					 * [tLogRow_5 begin ] start
					 */

					ok_Hash.put("tLogRow_5", false);
					start_Hash.put("tLogRow_5", System.currentTimeMillis());

					currentComponent = "tLogRow_5";

					int tos_count_tLogRow_5 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_5 = " |5| ";
					java.io.PrintStream consoleOut_tLogRow_5 = null;

					StringBuilder strBuffer_tLogRow_5 = null;
					int nb_line_tLogRow_5 = 0;
					// /////////////////////

					/**
					 * [tLogRow_5 begin ] stop
					 */

					/**
					 * [tFlowToIterate_1 begin ] start
					 */

					int NB_ITERATE_tRunJob_1 = 0; // for statistics

					ok_Hash.put("tFlowToIterate_1", false);
					start_Hash.put("tFlowToIterate_1",
							System.currentTimeMillis());

					currentComponent = "tFlowToIterate_1";

					int tos_count_tFlowToIterate_1 = 0;

					int nb_line_tFlowToIterate_1 = 0;
					int counter_tFlowToIterate_1 = 0;

					/**
					 * [tFlowToIterate_1 begin ] stop
					 */

					/**
					 * [tJavaRow_1 begin ] start
					 */

					ok_Hash.put("tJavaRow_1", false);
					start_Hash.put("tJavaRow_1", System.currentTimeMillis());

					currentComponent = "tJavaRow_1";

					int tos_count_tJavaRow_1 = 0;

					int nb_line_tJavaRow_1 = 0;

					/**
					 * [tJavaRow_1 begin ] stop
					 */

					/**
					 * [tLogRow_1 begin ] start
					 */

					ok_Hash.put("tLogRow_1", false);
					start_Hash.put("tLogRow_1", System.currentTimeMillis());

					currentComponent = "tLogRow_1";

					int tos_count_tLogRow_1 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = " |1| ";
					java.io.PrintStream consoleOut_tLogRow_1 = null;

					StringBuilder strBuffer_tLogRow_1 = null;
					int nb_line_tLogRow_1 = 0;
					// /////////////////////

					/**
					 * [tLogRow_1 begin ] stop
					 */

					/**
					 * [tFlowToIterate_2 begin ] start
					 */

					int NB_ITERATE_tRunJob_2 = 0; // for statistics

					ok_Hash.put("tFlowToIterate_2", false);
					start_Hash.put("tFlowToIterate_2",
							System.currentTimeMillis());

					currentComponent = "tFlowToIterate_2";

					int tos_count_tFlowToIterate_2 = 0;

					int nb_line_tFlowToIterate_2 = 0;
					int counter_tFlowToIterate_2 = 0;

					/**
					 * [tFlowToIterate_2 begin ] stop
					 */

					/**
					 * [tJavaRow_2 begin ] start
					 */

					ok_Hash.put("tJavaRow_2", false);
					start_Hash.put("tJavaRow_2", System.currentTimeMillis());

					currentComponent = "tJavaRow_2";

					int tos_count_tJavaRow_2 = 0;

					int nb_line_tJavaRow_2 = 0;

					/**
					 * [tJavaRow_2 begin ] stop
					 */

					/**
					 * [tLogRow_3 begin ] start
					 */

					ok_Hash.put("tLogRow_3", false);
					start_Hash.put("tLogRow_3", System.currentTimeMillis());

					currentComponent = "tLogRow_3";

					int tos_count_tLogRow_3 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = " |3| ";
					java.io.PrintStream consoleOut_tLogRow_3 = null;

					StringBuilder strBuffer_tLogRow_3 = null;
					int nb_line_tLogRow_3 = 0;
					// /////////////////////

					/**
					 * [tLogRow_3 begin ] stop
					 */

					/**
					 * [tRESTResponse_7 begin ] start
					 */

					ok_Hash.put("tRESTResponse_7", false);
					start_Hash.put("tRESTResponse_7",
							System.currentTimeMillis());

					currentComponent = "tRESTResponse_7";

					int tos_count_tRESTResponse_7 = 0;

					/**
					 * [tRESTResponse_7 begin ] stop
					 */

					/**
					 * [tJavaRow_10 begin ] start
					 */

					ok_Hash.put("tJavaRow_10", false);
					start_Hash.put("tJavaRow_10", System.currentTimeMillis());

					currentComponent = "tJavaRow_10";

					int tos_count_tJavaRow_10 = 0;

					int nb_line_tJavaRow_10 = 0;

					/**
					 * [tJavaRow_10 begin ] stop
					 */

					/**
					 * [tHttpRequest_1 begin ] start
					 */

					ok_Hash.put("tHttpRequest_1", false);
					start_Hash
							.put("tHttpRequest_1", System.currentTimeMillis());

					currentComponent = "tHttpRequest_1";

					int tos_count_tHttpRequest_1 = 0;

					/**
					 * [tHttpRequest_1 begin ] stop
					 */

					/**
					 * [tJavaRow_9 begin ] start
					 */

					ok_Hash.put("tJavaRow_9", false);
					start_Hash.put("tJavaRow_9", System.currentTimeMillis());

					currentComponent = "tJavaRow_9";

					int tos_count_tJavaRow_9 = 0;

					int nb_line_tJavaRow_9 = 0;

					/**
					 * [tJavaRow_9 begin ] stop
					 */

					/**
					 * [tLogRow_4 begin ] start
					 */

					ok_Hash.put("tLogRow_4", false);
					start_Hash.put("tLogRow_4", System.currentTimeMillis());

					currentComponent = "tLogRow_4";

					int tos_count_tLogRow_4 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = " |2| ";
					java.io.PrintStream consoleOut_tLogRow_4 = null;

					StringBuilder strBuffer_tLogRow_4 = null;
					int nb_line_tLogRow_4 = 0;
					// /////////////////////

					/**
					 * [tLogRow_4 begin ] stop
					 */

					/**
					 * [tRESTRequest_1_In begin ] start
					 */

					ok_Hash.put("tRESTRequest_1_In", false);
					start_Hash.put("tRESTRequest_1_In",
							System.currentTimeMillis());

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					int tos_count_tRESTRequest_1_In = 0;

					/**
					 * [tRESTRequest_1_In begin ] stop
					 */
					/**
					 * [tRESTRequest_1_In main ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					if (requestMessage_tRESTRequest_1.containsKey("ERROR")) { // wrong
																				// request
																				// received
						queryall = null;
						method_searchns = null;
						method_linksns = null;
						test_namespace = null;
						method_query = null;
						method_uri = null;
						method_nsid = null;
						datasets = null;
						test = null;
						page = null;
						nsid_format = null;
						nsid = null;
						index = null;
						String wrongCallUri_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1
								.get("URI");
						String wrongCallMethod_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1
								.get("VERB");
						String wrongCallError_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1
								.get("ERROR");
						int wrongCallStatus_tRESTRequest_1 = (Integer) requestMessage_tRESTRequest_1
								.get("STATUS");

						row39 = new row39Struct();
						row39.uri = wrongCallUri_tRESTRequest_1;
						row39.method = wrongCallMethod_tRESTRequest_1;
						row39.error = wrongCallError_tRESTRequest_1;
						row39.status = wrongCallStatus_tRESTRequest_1;
					} else { // non-error (not wrong request)

						String matchedUriPattern_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1
								.get("PATTERN");
						String matchedFlow_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1
								.get("OPERATION");

						java.util.Map<String, Object> params_tRESTRequest_1 = (java.util.Map<String, Object>) requestMessage_tRESTRequest_1
								.get("PARAMS");
						if (matchedFlow_tRESTRequest_1.equals("queryall")) {
							queryall = new queryallStruct();
							if (params_tRESTRequest_1
									.containsKey("PATH:ns:id_String")) {

								queryall.ns = (String) params_tRESTRequest_1
										.get("PATH:ns:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:id:id_String")) {

								queryall.id = (String) params_tRESTRequest_1
										.get("PATH:id:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("HEADER:Accept:id_String")) {

								queryall.Accept = (String) params_tRESTRequest_1
										.get("HEADER:Accept:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:request:id_String")) {

								queryall.request = (String) params_tRESTRequest_1
										.get("PATH:request:id_String");

							}
						} else { // non matched flow
							queryall = null;
						}

						if (matchedFlow_tRESTRequest_1
								.equals("method_searchns")) {
							method_searchns = new method_searchnsStruct();
							if (params_tRESTRequest_1
									.containsKey("PATH:format:id_String")) {

								method_searchns.format = (String) params_tRESTRequest_1
										.get("PATH:format:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:namespace:id_String")) {

								method_searchns.namespace = (String) params_tRESTRequest_1
										.get("PATH:namespace:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:query:id_String")) {

								method_searchns.query = (String) params_tRESTRequest_1
										.get("PATH:query:id_String");

							}
						} else { // non matched flow
							method_searchns = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("method_linksns")) {
							method_linksns = new method_linksnsStruct();
							if (params_tRESTRequest_1
									.containsKey("PATH:format:id_String")) {

								method_linksns.format = (String) params_tRESTRequest_1
										.get("PATH:format:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:namespace:id_String")) {

								method_linksns.namespace = (String) params_tRESTRequest_1
										.get("PATH:namespace:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:ns:id_String")) {

								method_linksns.ns = (String) params_tRESTRequest_1
										.get("PATH:ns:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:id:id_String")) {

								method_linksns.id = (String) params_tRESTRequest_1
										.get("PATH:id:id_String");

							}
						} else { // non matched flow
							method_linksns = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("test_namespace")) {
							test_namespace = new test_namespaceStruct();
							if (params_tRESTRequest_1
									.containsKey("PATH:namespace:id_String")) {

								test_namespace.namespace = (String) params_tRESTRequest_1
										.get("PATH:namespace:id_String");

							}
						} else { // non matched flow
							test_namespace = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("method_query")) {
							method_query = new method_queryStruct();
							if (params_tRESTRequest_1
									.containsKey("PATH:namespace:id_String")) {

								method_query.namespace = (String) params_tRESTRequest_1
										.get("PATH:namespace:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:method:id_String")) {

								method_query.method = (String) params_tRESTRequest_1
										.get("PATH:method:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:format:id_String")) {

								method_query.format = (String) params_tRESTRequest_1
										.get("PATH:format:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:query:id_String")) {

								method_query.query = (String) params_tRESTRequest_1
										.get("PATH:query:id_String");

							}
						} else { // non matched flow
							method_query = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("method_uri")) {
							method_uri = new method_uriStruct();
							if (params_tRESTRequest_1
									.containsKey("QUERY:uri:id_String")) {

								method_uri.uri = (String) params_tRESTRequest_1
										.get("QUERY:uri:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:namespace:id_String")) {

								method_uri.namespace = (String) params_tRESTRequest_1
										.get("PATH:namespace:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:method:id_String")) {

								method_uri.method = (String) params_tRESTRequest_1
										.get("PATH:method:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:format:id_String")) {

								method_uri.format = (String) params_tRESTRequest_1
										.get("PATH:format:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("QUERY:query:id_String")) {

								method_uri.query = (String) params_tRESTRequest_1
										.get("QUERY:query:id_String");

							}
						} else { // non matched flow
							method_uri = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("method_nsid")) {
							method_nsid = new method_nsidStruct();
							if (params_tRESTRequest_1
									.containsKey("PATH:method:id_String")) {

								method_nsid.method = (String) params_tRESTRequest_1
										.get("PATH:method:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:format:id_String")) {

								method_nsid.format = (String) params_tRESTRequest_1
										.get("PATH:format:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:ns:id_String")) {

								method_nsid.ns = (String) params_tRESTRequest_1
										.get("PATH:ns:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:id:id_String")) {

								method_nsid.id = (String) params_tRESTRequest_1
										.get("PATH:id:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:namespace:id_String")) {

								method_nsid.namespace = (String) params_tRESTRequest_1
										.get("PATH:namespace:id_String");

							}
						} else { // non matched flow
							method_nsid = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("datasets")) {
							datasets = new datasetsStruct();
						} else { // non matched flow
							datasets = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("test")) {
							test = new testStruct();
							if (params_tRESTRequest_1
									.containsKey("PATH:request:id_String")) {

								test.request = (String) params_tRESTRequest_1
										.get("PATH:request:id_String");

							}
						} else { // non matched flow
							test = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("page")) {
							page = new pageStruct();
							if (params_tRESTRequest_1
									.containsKey("PATH:ns:id_String")) {

								page.ns = (String) params_tRESTRequest_1
										.get("PATH:ns:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:id:id_String")) {

								page.id = (String) params_tRESTRequest_1
										.get("PATH:id:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:request:id_String")) {

								page.request = (String) params_tRESTRequest_1
										.get("PATH:request:id_String");

							}
						} else { // non matched flow
							page = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("nsid_format")) {
							nsid_format = new nsid_formatStruct();
							if (params_tRESTRequest_1
									.containsKey("PATH:ns:id_String")) {

								nsid_format.ns = (String) params_tRESTRequest_1
										.get("PATH:ns:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:id:id_String")) {

								nsid_format.id = (String) params_tRESTRequest_1
										.get("PATH:id:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:format:id_String")) {

								nsid_format.format = (String) params_tRESTRequest_1
										.get("PATH:format:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:request:id_String")) {

								nsid_format.request = (String) params_tRESTRequest_1
										.get("PATH:request:id_String");

							}
						} else { // non matched flow
							nsid_format = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("nsid")) {
							nsid = new nsidStruct();
							if (params_tRESTRequest_1
									.containsKey("PATH:ns:id_String")) {

								nsid.ns = (String) params_tRESTRequest_1
										.get("PATH:ns:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:id:id_String")) {

								nsid.id = (String) params_tRESTRequest_1
										.get("PATH:id:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("HEADER:Accept:id_String")) {

								nsid.Accept = (String) params_tRESTRequest_1
										.get("HEADER:Accept:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:request:id_String")) {

								nsid.request = (String) params_tRESTRequest_1
										.get("PATH:request:id_String");

							}
						} else { // non matched flow
							nsid = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("index")) {
							index = new indexStruct();
						} else { // non matched flow
							index = null;
						}

						row39 = null;
					}

					globalMap.put("tRESTRequest_1_URI",
							(String) requestMessage_tRESTRequest_1.get("URI"));
					globalMap.put("tRESTRequest_1_URI_BASE",
							(String) requestMessage_tRESTRequest_1
									.get("URI_BASE"));
					globalMap.put("tRESTRequest_1_URI_ABSOLUTE",
							(String) requestMessage_tRESTRequest_1
									.get("URI_ABSOLUTE"));
					globalMap.put("tRESTRequest_1_HTTP_METHOD",
							(String) requestMessage_tRESTRequest_1.get("VERB"));

					globalMap.put("tRESTRequest_1_ATTACHMENT_HEADERS",
							requestMessage_tRESTRequest_1
									.get("ATTACHMENT_HEADERS"));
					globalMap.put("tRESTRequest_1_ATTACHMENT_FILENAMES",
							requestMessage_tRESTRequest_1
									.get("ATTACHMENT_FILENAMES"));

					globalMap.put("tRESTRequest_1_PRINCIPAL_NAME",
							(String) requestMessage_tRESTRequest_1
									.get("PRINCIPAL_NAME"));
					globalMap.put("tRESTRequest_1_CORRELATION_ID",
							(String) requestMessage_tRESTRequest_1
									.get("CorrelationID"));

					tos_count_tRESTRequest_1_In++;

					/**
					 * [tRESTRequest_1_In main ] stop
					 */
					// Start of branch "index"
					if (index != null) {

						/**
						 * [tFlowToIterate_3 main ] start
						 */

						currentComponent = "tFlowToIterate_3";

						counter_tFlowToIterate_3++;
						globalMap.put("tFlowToIterate_3_CURRENT_ITERATION",
								counter_tFlowToIterate_3);

						tos_count_tFlowToIterate_3++;

						/**
						 * [tFlowToIterate_3 main ] stop
						 */
						NB_ITERATE_tFixedFlowInput_1++;
						iterateLoop++;

						/**
						 * [tRESTResponse_6 begin ] start
						 */

						ok_Hash.put("tRESTResponse_6", false);
						start_Hash.put("tRESTResponse_6",
								System.currentTimeMillis());

						currentComponent = "tRESTResponse_6";

						int tos_count_tRESTResponse_6 = 0;

						/**
						 * [tRESTResponse_6 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_1 begin ] start
						 */

						ok_Hash.put("tFixedFlowInput_1", false);
						start_Hash.put("tFixedFlowInput_1",
								System.currentTimeMillis());

						currentComponent = "tFixedFlowInput_1";

						int tos_count_tFixedFlowInput_1 = 0;

						StringBuilder result_tFixedFlowInput_1 = new StringBuilder();
						result_tFixedFlowInput_1
								.append("PCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBYSFRNTCtSREZhIDEuMC8vRU4iICJo");
						result_tFixedFlowInput_1
								.append("dHRwOi8vd3d3LnczLm9yZy9NYXJrVXAvRFREL3hodG1sLXJkZmEtMS5kdGQiPgo8aHRtbCB2ZXJz");
						result_tFixedFlowInput_1
								.append("aW9uPSJYSFRNTCtSREZhIDEuMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwi");
						result_tFixedFlowInput_1
								.append("Pgo8aGVhZD4KCTx0aXRsZT5CaW8yUkRGPC90aXRsZT4KCTxsaW5rIGhyZWY9Imh0dHA6Ly9tLmJp");
						result_tFixedFlowInput_1
								.append("bzJyZGYub3JnL2ltYWdlL2JpbzJyZGYucG5nIiByZWw9InNob3J0Y3V0IGljb24iIC8+CjwvaGVh");
						result_tFixedFlowInput_1
								.append("ZD4KPCEtLSBQaXdpayAtLT4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogIHZhciBf");
						result_tFixedFlowInput_1
								.append("cGFxID0gX3BhcSB8fCBbXTsKICBfcGFxLnB1c2goWyJzZXREb2N1bWVudFRpdGxlIiwgZG9jdW1l");
						result_tFixedFlowInput_1
								.append("bnQuZG9tYWluICsgIi8iICsgZG9jdW1lbnQudGl0bGVdKTsKICBfcGFxLnB1c2goWyJzZXRDb29r");
						result_tFixedFlowInput_1
								.append("aWVEb21haW4iLCAiKi5iaW8ycmRmLm9yZyJdKTsKICBfcGFxLnB1c2goWyJzZXREb21haW5zIiwg");
						result_tFixedFlowInput_1
								.append("WyIqLmJpbzJyZGYub3JnIl1dKTsKICBfcGFxLnB1c2goWyd0cmFja1BhZ2VWaWV3J10pOwogIF9w");
						result_tFixedFlowInput_1
								.append("YXEucHVzaChbJ2VuYWJsZUxpbmtUcmFja2luZyddKTsKICAoZnVuY3Rpb24oKSB7CiAgICB2YXIg");
						result_tFixedFlowInput_1
								.append("dT0oKCJodHRwczoiID09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sKSA/ICJodHRwcyIgOiAi");
						result_tFixedFlowInput_1
								.append("aHR0cCIpCisgIjovL2xzMjIuZ2Vub21lLnVsYXZhbC5jYToxMDAwMS8iOwogICAgX3BhcS5wdXNo");
						result_tFixedFlowInput_1
								.append("KFsnc2V0VHJhY2tlclVybCcsIHUrJ3Bpd2lrLnBocCddKTsKICAgIF9wYXEucHVzaChbJ3NldFNp");
						result_tFixedFlowInput_1
								.append("dGVJZCcsIDFdKTsKICAgIHZhciBkPWRvY3VtZW50LCBnPWQuY3JlYXRlRWxlbWVudCgnc2NyaXB0");
						result_tFixedFlowInput_1
								.append("JyksCnM9ZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07IGcudHlwZT0ndGV4dC9q");
						result_tFixedFlowInput_1
								.append("YXZhc2NyaXB0JzsKICAgIGcuZGVmZXI9dHJ1ZTsgZy5hc3luYz10cnVlOyBnLnNyYz11KydwaXdp");
						result_tFixedFlowInput_1
								.append("ay5qcyc7CnMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZyxzKTsKICB9KSgpOwo8L3NjcmlwdD4K");
						result_tFixedFlowInput_1
								.append("PG5vc2NyaXB0PjxwPjxpbWcKc3JjPSJodHRwOi8vbHMyMi5nZW5vbWUudWxhdmFsLmNhOjEwMDAx");
						result_tFixedFlowInput_1
								.append("L3Bpd2lrLnBocD9pZHNpdGU9MSIKc3R5bGU9ImJvcmRlcjowOyIgYWx0PSIiIC8+PC9wPjwvbm9z");
						result_tFixedFlowInput_1
								.append("Y3JpcHQ+CjwhLS0gRW5kIFBpd2lrIENvZGUgLS0+Cjxib2R5Pgo8YnIvPjxici8+CjxkaXYgaWQ9");
						result_tFixedFlowInput_1
								.append("ImFsbCI+CiA8ZGl2IGlkPSJtYWluIiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyI+CiA8ZGl2");
						result_tFixedFlowInput_1
								.append("IHN0eWxlPSJoZWlnaHQ6IDIwJTsiPiZuYnNwOzwvZGl2PgogPGltZyBhbHQ9IkJpbzJSREYiIHNy");
						result_tFixedFlowInput_1
								.append("Yz0iaHR0cDovL20uYmlvMnJkZi5vcmcvaW1hZ2UvYmlvMnJkZi5wbmciIC8+CiA8ZGl2IGlkPSJt");
						result_tFixedFlowInput_1
								.append("YWluIiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyI+CiA8ZW0+TGlua2VkIERhdGEgZm9yIHRo");
						result_tFixedFlowInput_1
								.append("ZSBMaWZlIFNjaWVuY2VzPC9lbT4KPC9kaXY+Cjxici8+PGJyLz4KPGZvcm0gYWN0aW9uPSIvbm9z");
						result_tFixedFlowInput_1
								.append("Y3JpcHQvIiBtZXRob2Q9IkdFVCIgbmFtZT0iZm9ybTEiIG9uc3VibWl0PSJkb2N1bWVudC5sb2Nh");
						result_tFixedFlowInput_1
								.append("dGlvbj0nL3BhZ2UvJytmb3JtMS5pZC52YWx1ZSsnJztyZXR1cm4gZmFsc2U7Ij48c2VsZWN0IG5h");
						result_tFixedFlowInput_1
								.append("bWU9InNlbGVjdHZhbHVlIiBvbmNoYW5nZT0iZm9ybTEuaWQudmFsdWUgPSB0aGlzLm9wdGlvbnNb");
						result_tFixedFlowInput_1
								.append("dGhpcy5zZWxlY3RlZEluZGV4XS52YWx1ZTsiIHNpemU9IjEiPjxvcHRpb24gc2VsZWN0ZWQ9InNl");
						result_tFixedFlowInput_1
								.append("bGVjdGVkIiB2YWx1MTFlPSIiPlNlbGVjdCBhbiBJRCBleGFtcGxlPC9vcHRpb24+CjxvcHRpb24g");
						result_tFixedFlowInput_1
								.append("dmFsdWU9ImFmZnltZXRyaXg6MTQxNTc2NV9hdCI+QWZmeW1ldHJpeCBvbiBHZW5lQ2hpcCBIVCBN");
						result_tFixedFlowInput_1
								.append("b3VzZSBHZW5vbWUgTUctNDMwQiBbYWZmeW1ldHJpeDoxNDE1NzY1X2F0XTwvb3B0aW9uPgo8b3B0");
						result_tFixedFlowInput_1
								.append("aW9uIHZhbHVlPSJjbGluaWNhbHRyaWFsczpOQ1QwMDA1MDg5NSI+Q29tcGFyaW5nIFRocmVlIEFu");
						result_tFixedFlowInput_1
								.append("dGktSElWIERydWcgUmVnaW1lbnMgW2NsaW5pY2FsdHJpYWxzOk5DVDAwMDUwODk1XTwvb3B0aW9u");
						result_tFixedFlowInput_1
								.append("Pgo8b3B0aW9uIHZhbHVlPSJjdGRfcmVzb3VyY2U6RDAwMTE1MTQwNjk0OSI+QXJzZW5pYy1NSVIx");
						result_tFixedFlowInput_1
								.append("NUIgY2hlbWljYWwtZ2VuZSBhc3NvY2lhdGlvbiBbY3RkX3Jlc291cmNlOkQwMDExNTE0MDY5NDld");
						result_tFixedFlowInput_1
								.append("PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImRic25wOnJzMTk5NDIyMTg0Ij5BU1BOIGZyYW1lc2hp");
						result_tFixedFlowInput_1
								.append("ZnQgdmFyaWFudCBbZGJzbnA6cnMxOTk0MjIxODRdPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9ImRy");
						result_tFixedFlowInput_1
								.append("dWdiYW5rOkRCMDAxNDMiPlZpb3h4IFtkcnVnYmFuazpEQjAwNTMzIF08L29wdGlvbj4KPG9wdGlv");
						result_tFixedFlowInput_1
								.append("biB2YWx1ZT0iZ2VuZHJfcmVzb3VyY2U6OWNkNDg4ZjliNzZjYWFlZDQ2MTBlZDIxZTQzYmRhZjgi");
						result_tFixedFlowInput_1
								.append("PkNEQzI1IGluZHVjZWQgYnkgZGlldGFyeSByZXN0cmljdGlvbiBbZ2VuZHJfcmVzb3VyY2U6OWNk");
						result_tFixedFlowInput_1
								.append("NDg4ZjliNzZjYWFlZDQ2MTBlZDIxZTQzYmRhZjhdPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Imhv");
						result_tFixedFlowInput_1
								.append("bW9sb2dlbmU6ODI2MCI+SG9tb2xvR2VuZSBHcm91cCA4MjYwIFtob21vbG9nZW5lOjgyNjBdPC9v");
						result_tFixedFlowInput_1
								.append("cHRpb24+CjxvcHRpb24gdmFsdWU9ImhnbmM6MjQwODYiPkFQT0JFQzEgY29tcGxlbWVudGF0aW9u");
						result_tFixedFlowInput_1
								.append("IGZhY3RvciBbaGduYzoyNDA4Nl08L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iaXByb2NsYXNzOnVu");
						result_tFixedFlowInput_1
								.append("aXByb3Q6UDY5MzgwIj5GZXJyb3VzLWlyb24gZWZmbHV4IHB1bXAgRmllRiBbaXByb2NsYXNzOnVu");
						result_tFixedFlowInput_1
								.append("aXByb3Q6UDY5MzgwIjwvb3B0aW9uPiAKPG9wdGlvbiB2YWx1ZT0iaW50ZXJwcm86SVBSMDAwMTAw");
						result_tFixedFlowInput_1
								.append("Ij5SaWJvbnVjbGVhc2UgUCAoUk5hc2VfUCkgRmFtaWx5IFtpbnRlcnBybzpJUFIwMDAxMDBdPC9v");
						result_tFixedFlowInput_1
								.append("cHRpb24+IAo8b3B0aW9uIHZhbHVlPSJsc3I6ZGJzbnAiPlRoZSBMU1IgZW50cnkgZm9yIGRiU05Q");
						result_tFixedFlowInput_1
								.append("IFtsc3I6ZGJzbnBdPC9vcHRpb24+IAo8b3B0aW9uIHZhbHVlPSJtZXNoOkQwMTgzNzciPk5ldXJv");
						result_tFixedFlowInput_1
								.append("dHJhbnNtaXR0ZXIgQWdlbnRzIFttZXNoOkQwMTgzNzddPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9");
						result_tFixedFlowInput_1
								.append("Im1naTo5NTQ4NCI+RmFzIFttZ2k6OTU0ODRdPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Im5jYmln");
						result_tFixedFlowInput_1
								.append("ZW5lOjM3MTkxIj5TZXJvdG9uaW4gcmVjZXB0b3IgMUIgKHN5bWJvbDo1LUhUMUIsdGF4b246NzIy");
						result_tFixedFlowInput_1
								.append("NykgW25jYmlnZW5lOjM3MTkxXTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJvbWltOjYwMjA4MCI+");
						result_tFixedFlowInput_1
								.append("UEFHRVQgRElTRUFTRSBPRiBCT05FOyBQREIgW29taW06NjAyMDgwXTwvb3B0aW9uPgo8b3B0aW9u");
						result_tFixedFlowInput_1
								.append("IHZhbHVlPSJwdWJtZWQ6MjM3MzUxOTYiPk9udG9sb2d5LUJhc2VkIFF1ZXJ5aW5nIHdpdGggQmlv");
						result_tFixedFlowInput_1
								.append("MlJERnMgTGlua2VkIE9wZW4gRGF0YS4gW3B1Ym1lZDoyMzczNTE5Nl08L29wdGlvbj4KPG9wdGlv");
						result_tFixedFlowInput_1
								.append("biB2YWx1ZT0icGhhcm1na2I6UEExMjg0MDY5NTYiPmZsdW9yb3VyYWNpbCBbcGhhcm1na2I6UEEx");
						result_tFixedFlowInput_1
								.append("Mjg0MDY5NTZdPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9InNnZDpTMDAwMDA2MTY5Ij5HQUw0IFtz");
						result_tFixedFlowInput_1
								.append("Z2Q6UzAwMDAwNjE2OV08L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0idGF4b25vbXk6OTYwNiI+SG9t");
						result_tFixedFlowInput_1
								.append("byBTYXBpZW5zIFt0YXhvbjo5NjA2XTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSJzaWRlcjoyMDEx");
						result_tFixedFlowInput_1
								.append("MTIyMF9iMzc5YjQxMy01ZDY2LTRhZGItODUyMS0zOTc4ZjEwYmJkMWQiPnZlbmxhZmF4aW5lIFtz");
						result_tFixedFlowInput_1
								.append("aWRlcjoyMDExMTIyMF9iMzc5YjQxMy01ZDY2LTRhZGItODUyMS0zOTc4ZjEwYmJkMWRdPC9vcHRp");
						result_tFixedFlowInput_1
								.append("b24+CjxvcHRpb24gdmFsdWU9Indvcm1iYXNlOldCR2VuZTAwMDAwMDAxIj5XQkdlbmUwMDAwMDAw");
						result_tFixedFlowInput_1
								.append("MSAoYWFwLTEpIFt3b3JtYmFzZTpXQkdlbmUwMDAwMDAwMV08L29wdGlvbj4KPC9zZWxlY3Q+IDxp");
						result_tFixedFlowInput_1
								.append("bnB1dCBtYXhsZW5ndGg9IjE1MCIgbmFtZT0iaWQiIHNpemU9IjMwIiB0eXBlPSJ0ZXh0IiAvPiA8");
						result_tFixedFlowInput_1
								.append("aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iU3VibWl0IiAvPiZuYnNwOzwvZm9ybT4KPC9kaXY+");
						result_tFixedFlowInput_1
								.append("Cjxici8+PGJyLz4KPGRpdiBpZD0iZm9vdGVyIiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyI+");
						result_tFixedFlowInput_1
								.append("Cgk8YSBocmVmPSJodHRwOi8vZ2l0aHViLmNvbS9iaW8ycmRmL2JpbzJyZGYtc2NyaXB0cy93aWtp");
						result_tFixedFlowInput_1
								.append("Ij5hYm91dDwvYT4KCTxhIGhyZWY9Imh0dHA6Ly9kb3dubG9hZC5iaW8ycmRmLm9yZy9yZWxlYXNl");
						result_tFixedFlowInput_1
								.append("LzMvcmVsZWFzZS5odG1sIj5kYXRhc2V0czwvYT4KCTxhIGhyZWY9Ii90ZXN0Ij5BUEk8L2E+Cgk8");
						result_tFixedFlowInput_1
								.append("YSBocmVmPSJodHRwOi8vZ2l0aHViLmNvbS9iaW8ycmRmL2JpbzJyZGYtc2NyaXB0cy93aWtpL1F1");
						result_tFixedFlowInput_1
								.append("ZXJ5LXJlcG9zaXRvcnkiPlNQQVJRTDwvYT4KCTxhIGhyZWY9Imh0dHA6Ly9ncm91cHMuZ29vZ2xl");
						result_tFixedFlowInput_1
								.append("LmNvbS9ncm91cC9iaW8ycmRmIj5tYWlsaW5nIGxpc3Q8L2E+Cgk8YSBocmVmPSJodHRwOi8vdHdp");
						result_tFixedFlowInput_1
								.append("dHRlci5jb20vYmlvMnJkZiI+PGltZyBoZWlnaHQ9IjIwIiBzcmM9Imh0dHA6Ly9tLmJpbzJyZGYu");
						result_tFixedFlowInput_1
								.append("b3JnL2ltYWdlL3R3aXR0ZXIucG5nIiAvPjwvYT4KPGJyPjxicj4KUG93ZXJlZCBieSA8YSBocmVm");
						result_tFixedFlowInput_1
								.append("PSJodHRwOi8vcGhwLm5ldCI+UEhQPC9hPiwgPGEgaHJlZj0iaHR0cDovL3d3dy50YWxlbmQuY29t");
						result_tFixedFlowInput_1
								.append("L3Byb2R1Y3RzL2VzYiI+VGFsZW5kIEVTQjwvYT4sIGFuZCA8YSBocmVmPSJodHRwOi8vdmlydHVv");
						result_tFixedFlowInput_1
								.append("c28ub3Blbmxpbmtzdy5jb20vZGF0YXNwYWNlL2RvYy9kYXYvd2lraS9NYWluLyI+VmlydHVvc28g");
						result_tFixedFlowInput_1
								.append("T3Blbi1Tb3VyY2UgRWRpdGlvbjwvYT4KPGJyPjxicj4KPGEgaHJlZj0iaHR0cDovL2Jpb2luZm9y");
						result_tFixedFlowInput_1
								.append("bWF0aXF1ZS51bGF2YWwuY2EvdGVhbS8iPjxpbWcgYWx0PSJ1bGF2YWwiIGhlaWdodD0iMjUiIHNy");
						result_tFixedFlowInput_1
								.append("Yz0iaHR0cDovL3d3dy51bGF2YWwuY2EvQWwvZmljaGllcnMvVUwuanBnIiAvPjwvYT4KPGEgaHJl");
						result_tFixedFlowInput_1
								.append("Zj0iaHR0cDovL2R1bW9udGllcmxhYi5jb20vIj48aW1nIGFsdD0iY2FybGV0b24iIGhlaWdodD0i");
						result_tFixedFlowInput_1
								.append("MjUiIHNyYz0iaHR0cDovL20uYmlvMnJkZi5vcmcvaW1hZ2UvY2FybGV0b24ucG5nIiAvPjwvYT4K");
						result_tFixedFlowInput_1
								.append("PC9kaXY+CgoKPC9ib2R5Pgo8L2h0bWw+Cg==");
						String originalFileContent_tFixedFlowInput_1 = "";
						try {
							originalFileContent_tFixedFlowInput_1 = new String(
									(new sun.misc.BASE64Decoder()).decodeBuffer(result_tFixedFlowInput_1
											.toString()), utf8Charset);
						} catch (java.lang.Exception e) {
							e.printStackTrace();
						}

						int nb_line_tFixedFlowInput_1 = 0;

						for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 1; i_tFixedFlowInput_1++) {

							java.io.InputStream ins_tFixedFlowInput_1 = new java.io.ByteArrayInputStream(
									originalFileContent_tFixedFlowInput_1
											.getBytes(utf8Charset));
							org.talend.fileprocess.FileInputDelimited fid_tFixedFlowInput_1 = new org.talend.fileprocess.FileInputDelimited(
									ins_tFixedFlowInput_1, utf8Charset, "", "",
									true, 0, 0, -1, -1, false);

							while (fid_tFixedFlowInput_1.nextRecord()) {
								nb_line_tFixedFlowInput_1++;
								row2 = new row2Struct();

								if (0 < fid_tFixedFlowInput_1
										.getColumnsCountOfCurrentRow()) {
									String colContent = fid_tFixedFlowInput_1
											.get(0);
									row2.string = (colContent == null || colContent
											.length() == 0) ? null : colContent;
								} else {

									row2.string = null;

								}

								if (1 < fid_tFixedFlowInput_1
										.getColumnsCountOfCurrentRow()) {
									String colContent = fid_tFixedFlowInput_1
											.get(1);
									row2.body = (colContent == null || colContent
											.trim().length() == 0) ? null
											: ParserUtils
													.parseTo_Document(colContent);
								} else {

									row2.body = null;

								}

								/**
								 * [tFixedFlowInput_1 begin ] stop
								 */
								/**
								 * [tFixedFlowInput_1 main ] start
								 */

								currentComponent = "tFixedFlowInput_1";

								tos_count_tFixedFlowInput_1++;

								/**
								 * [tFixedFlowInput_1 main ] stop
								 */

								/**
								 * [tRESTResponse_6 main ] start
								 */

								currentComponent = "tRESTResponse_6";

								if (globalMap.containsKey("restResponse")) {
									throw new RuntimeException(
											"Rest response already sent.");
								} else if (!globalMap
										.containsKey("restRequest")) {
									throw new RuntimeException(
											"Not received rest request yet.");
								} else {
									Integer restProviderStatusCode_tRESTResponse_6 = 200;

									Object restProviderResponse_tRESTResponse_6 = null;
									restProviderResponse_tRESTResponse_6 = row2.string;
									if (null != row2.body) {
										restProviderResponse_tRESTResponse_6 = row2.body
												.getDocument();
									}

									java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_6 = new java.util.TreeMap<String, String>(
											String.CASE_INSENSITIVE_ORDER);
									restProviderResponseHeaders_tRESTResponse_6
											.put("Content-Type",
													"text/html;charset=UTF-8");

									java.util.Map<String, Object> restResponse_tRESTResponse_6 = new java.util.HashMap<String, Object>();
									restResponse_tRESTResponse_6
											.put("BODY",
													restProviderResponse_tRESTResponse_6);
									restResponse_tRESTResponse_6
											.put("STATUS",
													restProviderStatusCode_tRESTResponse_6);
									restResponse_tRESTResponse_6
											.put("HEADERS",
													restProviderResponseHeaders_tRESTResponse_6);
									restResponse_tRESTResponse_6.put(
											"drop.json.root.element",
											Boolean.valueOf(false));
									globalMap.put("restResponse",
											restResponse_tRESTResponse_6);

								}

								tos_count_tRESTResponse_6++;

								/**
								 * [tRESTResponse_6 main ] stop
								 */

								/**
								 * [tFixedFlowInput_1 end ] start
								 */

								currentComponent = "tFixedFlowInput_1";

							}
							fid_tFixedFlowInput_1.close();
						}

						globalMap.put("tFixedFlowInput_1_NB_LINE",
								nb_line_tFixedFlowInput_1);

						ok_Hash.put("tFixedFlowInput_1", true);
						end_Hash.put("tFixedFlowInput_1",
								System.currentTimeMillis());

						/**
						 * [tFixedFlowInput_1 end ] stop
						 */

						/**
						 * [tRESTResponse_6 end ] start
						 */

						currentComponent = "tRESTResponse_6";

						ok_Hash.put("tRESTResponse_6", true);
						end_Hash.put("tRESTResponse_6",
								System.currentTimeMillis());

						/**
						 * [tRESTResponse_6 end ] stop
						 */

					} // End of branch "index"

					// Start of branch "nsid"
					if (nsid != null) {

						/**
						 * [tLogRow_2 main ] start
						 */

						currentComponent = "tLogRow_2";

						// /////////////////////

						strBuffer_tLogRow_2 = new StringBuilder();

						if (nsid.ns != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(nsid.ns));

						} //

						strBuffer_tLogRow_2.append(" |2| ");

						if (nsid.id != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(nsid.id));

						} //

						strBuffer_tLogRow_2.append(" |2| ");

						if (nsid.Accept != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(nsid.Accept));

						} //

						strBuffer_tLogRow_2.append(" |2| ");

						if (nsid.request != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(nsid.request));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_2 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_2);
						}

						consoleOut_tLogRow_2.println(strBuffer_tLogRow_2
								.toString());
						consoleOut_tLogRow_2.flush();
						nb_line_tLogRow_2++;
						// ////

						// ////

						// /////////////////////

						row5 = nsid;

						tos_count_tLogRow_2++;

						/**
						 * [tLogRow_2 main ] stop
						 */

						/**
						 * [tJavaRow_5 main ] start
						 */

						currentComponent = "tJavaRow_5";

						// Code généré selon le schémas d'entrée et de sortie
						row12.request = "describe";
						row12.ns = row5.ns;
						row12.id = row5.id;
						context.ns = row5.ns;
						context.id = row5.id;

						row12.Accept = BioUtil
								.parseContentNegotiation(row5.Accept);
						context.format = row12.Accept;
						// System.out.println(row12.Accept);

						// EN ATTENDANT DE FAIRE UN RENDER HTML CORRECT
						if (context.format.equals("text/html")) {
							context.format = "text/plain";
							row12.Accept = "text/plain";
						}
						nb_line_tJavaRow_5++;

						tos_count_tJavaRow_5++;

						/**
						 * [tJavaRow_5 main ] stop
						 */

						/**
						 * [tFlowToIterate_6 main ] start
						 */

						currentComponent = "tFlowToIterate_6";

						globalMap.put("row12.request", row12.request);
						nb_line_tFlowToIterate_6++;
						globalMap.put("row12.ns", row12.ns);
						nb_line_tFlowToIterate_6++;
						globalMap.put("row12.id", row12.id);
						nb_line_tFlowToIterate_6++;
						globalMap.put("row12.Accept", row12.Accept);
						nb_line_tFlowToIterate_6++;

						counter_tFlowToIterate_6++;
						globalMap.put("tFlowToIterate_6_CURRENT_ITERATION",
								counter_tFlowToIterate_6);

						tos_count_tFlowToIterate_6++;

						/**
						 * [tFlowToIterate_6 main ] stop
						 */
						NB_ITERATE_tRunJob_5++;
						iterateLoop++;

						/**
						 * [tRESTResponse_9 begin ] start
						 */

						ok_Hash.put("tRESTResponse_9", false);
						start_Hash.put("tRESTResponse_9",
								System.currentTimeMillis());

						currentComponent = "tRESTResponse_9";

						int tos_count_tRESTResponse_9 = 0;

						/**
						 * [tRESTResponse_9 begin ] stop
						 */

						/**
						 * [tJavaRow_13 begin ] start
						 */

						ok_Hash.put("tJavaRow_13", false);
						start_Hash.put("tJavaRow_13",
								System.currentTimeMillis());

						currentComponent = "tJavaRow_13";

						int tos_count_tJavaRow_13 = 0;

						int nb_line_tJavaRow_13 = 0;

						/**
						 * [tJavaRow_13 begin ] stop
						 */

						/**
						 * [tRunJob_5 begin ] start
						 */

						ok_Hash.put("tRunJob_5", false);
						start_Hash.put("tRunJob_5", System.currentTimeMillis());

						currentComponent = "tRunJob_5";

						int tos_count_tRunJob_5 = 0;

						/**
						 * [tRunJob_5 begin ] stop
						 */
						/**
						 * [tRunJob_5 main ] start
						 */

						currentComponent = "tRunJob_5";

						java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();

						paraList_tRunJob_5.add("--father_pid=" + pid);

						paraList_tRunJob_5.add("--root_pid=" + rootPid);

						paraList_tRunJob_5.add("--father_node=tRunJob_5");

						paraList_tRunJob_5.add("--context=Default");

						// for feature:10589

						paraList_tRunJob_5.add("--stat_port=" + portStats);

						if (resuming_logs_dir_path != null) {
							paraList_tRunJob_5.add("--resuming_logs_dir_path="
									+ resuming_logs_dir_path);
						}
						String childResumePath_tRunJob_5 = ResumeUtil
								.getChildJobCheckPointPath(resuming_checkpoint_path);
						String tRunJobName_tRunJob_5 = ResumeUtil
								.getRighttRunJob(resuming_checkpoint_path);
						if ("tRunJob_5".equals(tRunJobName_tRunJob_5)
								&& childResumePath_tRunJob_5 != null) {
							paraList_tRunJob_5
									.add("--resuming_checkpoint_path="
											+ ResumeUtil
													.getChildJobCheckPointPath(resuming_checkpoint_path));
						}
						paraList_tRunJob_5.add("--parent_part_launcher=JOB:"
								+ jobName + "/NODE:tRunJob_5");

						java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

						Object obj_tRunJob_5 = null;

						obj_tRunJob_5 = nsid.ns;
						paraList_tRunJob_5.add("--context_param ns="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_5));
						parentContextMap_tRunJob_5.put("ns", obj_tRunJob_5);

						obj_tRunJob_5 = nsid.id;
						paraList_tRunJob_5.add("--context_param id="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_5));
						parentContextMap_tRunJob_5.put("id", obj_tRunJob_5);

						obj_tRunJob_5 = context.format;
						paraList_tRunJob_5.add("--context_param format="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_5));
						parentContextMap_tRunJob_5.put("format", obj_tRunJob_5);

						bio2rdf.bio2rdf_describeall_loop_0_1.Bio2RDF_DescribeAll_loop childJob_tRunJob_5 = new bio2rdf.bio2rdf_describeall_loop_0_1.Bio2RDF_DescribeAll_loop();
						// pass DataSources
						java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						if (null != talendDataSources_tRunJob_5) {
							java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_5 = new java.util.HashMap<String, javax.sql.DataSource>();
							for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_5 : talendDataSources_tRunJob_5
									.entrySet()) {
								dataSources_tRunJob_5.put(
										talendDataSourceEntry_tRunJob_5
												.getKey(),
										talendDataSourceEntry_tRunJob_5
												.getValue().getRawDataSource());
							}
							childJob_tRunJob_5
									.setDataSources(dataSources_tRunJob_5);
						}

						childJob_tRunJob_5.parentContextMap = parentContextMap_tRunJob_5;

						String[][] childReturn_tRunJob_5 = childJob_tRunJob_5
								.runJob((String[]) paraList_tRunJob_5
										.toArray(new String[paraList_tRunJob_5
												.size()]));

						errorCode = childJob_tRunJob_5.getErrorCode();

						if (childJob_tRunJob_5.getErrorCode() == null) {
							globalMap.put(
									"tRunJob_5_CHILD_RETURN_CODE",
									childJob_tRunJob_5.getStatus() != null
											&& ("failure")
													.equals(childJob_tRunJob_5
															.getStatus()) ? 1
											: 0);
						} else {
							globalMap.put("tRunJob_5_CHILD_RETURN_CODE",
									childJob_tRunJob_5.getErrorCode());
						}
						if (childJob_tRunJob_5.getExceptionStackTrace() != null) {
							globalMap
									.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE",
											childJob_tRunJob_5
													.getExceptionStackTrace());
						}

						if (childJob_tRunJob_5.getErrorCode() != null
								|| ("failure").equals(childJob_tRunJob_5
										.getStatus())) {

							throw new RuntimeException(
									"Child job running failed");
						}

						for (String[] item_tRunJob_5 : childReturn_tRunJob_5) {
							if (childJob_tRunJob_5.hastBufferOutputComponent() || true) {

								if (0 < item_tRunJob_5.length) {

									row51.rdf = item_tRunJob_5[0];

								} else {
									row51.rdf = null;
								}

							}

							tos_count_tRunJob_5++;

							/**
							 * [tRunJob_5 main ] stop
							 */

							/**
							 * [tJavaRow_13 main ] start
							 */

							currentComponent = "tJavaRow_13";

							row50.string = row51.rdf;

							nb_line_tJavaRow_13++;

							tos_count_tJavaRow_13++;

							/**
							 * [tJavaRow_13 main ] stop
							 */

							/**
							 * [tRESTResponse_9 main ] start
							 */

							currentComponent = "tRESTResponse_9";

							if (globalMap.containsKey("restResponse")) {
								throw new RuntimeException(
										"Rest response already sent.");
							} else if (!globalMap.containsKey("restRequest")) {
								throw new RuntimeException(
										"Not received rest request yet.");
							} else {
								Integer restProviderStatusCode_tRESTResponse_9 = 200;

								Object restProviderResponse_tRESTResponse_9 = null;
								restProviderResponse_tRESTResponse_9 = row50.string;

								java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_9 = new java.util.TreeMap<String, String>(
										String.CASE_INSENSITIVE_ORDER);
								restProviderResponseHeaders_tRESTResponse_9
										.put("Content-Type", context.format);

								java.util.Map<String, Object> restResponse_tRESTResponse_9 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_9.put("BODY",
										restProviderResponse_tRESTResponse_9);
								restResponse_tRESTResponse_9.put("STATUS",
										restProviderStatusCode_tRESTResponse_9);
								restResponse_tRESTResponse_9
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_9);
								restResponse_tRESTResponse_9.put(
										"drop.json.root.element",
										Boolean.valueOf(false));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_9);

							}

							tos_count_tRESTResponse_9++;

							/**
							 * [tRESTResponse_9 main ] stop
							 */

						} // C_01

						/**
						 * [tRunJob_5 end ] start
						 */

						currentComponent = "tRunJob_5";

						ok_Hash.put("tRunJob_5", true);
						end_Hash.put("tRunJob_5", System.currentTimeMillis());

						/**
						 * [tRunJob_5 end ] stop
						 */

						/**
						 * [tJavaRow_13 end ] start
						 */

						currentComponent = "tJavaRow_13";

						globalMap.put("tJavaRow_13_NB_LINE",
								nb_line_tJavaRow_13);

						ok_Hash.put("tJavaRow_13", true);
						end_Hash.put("tJavaRow_13", System.currentTimeMillis());

						/**
						 * [tJavaRow_13 end ] stop
						 */

						/**
						 * [tRESTResponse_9 end ] start
						 */

						currentComponent = "tRESTResponse_9";

						ok_Hash.put("tRESTResponse_9", true);
						end_Hash.put("tRESTResponse_9",
								System.currentTimeMillis());

						/**
						 * [tRESTResponse_9 end ] stop
						 */

					} // End of branch "nsid"

					// Start of branch "row39"
					if (row39 != null) {

						/**
						 * [tLogRow_21 main ] start
						 */

						currentComponent = "tLogRow_21";

						// /////////////////////

						strBuffer_tLogRow_21 = new StringBuilder();

						if (row39.uri != null) { //

							strBuffer_tLogRow_21.append(String
									.valueOf(row39.uri));

						} //

						strBuffer_tLogRow_21.append("|");

						if (row39.method != null) { //

							strBuffer_tLogRow_21.append(String
									.valueOf(row39.method));

						} //

						strBuffer_tLogRow_21.append("|");

						if (row39.status != null) { //

							strBuffer_tLogRow_21.append(String
									.valueOf(row39.status));

						} //

						strBuffer_tLogRow_21.append("|");

						if (row39.error != null) { //

							strBuffer_tLogRow_21.append(String
									.valueOf(row39.error));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_21 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_21 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_21);
						}

						consoleOut_tLogRow_21.println(strBuffer_tLogRow_21
								.toString());
						consoleOut_tLogRow_21.flush();
						nb_line_tLogRow_21++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_21++;

						/**
						 * [tLogRow_21 main ] stop
						 */

					} // End of branch "row39"

					// Start of branch "nsid_format"
					if (nsid_format != null) {

						/**
						 * [tLogRow_8 main ] start
						 */

						currentComponent = "tLogRow_8";

						// /////////////////////

						strBuffer_tLogRow_8 = new StringBuilder();

						if (nsid_format.ns != null) { //

							strBuffer_tLogRow_8.append(String
									.valueOf(nsid_format.ns));

						} //

						strBuffer_tLogRow_8.append(" |8| ");

						if (nsid_format.id != null) { //

							strBuffer_tLogRow_8.append(String
									.valueOf(nsid_format.id));

						} //

						strBuffer_tLogRow_8.append(" |8| ");

						if (nsid_format.format != null) { //

							strBuffer_tLogRow_8.append(String
									.valueOf(nsid_format.format));

						} //

						strBuffer_tLogRow_8.append(" |8| ");

						if (nsid_format.request != null) { //

							strBuffer_tLogRow_8.append(String
									.valueOf(nsid_format.request));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_8 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_8 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_8);
						}

						consoleOut_tLogRow_8.println(strBuffer_tLogRow_8
								.toString());
						consoleOut_tLogRow_8.flush();
						nb_line_tLogRow_8++;
						// ////

						// ////

						// /////////////////////

						row6 = nsid_format;

						tos_count_tLogRow_8++;

						/**
						 * [tLogRow_8 main ] stop
						 */

						/**
						 * [tJavaRow_11 main ] start
						 */

						currentComponent = "tJavaRow_11";

						// Code généré selon le schémas d'entrée et de sortie
						row4.ns = row6.ns;
						row4.id = row6.id;
						row4.format = row6.format;
						row4.request = "describe";

						context.ns = row6.ns;
						context.id = row6.id;

						context.format = BioUtil.restFormat(row6.format);

						nb_line_tJavaRow_11++;

						tos_count_tJavaRow_11++;

						/**
						 * [tJavaRow_11 main ] stop
						 */

						/**
						 * [tFlowToIterate_12 main ] start
						 */

						currentComponent = "tFlowToIterate_12";

						globalMap.put("row4.ns", row4.ns);
						nb_line_tFlowToIterate_12++;
						globalMap.put("row4.id", row4.id);
						nb_line_tFlowToIterate_12++;
						globalMap.put("row4.format", row4.format);
						nb_line_tFlowToIterate_12++;
						globalMap.put("row4.request", row4.request);
						nb_line_tFlowToIterate_12++;

						counter_tFlowToIterate_12++;
						globalMap.put("tFlowToIterate_12_CURRENT_ITERATION",
								counter_tFlowToIterate_12);

						tos_count_tFlowToIterate_12++;

						/**
						 * [tFlowToIterate_12 main ] stop
						 */
						NB_ITERATE_tSparqlSelectRequest_6++;
						iterateLoop++;

						/**
						 * [tFlowToIterate_13 begin ] start
						 */

						int NB_ITERATE_tRunJob_3 = 0; // for statistics

						ok_Hash.put("tFlowToIterate_13", false);
						start_Hash.put("tFlowToIterate_13",
								System.currentTimeMillis());

						currentComponent = "tFlowToIterate_13";

						int tos_count_tFlowToIterate_13 = 0;

						int nb_line_tFlowToIterate_13 = 0;
						int counter_tFlowToIterate_13 = 0;

						/**
						 * [tFlowToIterate_13 begin ] stop
						 */

						/**
						 * [tLogRow_18 begin ] start
						 */

						ok_Hash.put("tLogRow_18", false);
						start_Hash
								.put("tLogRow_18", System.currentTimeMillis());

						currentComponent = "tLogRow_18";

						int tos_count_tLogRow_18 = 0;

						/**
						 * [tLogRow_18 begin ] stop
						 */

						/**
						 * [tReplace_6 begin ] start
						 */

						ok_Hash.put("tReplace_6", false);
						start_Hash
								.put("tReplace_6", System.currentTimeMillis());

						currentComponent = "tReplace_6";

						int tos_count_tReplace_6 = 0;

						int nb_line_tReplace_6 = 0;

						/**
						 * [tReplace_6 begin ] stop
						 */

						/**
						 * [tSparqlSelectRequest_6 begin ] start
						 */

						ok_Hash.put("tSparqlSelectRequest_6", false);
						start_Hash.put("tSparqlSelectRequest_6",
								System.currentTimeMillis());

						currentComponent = "tSparqlSelectRequest_6";

						int tos_count_tSparqlSelectRequest_6 = 0;

						String URL_string_tSparqlSelectRequest_6;

						URL_string_tSparqlSelectRequest_6 = context.database_endpoint
								+ "?default-graph-uri=&query="
								+ java.net.URLEncoder
										.encode("select ?sparql  where  { <http://bio2rdf.org/namespace:"
												+ row4.ns
												+ "> <http://bio2rdf.org/bio2rdf_vocabulary:sparql_"
												+ row4.request
												+ "> ?sparql . }", "UTF-8")
								+ "&format=application%2Fsparql-results%2Bjson&timeout=0&debug=on";

						org.json.JSONArray jsonArray_tSparqlSelectRequest_6 = new org.json.JSONArray();

						org.json.JSONArray jsonKeysArray_tSparqlSelectRequest_6;

						java.util.ArrayList<String> queryKeys_tSparqlSelectRequest_6 = new java.util.ArrayList<String>();
						// ArrayList that will contain the key value of the
						// query sorted correctly

						org.json.JSONObject jsonObj_tSparqlSelectRequest_6;

						java.util.Iterator<String> queryKeysIterator_tSparqlSelectRequest_6;

						java.net.URL url_tSparqlSelectRequest_6 = new java.net.URL(
								URL_string_tSparqlSelectRequest_6);

						java.net.HttpURLConnection urlConn_tSparqlSelectRequest_6 = (java.net.HttpURLConnection) url_tSparqlSelectRequest_6
								.openConnection();
						urlConn_tSparqlSelectRequest_6.setRequestMethod("GET");
						urlConn_tSparqlSelectRequest_6.setDoOutput(true);
						urlConn_tSparqlSelectRequest_6.setDoInput(true);
						urlConn_tSparqlSelectRequest_6.setUseCaches(false);

						try {
							urlConn_tSparqlSelectRequest_6.connect();

							byte[] buffer_tSparqlSelectRequest_6 = new byte[1024];
							int bos_buffer_tSparqlSelectRequest_6 = 0;

							StringBuilder sb_tSparqlSelectRequest_6 = new StringBuilder();

							if (java.net.HttpURLConnection.HTTP_OK == (urlConn_tSparqlSelectRequest_6
									.getResponseCode())) {
								java.io.InputStream bis_tSparqlSelectRequest_6 = new java.io.BufferedInputStream(
										urlConn_tSparqlSelectRequest_6
												.getInputStream());

								while ((bos_buffer_tSparqlSelectRequest_6 = bis_tSparqlSelectRequest_6
										.read(buffer_tSparqlSelectRequest_6)) != -1) {
									// Then the table of bytes and its size are
									// used to generate a string
									// which is added to a string builder that
									// will contain the whole response
									sb_tSparqlSelectRequest_6
											.append(new String(
													buffer_tSparqlSelectRequest_6,
													0,
													bos_buffer_tSparqlSelectRequest_6));
								}
								bis_tSparqlSelectRequest_6.close();

							} else {
								System.err
										.println(urlConn_tSparqlSelectRequest_6
												.getResponseCode()
												+ " "
												+ urlConn_tSparqlSelectRequest_6
														.getResponseMessage());
							}

							urlConn_tSparqlSelectRequest_6.disconnect();

							jsonObj_tSparqlSelectRequest_6 = new org.json.JSONObject(
									sb_tSparqlSelectRequest_6.toString());

							jsonKeysArray_tSparqlSelectRequest_6 = jsonObj_tSparqlSelectRequest_6
									.getJSONObject("head").getJSONArray("vars");
							for (int k_tSparqlSelectRequest_6 = 0; k_tSparqlSelectRequest_6 < jsonKeysArray_tSparqlSelectRequest_6
									.length(); k_tSparqlSelectRequest_6++) {
								queryKeys_tSparqlSelectRequest_6
										.add(jsonKeysArray_tSparqlSelectRequest_6
												.getString(k_tSparqlSelectRequest_6));
							}

							jsonArray_tSparqlSelectRequest_6 = jsonObj_tSparqlSelectRequest_6
									.getJSONObject("results").getJSONArray(
											"bindings");

						} catch (Exception e) {
							System.err.println("UnknownHostException");
						}

						if (jsonArray_tSparqlSelectRequest_6.length() == 0) {
							globalMap.put("tSparqlSelectRequest_6_HAS_RESULTS",
									false);
						} else {
							globalMap.put("tSparqlSelectRequest_6_HAS_RESULTS",
									true);
						}

						int i_tSparqlSelectRequest_6;
						int nb_line_tSparqlSelectRequest_6 = 0;

						for (i_tSparqlSelectRequest_6 = 0; i_tSparqlSelectRequest_6 < jsonArray_tSparqlSelectRequest_6
								.length(); i_tSparqlSelectRequest_6++) {

							/**
							 * [tSparqlSelectRequest_6 begin ] stop
							 */
							/**
							 * [tSparqlSelectRequest_6 main ] start
							 */

							currentComponent = "tSparqlSelectRequest_6";

							queryKeysIterator_tSparqlSelectRequest_6 = queryKeys_tSparqlSelectRequest_6
									.iterator();

							if (queryKeysIterator_tSparqlSelectRequest_6
									.hasNext()) {
								try {
									row20.sparql = jsonArray_tSparqlSelectRequest_6
											.getJSONObject(
													i_tSparqlSelectRequest_6)
											.getJSONObject(
													queryKeysIterator_tSparqlSelectRequest_6
															.next())
											.getString("value");
								} catch (org.json.JSONException e_tSparqlSelectRequest_6) {
									row20.sparql = "";
								}
							}

							tos_count_tSparqlSelectRequest_6++;

							/**
							 * [tSparqlSelectRequest_6 main ] stop
							 */

							/**
							 * [tReplace_6 main ] start
							 */

							currentComponent = "tReplace_6";

							String searchStr_tReplace_6_1 = "$NSID$" + "";
							row20.sparql = StringUtils.replaceAllStrictly(
									row20.sparql, searchStr_tReplace_6_1,
									context.ns + ":" + context.id + "", false,
									false);
							String searchStr_tReplace_6_2 = "$ID$" + "";
							row20.sparql = StringUtils.replaceAllStrictly(
									row20.sparql, searchStr_tReplace_6_2,
									context.id + "", false, false);
							String searchStr_tReplace_6_3 = "$NS$" + "";
							row20.sparql = StringUtils.replaceAllStrictly(
									row20.sparql, searchStr_tReplace_6_3,
									context.ns + "", false, false);
							row25.sparql = row20.sparql;

							nb_line_tReplace_6++;

							tos_count_tReplace_6++;

							/**
							 * [tReplace_6 main ] stop
							 */

							/**
							 * [tLogRow_18 main ] start
							 */

							currentComponent = "tLogRow_18";

							row32 = row25;

							tos_count_tLogRow_18++;

							/**
							 * [tLogRow_18 main ] stop
							 */

							/**
							 * [tFlowToIterate_13 main ] start
							 */

							currentComponent = "tFlowToIterate_13";

							globalMap.put("row32.sparql", row32.sparql);
							nb_line_tFlowToIterate_13++;

							counter_tFlowToIterate_13++;
							globalMap.put(
									"tFlowToIterate_13_CURRENT_ITERATION",
									counter_tFlowToIterate_13);

							tos_count_tFlowToIterate_13++;

							/**
							 * [tFlowToIterate_13 main ] stop
							 */
							NB_ITERATE_tRunJob_3++;
							iterateLoop++;

							/**
							 * [tRESTResponse_5 begin ] start
							 */

							ok_Hash.put("tRESTResponse_5", false);
							start_Hash.put("tRESTResponse_5",
									System.currentTimeMillis());

							currentComponent = "tRESTResponse_5";

							int tos_count_tRESTResponse_5 = 0;

							/**
							 * [tRESTResponse_5 begin ] stop
							 */

							/**
							 * [tRunJob_3 begin ] start
							 */

							ok_Hash.put("tRunJob_3", false);
							start_Hash.put("tRunJob_3",
									System.currentTimeMillis());

							currentComponent = "tRunJob_3";

							int tos_count_tRunJob_3 = 0;

							/**
							 * [tRunJob_3 begin ] stop
							 */
							/**
							 * [tRunJob_3 main ] start
							 */

							currentComponent = "tRunJob_3";

							java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

							paraList_tRunJob_3.add("--father_pid=" + pid);

							paraList_tRunJob_3.add("--root_pid=" + rootPid);

							paraList_tRunJob_3.add("--father_node=tRunJob_3");

							paraList_tRunJob_3.add("--context=Default");

							// for feature:10589

							paraList_tRunJob_3.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_3
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_3 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_3 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_3".equals(tRunJobName_tRunJob_3)
									&& childResumePath_tRunJob_3 != null) {
								paraList_tRunJob_3
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_3
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_3");

							java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

							Object obj_tRunJob_3 = null;

							obj_tRunJob_3 = row32.sparql;
							paraList_tRunJob_3
									.add("--context_param rdf_url="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_3));
							parentContextMap_tRunJob_3.put("rdf_url",
									obj_tRunJob_3);

							obj_tRunJob_3 = context.debug;
							paraList_tRunJob_3
									.add("--context_param debug="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_3));
							parentContextMap_tRunJob_3.put("debug",
									obj_tRunJob_3);

							obj_tRunJob_3 = context.format;
							paraList_tRunJob_3
									.add("--context_param formatOut="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_3));
							parentContextMap_tRunJob_3.put("formatOut",
									obj_tRunJob_3);

							bio2rdf.rdfxml_reader_converter_1_7.rdfxml_reader_converter childJob_tRunJob_3 = new bio2rdf.rdfxml_reader_converter_1_7.rdfxml_reader_converter();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_3) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
										.entrySet()) {
									dataSources_tRunJob_3.put(
											talendDataSourceEntry_tRunJob_3
													.getKey(),
											talendDataSourceEntry_tRunJob_3
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_3
										.setDataSources(dataSources_tRunJob_3);
							}

							childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;

							String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
									.runJob((String[]) paraList_tRunJob_3
											.toArray(new String[paraList_tRunJob_3
													.size()]));

							errorCode = childJob_tRunJob_3.getErrorCode();

							if (childJob_tRunJob_3.getErrorCode() == null) {
								globalMap
										.put("tRunJob_3_CHILD_RETURN_CODE",
												childJob_tRunJob_3.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_3
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
										childJob_tRunJob_3.getErrorCode());
							}
							if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
								globalMap.put(
										"tRunJob_3_CHILD_EXCEPTION_STACKTRACE",
										childJob_tRunJob_3
												.getExceptionStackTrace());
							}

							for (String[] item_tRunJob_3 : childReturn_tRunJob_3) {
								if (childJob_tRunJob_3
										.hastBufferOutputComponent() || true) {

									if (0 < item_tRunJob_3.length) {

										row33.string = item_tRunJob_3[0];

									} else {
										row33.string = null;
									}

									if (1 < item_tRunJob_3.length) {

										row33.body = ParserUtils
												.parseTo_Document(item_tRunJob_3[1]);

									} else {
										row33.body = null;
									}

								}

								tos_count_tRunJob_3++;

								/**
								 * [tRunJob_3 main ] stop
								 */

								/**
								 * [tRESTResponse_5 main ] start
								 */

								currentComponent = "tRESTResponse_5";

								if (globalMap.containsKey("restResponse")) {
									throw new RuntimeException(
											"Rest response already sent.");
								} else if (!globalMap
										.containsKey("restRequest")) {
									throw new RuntimeException(
											"Not received rest request yet.");
								} else {
									Integer restProviderStatusCode_tRESTResponse_5 = 200;

									Object restProviderResponse_tRESTResponse_5 = null;
									restProviderResponse_tRESTResponse_5 = row33.string;
									if (null != row33.body) {
										restProviderResponse_tRESTResponse_5 = row33.body
												.getDocument();
									}

									java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_5 = new java.util.TreeMap<String, String>(
											String.CASE_INSENSITIVE_ORDER);
									restProviderResponseHeaders_tRESTResponse_5
											.put("Content-Type", context.format);

									java.util.Map<String, Object> restResponse_tRESTResponse_5 = new java.util.HashMap<String, Object>();
									restResponse_tRESTResponse_5
											.put("BODY",
													restProviderResponse_tRESTResponse_5);
									restResponse_tRESTResponse_5
											.put("STATUS",
													restProviderStatusCode_tRESTResponse_5);
									restResponse_tRESTResponse_5
											.put("HEADERS",
													restProviderResponseHeaders_tRESTResponse_5);
									restResponse_tRESTResponse_5.put(
											"drop.json.root.element",
											Boolean.valueOf(false));
									globalMap.put("restResponse",
											restResponse_tRESTResponse_5);

								}

								tos_count_tRESTResponse_5++;

								/**
								 * [tRESTResponse_5 main ] stop
								 */

							} // C_01

							/**
							 * [tRunJob_3 end ] start
							 */

							currentComponent = "tRunJob_3";

							ok_Hash.put("tRunJob_3", true);
							end_Hash.put("tRunJob_3",
									System.currentTimeMillis());

							/**
							 * [tRunJob_3 end ] stop
							 */

							/**
							 * [tRESTResponse_5 end ] start
							 */

							currentComponent = "tRESTResponse_5";

							ok_Hash.put("tRESTResponse_5", true);
							end_Hash.put("tRESTResponse_5",
									System.currentTimeMillis());

							/**
							 * [tRESTResponse_5 end ] stop
							 */

							/**
							 * [tSparqlSelectRequest_6 end ] start
							 */

							currentComponent = "tSparqlSelectRequest_6";

							nb_line_tSparqlSelectRequest_6++;
						}

						globalMap.put("tSparqlSelectRequest_6_NB_LINE",
								nb_line_tSparqlSelectRequest_6);

						ok_Hash.put("tSparqlSelectRequest_6", true);
						end_Hash.put("tSparqlSelectRequest_6",
								System.currentTimeMillis());

						/**
						 * [tSparqlSelectRequest_6 end ] stop
						 */

						/**
						 * [tReplace_6 end ] start
						 */

						currentComponent = "tReplace_6";

						globalMap.put("tReplace_6_NB_LINE", nb_line_tReplace_6);

						ok_Hash.put("tReplace_6", true);
						end_Hash.put("tReplace_6", System.currentTimeMillis());

						/**
						 * [tReplace_6 end ] stop
						 */

						/**
						 * [tLogRow_18 end ] start
						 */

						currentComponent = "tLogRow_18";

						ok_Hash.put("tLogRow_18", true);
						end_Hash.put("tLogRow_18", System.currentTimeMillis());

						/**
						 * [tLogRow_18 end ] stop
						 */

						/**
						 * [tFlowToIterate_13 end ] start
						 */

						currentComponent = "tFlowToIterate_13";

						globalMap.put("tFlowToIterate_13_NB_LINE",
								nb_line_tFlowToIterate_13);

						ok_Hash.put("tFlowToIterate_13", true);
						end_Hash.put("tFlowToIterate_13",
								System.currentTimeMillis());

						/**
						 * [tFlowToIterate_13 end ] stop
						 */

					} // End of branch "nsid_format"

					// Start of branch "page"
					if (page != null) {

						/**
						 * [tLogRow_14 main ] start
						 */

						currentComponent = "tLogRow_14";

						// /////////////////////

						strBuffer_tLogRow_14 = new StringBuilder();

						if (page.ns != null) { //

							strBuffer_tLogRow_14
									.append(String.valueOf(page.ns));

						} //

						strBuffer_tLogRow_14.append("|");

						if (page.id != null) { //

							strBuffer_tLogRow_14
									.append(String.valueOf(page.id));

						} //

						strBuffer_tLogRow_14.append("|");

						if (page.request != null) { //

							strBuffer_tLogRow_14.append(String
									.valueOf(page.request));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_14 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_14 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_14);
						}

						consoleOut_tLogRow_14.println(strBuffer_tLogRow_14
								.toString());
						consoleOut_tLogRow_14.flush();
						nb_line_tLogRow_14++;
						// ////

						// ////

						// /////////////////////

						row13 = page;

						tos_count_tLogRow_14++;

						/**
						 * [tLogRow_14 main ] stop
						 */

						/**
						 * [tJavaRow_12 main ] start
						 */

						currentComponent = "tJavaRow_12";

						// Code généré selon le schémas d'entrée et de sortie
						row14.request = "page";
						row14.ns = row13.ns;
						row14.id = row13.id;

						nb_line_tJavaRow_12++;

						tos_count_tJavaRow_12++;

						/**
						 * [tJavaRow_12 main ] stop
						 */

						/**
						 * [tFlowToIterate_17 main ] start
						 */

						currentComponent = "tFlowToIterate_17";

						globalMap.put("row14.request", row14.request);
						nb_line_tFlowToIterate_17++;
						globalMap.put("row14.ns", row14.ns);
						nb_line_tFlowToIterate_17++;
						globalMap.put("row14.id", row14.id);
						nb_line_tFlowToIterate_17++;
						globalMap.put("row14.Accept", row14.Accept);
						nb_line_tFlowToIterate_17++;

						counter_tFlowToIterate_17++;
						globalMap.put("tFlowToIterate_17_CURRENT_ITERATION",
								counter_tFlowToIterate_17);

						tos_count_tFlowToIterate_17++;

						/**
						 * [tFlowToIterate_17 main ] stop
						 */
						NB_ITERATE_tSparqlSelectRequest_3++;
						iterateLoop++;

						/**
						 * [tRESTResponse_13 begin ] start
						 */

						ok_Hash.put("tRESTResponse_13", false);
						start_Hash.put("tRESTResponse_13",
								System.currentTimeMillis());

						currentComponent = "tRESTResponse_13";

						int tos_count_tRESTResponse_13 = 0;

						/**
						 * [tRESTResponse_13 begin ] stop
						 */

						/**
						 * [tReplace_5 begin ] start
						 */

						ok_Hash.put("tReplace_5", false);
						start_Hash
								.put("tReplace_5", System.currentTimeMillis());

						currentComponent = "tReplace_5";

						int tos_count_tReplace_5 = 0;

						int nb_line_tReplace_5 = 0;

						/**
						 * [tReplace_5 begin ] stop
						 */

						/**
						 * [tLogRow_19 begin ] start
						 */

						ok_Hash.put("tLogRow_19", false);
						start_Hash
								.put("tLogRow_19", System.currentTimeMillis());

						currentComponent = "tLogRow_19";

						int tos_count_tLogRow_19 = 0;

						/**
						 * [tLogRow_19 begin ] stop
						 */

						/**
						 * [tMap_4 begin ] start
						 */

						ok_Hash.put("tMap_4", false);
						start_Hash.put("tMap_4", System.currentTimeMillis());

						currentComponent = "tMap_4";

						int tos_count_tMap_4 = 0;

						// ###############################
						// # Lookup's keys initialization
						// ###############################

						// ###############################
						// # Vars initialization
						class Var__tMap_4__Struct {
						}
						Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
						// ###############################

						// ###############################
						// # Outputs initialization
						out1Struct out1_tmp = new out1Struct();
						// ###############################

						/**
						 * [tMap_4 begin ] stop
						 */

						/**
						 * [tSparqlSelectRequest_3 begin ] start
						 */

						ok_Hash.put("tSparqlSelectRequest_3", false);
						start_Hash.put("tSparqlSelectRequest_3",
								System.currentTimeMillis());

						currentComponent = "tSparqlSelectRequest_3";

						int tos_count_tSparqlSelectRequest_3 = 0;

						String URL_string_tSparqlSelectRequest_3;

						URL_string_tSparqlSelectRequest_3 = context.database_endpoint
								+ "?default-graph-uri=&query="
								+ java.net.URLEncoder
										.encode("select ?sparql  where { <http://bio2rdf.org/namespace:"
												+ row14.ns
												+ "> <http://bio2rdf.org/bio2rdf_vocabulary:url_page> ?sparql . }",
												"UTF-8")
								+ "&format=application%2Fsparql-results%2Bjson&timeout=0&debug=on";

						org.json.JSONArray jsonArray_tSparqlSelectRequest_3 = new org.json.JSONArray();

						org.json.JSONArray jsonKeysArray_tSparqlSelectRequest_3;

						java.util.ArrayList<String> queryKeys_tSparqlSelectRequest_3 = new java.util.ArrayList<String>();
						// ArrayList that will contain the key value of the
						// query sorted correctly

						org.json.JSONObject jsonObj_tSparqlSelectRequest_3;

						java.util.Iterator<String> queryKeysIterator_tSparqlSelectRequest_3;

						java.net.URL url_tSparqlSelectRequest_3 = new java.net.URL(
								URL_string_tSparqlSelectRequest_3);

						java.net.HttpURLConnection urlConn_tSparqlSelectRequest_3 = (java.net.HttpURLConnection) url_tSparqlSelectRequest_3
								.openConnection();
						urlConn_tSparqlSelectRequest_3.setRequestMethod("GET");
						urlConn_tSparqlSelectRequest_3.setDoOutput(true);
						urlConn_tSparqlSelectRequest_3.setDoInput(true);
						urlConn_tSparqlSelectRequest_3.setUseCaches(false);

						try {
							urlConn_tSparqlSelectRequest_3.connect();

							byte[] buffer_tSparqlSelectRequest_3 = new byte[1024];
							int bos_buffer_tSparqlSelectRequest_3 = 0;

							StringBuilder sb_tSparqlSelectRequest_3 = new StringBuilder();

							if (java.net.HttpURLConnection.HTTP_OK == (urlConn_tSparqlSelectRequest_3
									.getResponseCode())) {
								java.io.InputStream bis_tSparqlSelectRequest_3 = new java.io.BufferedInputStream(
										urlConn_tSparqlSelectRequest_3
												.getInputStream());

								while ((bos_buffer_tSparqlSelectRequest_3 = bis_tSparqlSelectRequest_3
										.read(buffer_tSparqlSelectRequest_3)) != -1) {
									// Then the table of bytes and its size are
									// used to generate a string
									// which is added to a string builder that
									// will contain the whole response
									sb_tSparqlSelectRequest_3
											.append(new String(
													buffer_tSparqlSelectRequest_3,
													0,
													bos_buffer_tSparqlSelectRequest_3));
								}
								bis_tSparqlSelectRequest_3.close();

							} else {
								System.err
										.println(urlConn_tSparqlSelectRequest_3
												.getResponseCode()
												+ " "
												+ urlConn_tSparqlSelectRequest_3
														.getResponseMessage());
							}

							urlConn_tSparqlSelectRequest_3.disconnect();

							jsonObj_tSparqlSelectRequest_3 = new org.json.JSONObject(
									sb_tSparqlSelectRequest_3.toString());

							jsonKeysArray_tSparqlSelectRequest_3 = jsonObj_tSparqlSelectRequest_3
									.getJSONObject("head").getJSONArray("vars");
							for (int k_tSparqlSelectRequest_3 = 0; k_tSparqlSelectRequest_3 < jsonKeysArray_tSparqlSelectRequest_3
									.length(); k_tSparqlSelectRequest_3++) {
								queryKeys_tSparqlSelectRequest_3
										.add(jsonKeysArray_tSparqlSelectRequest_3
												.getString(k_tSparqlSelectRequest_3));
							}

							jsonArray_tSparqlSelectRequest_3 = jsonObj_tSparqlSelectRequest_3
									.getJSONObject("results").getJSONArray(
											"bindings");

						} catch (Exception e) {
							System.err.println("UnknownHostException");
						}

						if (jsonArray_tSparqlSelectRequest_3.length() == 0) {
							globalMap.put("tSparqlSelectRequest_3_HAS_RESULTS",
									false);
						} else {
							globalMap.put("tSparqlSelectRequest_3_HAS_RESULTS",
									true);
						}

						int i_tSparqlSelectRequest_3;
						int nb_line_tSparqlSelectRequest_3 = 0;

						for (i_tSparqlSelectRequest_3 = 0; i_tSparqlSelectRequest_3 < jsonArray_tSparqlSelectRequest_3
								.length(); i_tSparqlSelectRequest_3++) {

							/**
							 * [tSparqlSelectRequest_3 begin ] stop
							 */
							/**
							 * [tSparqlSelectRequest_3 main ] start
							 */

							currentComponent = "tSparqlSelectRequest_3";

							queryKeysIterator_tSparqlSelectRequest_3 = queryKeys_tSparqlSelectRequest_3
									.iterator();

							if (queryKeysIterator_tSparqlSelectRequest_3
									.hasNext()) {
								try {
									row10.sparql = jsonArray_tSparqlSelectRequest_3
											.getJSONObject(
													i_tSparqlSelectRequest_3)
											.getJSONObject(
													queryKeysIterator_tSparqlSelectRequest_3
															.next())
											.getString("value");
								} catch (org.json.JSONException e_tSparqlSelectRequest_3) {
									row10.sparql = "";
								}
							}

							tos_count_tSparqlSelectRequest_3++;

							/**
							 * [tSparqlSelectRequest_3 main ] stop
							 */

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								out1 = null;

								// # Output table : 'out1'
								out1_tmp.string = "<html><head><meta http-equiv=\"refresh\" content=\"0; url="
										+ row10.sparql + "\" /> </head></html>";
								out1 = out1_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */
							// Start of branch "out1"
							if (out1 != null) {

								/**
								 * [tLogRow_19 main ] start
								 */

								currentComponent = "tLogRow_19";

								row8 = out1;

								tos_count_tLogRow_19++;

								/**
								 * [tLogRow_19 main ] stop
								 */

								/**
								 * [tReplace_5 main ] start
								 */

								currentComponent = "tReplace_5";

								String searchStr_tReplace_5_1 = "$NS$" + "";
								row8.string = StringUtils.replaceAllStrictly(
										row8.string, searchStr_tReplace_5_1,
										row14.ns + "", false, false);
								String searchStr_tReplace_5_2 = "$ID$" + "";
								row8.string = StringUtils.replaceAllStrictly(
										row8.string, searchStr_tReplace_5_2,
										row14.id + "", false, false);
								row9.string = row8.string;

								nb_line_tReplace_5++;

								tos_count_tReplace_5++;

								/**
								 * [tReplace_5 main ] stop
								 */

								/**
								 * [tRESTResponse_13 main ] start
								 */

								currentComponent = "tRESTResponse_13";

								if (globalMap.containsKey("restResponse")) {
									throw new RuntimeException(
											"Rest response already sent.");
								} else if (!globalMap
										.containsKey("restRequest")) {
									throw new RuntimeException(
											"Not received rest request yet.");
								} else {
									Integer restProviderStatusCode_tRESTResponse_13 = 200;

									Object restProviderResponse_tRESTResponse_13 = null;
									restProviderResponse_tRESTResponse_13 = row9.string;

									java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_13 = new java.util.TreeMap<String, String>(
											String.CASE_INSENSITIVE_ORDER);
									restProviderResponseHeaders_tRESTResponse_13
											.put("Content-Type", "text/html");

									java.util.Map<String, Object> restResponse_tRESTResponse_13 = new java.util.HashMap<String, Object>();
									restResponse_tRESTResponse_13
											.put("BODY",
													restProviderResponse_tRESTResponse_13);
									restResponse_tRESTResponse_13
											.put("STATUS",
													restProviderStatusCode_tRESTResponse_13);
									restResponse_tRESTResponse_13
											.put("HEADERS",
													restProviderResponseHeaders_tRESTResponse_13);
									restResponse_tRESTResponse_13.put(
											"drop.json.root.element",
											Boolean.valueOf(false));
									globalMap.put("restResponse",
											restResponse_tRESTResponse_13);

								}

								tos_count_tRESTResponse_13++;

								/**
								 * [tRESTResponse_13 main ] stop
								 */

							} // End of branch "out1"

							/**
							 * [tSparqlSelectRequest_3 end ] start
							 */

							currentComponent = "tSparqlSelectRequest_3";

							nb_line_tSparqlSelectRequest_3++;
						}

						globalMap.put("tSparqlSelectRequest_3_NB_LINE",
								nb_line_tSparqlSelectRequest_3);

						ok_Hash.put("tSparqlSelectRequest_3", true);
						end_Hash.put("tSparqlSelectRequest_3",
								System.currentTimeMillis());

						/**
						 * [tSparqlSelectRequest_3 end ] stop
						 */

						/**
						 * [tMap_4 end ] start
						 */

						currentComponent = "tMap_4";

						// ###############################
						// # Lookup hashes releasing
						// ###############################

						ok_Hash.put("tMap_4", true);
						end_Hash.put("tMap_4", System.currentTimeMillis());

						/**
						 * [tMap_4 end ] stop
						 */

						/**
						 * [tLogRow_19 end ] start
						 */

						currentComponent = "tLogRow_19";

						ok_Hash.put("tLogRow_19", true);
						end_Hash.put("tLogRow_19", System.currentTimeMillis());

						/**
						 * [tLogRow_19 end ] stop
						 */

						/**
						 * [tReplace_5 end ] start
						 */

						currentComponent = "tReplace_5";

						globalMap.put("tReplace_5_NB_LINE", nb_line_tReplace_5);

						ok_Hash.put("tReplace_5", true);
						end_Hash.put("tReplace_5", System.currentTimeMillis());

						/**
						 * [tReplace_5 end ] stop
						 */

						/**
						 * [tRESTResponse_13 end ] start
						 */

						currentComponent = "tRESTResponse_13";

						ok_Hash.put("tRESTResponse_13", true);
						end_Hash.put("tRESTResponse_13",
								System.currentTimeMillis());

						/**
						 * [tRESTResponse_13 end ] stop
						 */

					} // End of branch "page"

					// Start of branch "test"
					if (test != null) {

						/**
						 * [tLogRow_9 main ] start
						 */

						currentComponent = "tLogRow_9";

						// /////////////////////

						strBuffer_tLogRow_9 = new StringBuilder();

						if (test.request != null) { //

							strBuffer_tLogRow_9.append(String
									.valueOf(test.request));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_9 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_9 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_9);
						}

						consoleOut_tLogRow_9.println(strBuffer_tLogRow_9
								.toString());
						consoleOut_tLogRow_9.flush();
						nb_line_tLogRow_9++;
						// ////

						// ////

						// /////////////////////

						row7 = test;

						tos_count_tLogRow_9++;

						/**
						 * [tLogRow_9 main ] stop
						 */

						/**
						 * [tJavaRow_3 main ] start
						 */

						currentComponent = "tJavaRow_3";

						row1.request = "null";

						nb_line_tJavaRow_3++;

						tos_count_tJavaRow_3++;

						/**
						 * [tJavaRow_3 main ] stop
						 */

						/**
						 * [tFlowToIterate_5 main ] start
						 */

						currentComponent = "tFlowToIterate_5";

						globalMap.put("row1.ns", row1.ns);
						nb_line_tFlowToIterate_5++;
						globalMap.put("row1.id", row1.id);
						nb_line_tFlowToIterate_5++;
						globalMap.put("row1.request", row1.request);
						nb_line_tFlowToIterate_5++;

						counter_tFlowToIterate_5++;
						globalMap.put("tFlowToIterate_5_CURRENT_ITERATION",
								counter_tFlowToIterate_5);

						tos_count_tFlowToIterate_5++;

						/**
						 * [tFlowToIterate_5 main ] stop
						 */
						NB_ITERATE_tSparqlSelectRequest_1++;
						iterateLoop++;

						/**
						 * [tSortRow_1_SortOut begin ] start
						 */

						ok_Hash.put("tSortRow_1_SortOut", false);
						start_Hash.put("tSortRow_1_SortOut",
								System.currentTimeMillis());

						currentVirtualComponent = "tSortRow_1";

						currentComponent = "tSortRow_1_SortOut";

						int tos_count_tSortRow_1_SortOut = 0;

						class Comparablerow42Struct extends row42Struct
								implements Comparable<Comparablerow42Struct> {

							public int compareTo(Comparablerow42Struct other) {

								if (this.string == null && other.string != null) {
									return -1;

								} else if (this.string != null
										&& other.string == null) {
									return 1;

								} else if (this.string != null
										&& other.string != null) {
									if (!this.string.equals(other.string)) {
										return this.string
												.compareTo(other.string);
									}
								}
								return 0;
							}
						}

						java.util.List<Comparablerow42Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow42Struct>();

						/**
						 * [tSortRow_1_SortOut begin ] stop
						 */

						/**
						 * [tJavaRow_6 begin ] start
						 */

						ok_Hash.put("tJavaRow_6", false);
						start_Hash
								.put("tJavaRow_6", System.currentTimeMillis());

						currentComponent = "tJavaRow_6";

						int tos_count_tJavaRow_6 = 0;

						int nb_line_tJavaRow_6 = 0;

						/**
						 * [tJavaRow_6 begin ] stop
						 */

						/**
						 * [tLogRow_15 begin ] start
						 */

						ok_Hash.put("tLogRow_15", false);
						start_Hash
								.put("tLogRow_15", System.currentTimeMillis());

						currentComponent = "tLogRow_15";

						int tos_count_tLogRow_15 = 0;

						/**
						 * [tLogRow_15 begin ] stop
						 */

						/**
						 * [tSparqlSelectRequest_1 begin ] start
						 */

						ok_Hash.put("tSparqlSelectRequest_1", false);
						start_Hash.put("tSparqlSelectRequest_1",
								System.currentTimeMillis());

						currentComponent = "tSparqlSelectRequest_1";

						int tos_count_tSparqlSelectRequest_1 = 0;

						String URL_string_tSparqlSelectRequest_1;

						URL_string_tSparqlSelectRequest_1 = context.database_endpoint
								+ "?default-graph-uri=&query="
								+ java.net.URLEncoder
										.encode("select distinct ?id ?label ?title where  { ?s <http://bio2rdf.org/bio2rdf_vocabulary:test> ?o .  ?s dc:identifier ?id . ?s rdfs:label ?label . OPTIONAL {?s dc:title ?title} }",
												"UTF-8")
								+ "&format=application%2Fsparql-results%2Bjson&timeout=0&debug=on";

						org.json.JSONArray jsonArray_tSparqlSelectRequest_1 = new org.json.JSONArray();

						org.json.JSONArray jsonKeysArray_tSparqlSelectRequest_1;

						java.util.ArrayList<String> queryKeys_tSparqlSelectRequest_1 = new java.util.ArrayList<String>();
						// ArrayList that will contain the key value of the
						// query sorted correctly

						org.json.JSONObject jsonObj_tSparqlSelectRequest_1;

						java.util.Iterator<String> queryKeysIterator_tSparqlSelectRequest_1;

						java.net.URL url_tSparqlSelectRequest_1 = new java.net.URL(
								URL_string_tSparqlSelectRequest_1);

						java.net.HttpURLConnection urlConn_tSparqlSelectRequest_1 = (java.net.HttpURLConnection) url_tSparqlSelectRequest_1
								.openConnection();
						urlConn_tSparqlSelectRequest_1.setRequestMethod("GET");
						urlConn_tSparqlSelectRequest_1.setDoOutput(true);
						urlConn_tSparqlSelectRequest_1.setDoInput(true);
						urlConn_tSparqlSelectRequest_1.setUseCaches(false);

						try {
							urlConn_tSparqlSelectRequest_1.connect();

							byte[] buffer_tSparqlSelectRequest_1 = new byte[1024];
							int bos_buffer_tSparqlSelectRequest_1 = 0;

							StringBuilder sb_tSparqlSelectRequest_1 = new StringBuilder();

							if (java.net.HttpURLConnection.HTTP_OK == (urlConn_tSparqlSelectRequest_1
									.getResponseCode())) {
								java.io.InputStream bis_tSparqlSelectRequest_1 = new java.io.BufferedInputStream(
										urlConn_tSparqlSelectRequest_1
												.getInputStream());

								while ((bos_buffer_tSparqlSelectRequest_1 = bis_tSparqlSelectRequest_1
										.read(buffer_tSparqlSelectRequest_1)) != -1) {
									// Then the table of bytes and its size are
									// used to generate a string
									// which is added to a string builder that
									// will contain the whole response
									sb_tSparqlSelectRequest_1
											.append(new String(
													buffer_tSparqlSelectRequest_1,
													0,
													bos_buffer_tSparqlSelectRequest_1));
								}
								bis_tSparqlSelectRequest_1.close();

							} else {
								System.err
										.println(urlConn_tSparqlSelectRequest_1
												.getResponseCode()
												+ " "
												+ urlConn_tSparqlSelectRequest_1
														.getResponseMessage());
							}

							urlConn_tSparqlSelectRequest_1.disconnect();

							jsonObj_tSparqlSelectRequest_1 = new org.json.JSONObject(
									sb_tSparqlSelectRequest_1.toString());

							jsonKeysArray_tSparqlSelectRequest_1 = jsonObj_tSparqlSelectRequest_1
									.getJSONObject("head").getJSONArray("vars");
							for (int k_tSparqlSelectRequest_1 = 0; k_tSparqlSelectRequest_1 < jsonKeysArray_tSparqlSelectRequest_1
									.length(); k_tSparqlSelectRequest_1++) {
								queryKeys_tSparqlSelectRequest_1
										.add(jsonKeysArray_tSparqlSelectRequest_1
												.getString(k_tSparqlSelectRequest_1));
							}

							jsonArray_tSparqlSelectRequest_1 = jsonObj_tSparqlSelectRequest_1
									.getJSONObject("results").getJSONArray(
											"bindings");

						} catch (Exception e) {
							System.err.println("UnknownHostException");
						}

						if (jsonArray_tSparqlSelectRequest_1.length() == 0) {
							globalMap.put("tSparqlSelectRequest_1_HAS_RESULTS",
									false);
						} else {
							globalMap.put("tSparqlSelectRequest_1_HAS_RESULTS",
									true);
						}

						int i_tSparqlSelectRequest_1;
						int nb_line_tSparqlSelectRequest_1 = 0;

						for (i_tSparqlSelectRequest_1 = 0; i_tSparqlSelectRequest_1 < jsonArray_tSparqlSelectRequest_1
								.length(); i_tSparqlSelectRequest_1++) {

							/**
							 * [tSparqlSelectRequest_1 begin ] stop
							 */
							/**
							 * [tSparqlSelectRequest_1 main ] start
							 */

							currentComponent = "tSparqlSelectRequest_1";

							queryKeysIterator_tSparqlSelectRequest_1 = queryKeys_tSparqlSelectRequest_1
									.iterator();

							if (queryKeysIterator_tSparqlSelectRequest_1
									.hasNext()) {
								try {
									row15.nsid = jsonArray_tSparqlSelectRequest_1
											.getJSONObject(
													i_tSparqlSelectRequest_1)
											.getJSONObject(
													queryKeysIterator_tSparqlSelectRequest_1
															.next())
											.getString("value");
								} catch (org.json.JSONException e_tSparqlSelectRequest_1) {
									row15.nsid = "";
								}
							}

							if (queryKeysIterator_tSparqlSelectRequest_1
									.hasNext()) {
								try {
									row15.label = jsonArray_tSparqlSelectRequest_1
											.getJSONObject(
													i_tSparqlSelectRequest_1)
											.getJSONObject(
													queryKeysIterator_tSparqlSelectRequest_1
															.next())
											.getString("value");
								} catch (org.json.JSONException e_tSparqlSelectRequest_1) {
									row15.label = "";
								}
							}

							if (queryKeysIterator_tSparqlSelectRequest_1
									.hasNext()) {
								try {
									row15.title = jsonArray_tSparqlSelectRequest_1
											.getJSONObject(
													i_tSparqlSelectRequest_1)
											.getJSONObject(
													queryKeysIterator_tSparqlSelectRequest_1
															.next())
											.getString("value");
								} catch (org.json.JSONException e_tSparqlSelectRequest_1) {
									row15.title = "";
								}
							}

							tos_count_tSparqlSelectRequest_1++;

							/**
							 * [tSparqlSelectRequest_1 main ] stop
							 */

							/**
							 * [tLogRow_15 main ] start
							 */

							currentComponent = "tLogRow_15";

							row16 = row15;

							tos_count_tLogRow_15++;

							/**
							 * [tLogRow_15 main ] stop
							 */

							/**
							 * [tJavaRow_6 main ] start
							 */

							currentComponent = "tJavaRow_6";

							// Code généré selon le schémas d'entrée et de
							// sortie
							row42.body = null;

							if (row16.title.equals("")) {
								row42.string = "<p><a href=\"/test/"
										+ StringHandling.CHANGE(row16.nsid,
												"namespace:", "")
										+ "\"> "
										+ StringHandling
												.CHANGE(row16.nsid,
														"namespace:", "")
												.substring(0, 1).toUpperCase()
										+ StringHandling
												.CHANGE(row16.nsid,
														"namespace:", "")
												.substring(1).toLowerCase()
										+ "</a><span  class=\"label\"> - "
										+ row16.label + "</span></p>";
							} else {
								row42.string = "<p><a href=\"/test/"
										+ StringHandling.CHANGE(row16.nsid,
												"namespace:", "") + "\"> "
										+ row16.title
										+ "</a><span  class=\"label\"> - "
										+ row16.label + "</span></p>";
							}

							nb_line_tJavaRow_6++;

							tos_count_tJavaRow_6++;

							/**
							 * [tJavaRow_6 main ] stop
							 */

							/**
							 * [tSortRow_1_SortOut main ] start
							 */

							currentVirtualComponent = "tSortRow_1";

							currentComponent = "tSortRow_1_SortOut";

							Comparablerow42Struct arrayRowtSortRow_1_SortOut = new Comparablerow42Struct();

							arrayRowtSortRow_1_SortOut.body = row42.body;
							arrayRowtSortRow_1_SortOut.string = row42.string;
							list_tSortRow_1_SortOut
									.add(arrayRowtSortRow_1_SortOut);

							tos_count_tSortRow_1_SortOut++;

							/**
							 * [tSortRow_1_SortOut main ] stop
							 */

							/**
							 * [tSparqlSelectRequest_1 end ] start
							 */

							currentComponent = "tSparqlSelectRequest_1";

							nb_line_tSparqlSelectRequest_1++;
						}

						globalMap.put("tSparqlSelectRequest_1_NB_LINE",
								nb_line_tSparqlSelectRequest_1);

						ok_Hash.put("tSparqlSelectRequest_1", true);
						end_Hash.put("tSparqlSelectRequest_1",
								System.currentTimeMillis());

						/**
						 * [tSparqlSelectRequest_1 end ] stop
						 */

						/**
						 * [tLogRow_15 end ] start
						 */

						currentComponent = "tLogRow_15";

						ok_Hash.put("tLogRow_15", true);
						end_Hash.put("tLogRow_15", System.currentTimeMillis());

						/**
						 * [tLogRow_15 end ] stop
						 */

						/**
						 * [tJavaRow_6 end ] start
						 */

						currentComponent = "tJavaRow_6";

						globalMap.put("tJavaRow_6_NB_LINE", nb_line_tJavaRow_6);

						ok_Hash.put("tJavaRow_6", true);
						end_Hash.put("tJavaRow_6", System.currentTimeMillis());

						/**
						 * [tJavaRow_6 end ] stop
						 */

						/**
						 * [tSortRow_1_SortOut end ] start
						 */

						currentVirtualComponent = "tSortRow_1";

						currentComponent = "tSortRow_1_SortOut";

						row42Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut
								.toArray(new Comparablerow42Struct[0]);

						java.util.Arrays.sort(array_tSortRow_1_SortOut);

						globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

						ok_Hash.put("tSortRow_1_SortOut", true);
						end_Hash.put("tSortRow_1_SortOut",
								System.currentTimeMillis());

						/**
						 * [tSortRow_1_SortOut end ] stop
						 */

						/**
						 * [tDenormalize_2_DenormalizeOut begin ] start
						 */

						ok_Hash.put("tDenormalize_2_DenormalizeOut", false);
						start_Hash.put("tDenormalize_2_DenormalizeOut",
								System.currentTimeMillis());

						currentVirtualComponent = "tDenormalize_2";

						currentComponent = "tDenormalize_2_DenormalizeOut";

						int tos_count_tDenormalize_2_DenormalizeOut = 0;

						class DenormalizeStructtDenormalize_2_DenormalizeOut {
							StringBuilder string = new StringBuilder();
						}
						DenormalizeStructtDenormalize_2_DenormalizeOut denormalize_result_tDenormalize_2_DenormalizeOut = null;
						java.util.Map<Document, DenormalizeStructtDenormalize_2_DenormalizeOut> hash_body_tDenormalize_2_DenormalizeOut = new java.util.HashMap<Document, DenormalizeStructtDenormalize_2_DenormalizeOut>();

						/**
						 * [tDenormalize_2_DenormalizeOut begin ] stop
						 */

						/**
						 * [tSortRow_1_SortIn begin ] start
						 */

						ok_Hash.put("tSortRow_1_SortIn", false);
						start_Hash.put("tSortRow_1_SortIn",
								System.currentTimeMillis());

						currentVirtualComponent = "tSortRow_1";

						currentComponent = "tSortRow_1_SortIn";

						int tos_count_tSortRow_1_SortIn = 0;

						row42Struct[] array_tSortRow_1_SortIn = (row42Struct[]) globalMap
								.get("tSortRow_1");

						int nb_line_tSortRow_1_SortIn = 0;

						row42Struct current_tSortRow_1_SortIn = null;

						for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
							current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
							row21.body = current_tSortRow_1_SortIn.body;
							row21.string = current_tSortRow_1_SortIn.string;
							// increase number of line sorted
							nb_line_tSortRow_1_SortIn++;

							/**
							 * [tSortRow_1_SortIn begin ] stop
							 */
							/**
							 * [tSortRow_1_SortIn main ] start
							 */

							currentVirtualComponent = "tSortRow_1";

							currentComponent = "tSortRow_1_SortIn";

							tos_count_tSortRow_1_SortIn++;

							/**
							 * [tSortRow_1_SortIn main ] stop
							 */

							/**
							 * [tDenormalize_2_DenormalizeOut main ] start
							 */

							currentVirtualComponent = "tDenormalize_2";

							currentComponent = "tDenormalize_2_DenormalizeOut";

							if (hash_body_tDenormalize_2_DenormalizeOut
									.containsKey(row21.body)) {
								denormalize_result_tDenormalize_2_DenormalizeOut = hash_body_tDenormalize_2_DenormalizeOut
										.get(row21.body);
								denormalize_result_tDenormalize_2_DenormalizeOut.string
										.append("\n").append(row21.string);

							} else {
								denormalize_result_tDenormalize_2_DenormalizeOut = new DenormalizeStructtDenormalize_2_DenormalizeOut();
								denormalize_result_tDenormalize_2_DenormalizeOut.string
										.append(row21.string);

								hash_body_tDenormalize_2_DenormalizeOut
										.put(row21.body,
												denormalize_result_tDenormalize_2_DenormalizeOut);
							}

							tos_count_tDenormalize_2_DenormalizeOut++;

							/**
							 * [tDenormalize_2_DenormalizeOut main ] stop
							 */

							/**
							 * [tSortRow_1_SortIn end ] start
							 */

							currentVirtualComponent = "tSortRow_1";

							currentComponent = "tSortRow_1_SortIn";

						}

						globalMap.put("tSortRow_1_SortIn_NB_LINE",
								nb_line_tSortRow_1_SortIn);

						ok_Hash.put("tSortRow_1_SortIn", true);
						end_Hash.put("tSortRow_1_SortIn",
								System.currentTimeMillis());

						/**
						 * [tSortRow_1_SortIn end ] stop
						 */

						/**
						 * [tDenormalize_2_DenormalizeOut end ] start
						 */

						currentVirtualComponent = "tDenormalize_2";

						currentComponent = "tDenormalize_2_DenormalizeOut";

						java.util.List<OnRowsEndStructtDenormalize_2> result_list_tDenormalize_2_DenormalizeOut = new java.util.ArrayList<OnRowsEndStructtDenormalize_2>();
						if (denormalize_result_tDenormalize_2_DenormalizeOut != null) {
							// generate result begin
							java.util.Iterator<Document> body_iterator_tDenormalize_2_DenormalizeOut = hash_body_tDenormalize_2_DenormalizeOut
									.keySet().iterator();

							while (body_iterator_tDenormalize_2_DenormalizeOut
									.hasNext()) {

								Document key_body_tDenormalize_2_DenormalizeOut = body_iterator_tDenormalize_2_DenormalizeOut
										.next();

								denormalize_result_tDenormalize_2_DenormalizeOut = hash_body_tDenormalize_2_DenormalizeOut
										.get(key_body_tDenormalize_2_DenormalizeOut);

								OnRowsEndStructtDenormalize_2 denormalize_row_tDenormalize_2_DenormalizeOut = new OnRowsEndStructtDenormalize_2();

								denormalize_row_tDenormalize_2_DenormalizeOut.body = key_body_tDenormalize_2_DenormalizeOut;
								denormalize_row_tDenormalize_2_DenormalizeOut.string = denormalize_result_tDenormalize_2_DenormalizeOut.string
										.toString();

								// in the deepest end

								result_list_tDenormalize_2_DenormalizeOut
										.add(denormalize_row_tDenormalize_2_DenormalizeOut);

							}

						}
						// generate result end
						globalMap.put("tDenormalize_2",
								result_list_tDenormalize_2_DenormalizeOut);
						globalMap.put("tDenormalize_2_DenormalizeOut_NB_LINE",
								result_list_tDenormalize_2_DenormalizeOut
										.size());

						ok_Hash.put("tDenormalize_2_DenormalizeOut", true);
						end_Hash.put("tDenormalize_2_DenormalizeOut",
								System.currentTimeMillis());

						/**
						 * [tDenormalize_2_DenormalizeOut end ] stop
						 */

						/**
						 * [tRESTResponse_3 begin ] start
						 */

						ok_Hash.put("tRESTResponse_3", false);
						start_Hash.put("tRESTResponse_3",
								System.currentTimeMillis());

						currentComponent = "tRESTResponse_3";

						int tos_count_tRESTResponse_3 = 0;

						/**
						 * [tRESTResponse_3 begin ] stop
						 */

						/**
						 * [tJavaRow_4 begin ] start
						 */

						ok_Hash.put("tJavaRow_4", false);
						start_Hash
								.put("tJavaRow_4", System.currentTimeMillis());

						currentComponent = "tJavaRow_4";

						int tos_count_tJavaRow_4 = 0;

						int nb_line_tJavaRow_4 = 0;

						/**
						 * [tJavaRow_4 begin ] stop
						 */

						/**
						 * [tDenormalize_2_ArrayIn begin ] start
						 */

						ok_Hash.put("tDenormalize_2_ArrayIn", false);
						start_Hash.put("tDenormalize_2_ArrayIn",
								System.currentTimeMillis());

						currentVirtualComponent = "tDenormalize_2";

						currentComponent = "tDenormalize_2_ArrayIn";

						int tos_count_tDenormalize_2_ArrayIn = 0;

						int nb_line_tDenormalize_2_ArrayIn = 0;
						java.util.List<OnRowsEndStructtDenormalize_2> list_tDenormalize_2_ArrayIn = (java.util.List<OnRowsEndStructtDenormalize_2>) globalMap
								.get("tDenormalize_2");
						if (list_tDenormalize_2_ArrayIn == null) {
							list_tDenormalize_2_ArrayIn = new java.util.ArrayList<OnRowsEndStructtDenormalize_2>();
						}
						for (OnRowsEndStructtDenormalize_2 row_tDenormalize_2_ArrayIn : list_tDenormalize_2_ArrayIn) {

							row17.body = row_tDenormalize_2_ArrayIn.body;

							row17.string = row_tDenormalize_2_ArrayIn.string;

							/**
							 * [tDenormalize_2_ArrayIn begin ] stop
							 */
							/**
							 * [tDenormalize_2_ArrayIn main ] start
							 */

							currentVirtualComponent = "tDenormalize_2";

							currentComponent = "tDenormalize_2_ArrayIn";

							tos_count_tDenormalize_2_ArrayIn++;

							/**
							 * [tDenormalize_2_ArrayIn main ] stop
							 */

							/**
							 * [tJavaRow_4 main ] start
							 */

							currentComponent = "tJavaRow_4";

							// Code généré selon le schémas d'entrée et de
							// sortie
							row19.body = row17.body;
							row19.string = "<html><head><style>p {margin:0 0 8px 0;} .label { color:grey; font-style:italic; font-size:80%;text-decoration:none;} a {font-weight:bold;color: green;} a:link {text-decoration:none;} a:visited {text-decoration:none;color: green;} a:hover {text-decoration:underline;color: green;} a:active {text-decoration:underline;color: green;} h1 {margin-left:3cm; color: blue;margin-bottom:15px}</style></head> <body><h1>Bio2RDF.org example pages</h1>"
									+ row17.string + "</body></html>";

							nb_line_tJavaRow_4++;

							tos_count_tJavaRow_4++;

							/**
							 * [tJavaRow_4 main ] stop
							 */

							/**
							 * [tRESTResponse_3 main ] start
							 */

							currentComponent = "tRESTResponse_3";

							if (globalMap.containsKey("restResponse")) {
								throw new RuntimeException(
										"Rest response already sent.");
							} else if (!globalMap.containsKey("restRequest")) {
								throw new RuntimeException(
										"Not received rest request yet.");
							} else {
								Integer restProviderStatusCode_tRESTResponse_3 = 200;

								Object restProviderResponse_tRESTResponse_3 = null;
								restProviderResponse_tRESTResponse_3 = row19.string;
								if (null != row19.body) {
									restProviderResponse_tRESTResponse_3 = row19.body
											.getDocument();
								}

								java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_3 = new java.util.TreeMap<String, String>(
										String.CASE_INSENSITIVE_ORDER);
								restProviderResponseHeaders_tRESTResponse_3
										.put("Content-Type", "text/html");

								java.util.Map<String, Object> restResponse_tRESTResponse_3 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_3.put("BODY",
										restProviderResponse_tRESTResponse_3);
								restResponse_tRESTResponse_3.put("STATUS",
										restProviderStatusCode_tRESTResponse_3);
								restResponse_tRESTResponse_3
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_3);
								restResponse_tRESTResponse_3.put(
										"drop.json.root.element",
										Boolean.valueOf(false));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_3);

							}

							tos_count_tRESTResponse_3++;

							/**
							 * [tRESTResponse_3 main ] stop
							 */

							/**
							 * [tDenormalize_2_ArrayIn end ] start
							 */

							currentVirtualComponent = "tDenormalize_2";

							currentComponent = "tDenormalize_2_ArrayIn";

							nb_line_tDenormalize_2_ArrayIn++;
						}
						globalMap.put("tDenormalize_2_ArrayIn_NB_LINE",
								nb_line_tDenormalize_2_ArrayIn);

						ok_Hash.put("tDenormalize_2_ArrayIn", true);
						end_Hash.put("tDenormalize_2_ArrayIn",
								System.currentTimeMillis());

						/**
						 * [tDenormalize_2_ArrayIn end ] stop
						 */

						/**
						 * [tJavaRow_4 end ] start
						 */

						currentComponent = "tJavaRow_4";

						globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

						ok_Hash.put("tJavaRow_4", true);
						end_Hash.put("tJavaRow_4", System.currentTimeMillis());

						/**
						 * [tJavaRow_4 end ] stop
						 */

						/**
						 * [tRESTResponse_3 end ] start
						 */

						currentComponent = "tRESTResponse_3";

						ok_Hash.put("tRESTResponse_3", true);
						end_Hash.put("tRESTResponse_3",
								System.currentTimeMillis());

						/**
						 * [tRESTResponse_3 end ] stop
						 */

					} // End of branch "test"

					// Start of branch "datasets"
					if (datasets != null) {

						/**
						 * [tFlowToIterate_18 main ] start
						 */

						currentComponent = "tFlowToIterate_18";

						counter_tFlowToIterate_18++;
						globalMap.put("tFlowToIterate_18_CURRENT_ITERATION",
								counter_tFlowToIterate_18);

						tos_count_tFlowToIterate_18++;

						/**
						 * [tFlowToIterate_18 main ] stop
						 */
						NB_ITERATE_tFixedFlowInput_7++;
						iterateLoop++;

						/**
						 * [tRESTResponse_17 begin ] start
						 */

						ok_Hash.put("tRESTResponse_17", false);
						start_Hash.put("tRESTResponse_17",
								System.currentTimeMillis());

						currentComponent = "tRESTResponse_17";

						int tos_count_tRESTResponse_17 = 0;

						/**
						 * [tRESTResponse_17 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_7 begin ] start
						 */

						ok_Hash.put("tFixedFlowInput_7", false);
						start_Hash.put("tFixedFlowInput_7",
								System.currentTimeMillis());

						currentComponent = "tFixedFlowInput_7";

						int tos_count_tFixedFlowInput_7 = 0;

						StringBuilder result_tFixedFlowInput_7 = new StringBuilder();
						result_tFixedFlowInput_7
								.append("PGh0bWwgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiPg0KPGhlYWQ+DQo8bWV0");
						result_tFixedFlowInput_7
								.append("YSBodHRwLWVxdWl2PSJyZWZyZXNoIiBjb250ZW50PSIwOyB1cmw9aHR0cDovL2Rvd25sb2FkLmJp");
						result_tFixedFlowInput_7
								.append("bzJyZGYub3JnL3JlbGVhc2UvMi9yZWxlYXNlLmh0bWwiIC8+IA0KPC9oZWFkPg0KPC9odG1sPg==");
						String originalFileContent_tFixedFlowInput_7 = "";
						try {
							originalFileContent_tFixedFlowInput_7 = new String(
									(new sun.misc.BASE64Decoder()).decodeBuffer(result_tFixedFlowInput_7
											.toString()), utf8Charset);
						} catch (java.lang.Exception e) {
							e.printStackTrace();
						}

						int nb_line_tFixedFlowInput_7 = 0;

						for (int i_tFixedFlowInput_7 = 0; i_tFixedFlowInput_7 < 1; i_tFixedFlowInput_7++) {

							java.io.InputStream ins_tFixedFlowInput_7 = new java.io.ByteArrayInputStream(
									originalFileContent_tFixedFlowInput_7
											.getBytes(utf8Charset));
							org.talend.fileprocess.FileInputDelimited fid_tFixedFlowInput_7 = new org.talend.fileprocess.FileInputDelimited(
									ins_tFixedFlowInput_7, utf8Charset, "&&&",
									"~~~", true, 0, 0, -1, -1, false);

							while (fid_tFixedFlowInput_7.nextRecord()) {
								nb_line_tFixedFlowInput_7++;
								row26 = new row26Struct();

								if (0 < fid_tFixedFlowInput_7
										.getColumnsCountOfCurrentRow()) {
									String colContent = fid_tFixedFlowInput_7
											.get(0);
									row26.string = (colContent == null || colContent
											.length() == 0) ? null : colContent;
								} else {

									row26.string = null;

								}

								/**
								 * [tFixedFlowInput_7 begin ] stop
								 */
								/**
								 * [tFixedFlowInput_7 main ] start
								 */

								currentComponent = "tFixedFlowInput_7";

								tos_count_tFixedFlowInput_7++;

								/**
								 * [tFixedFlowInput_7 main ] stop
								 */

								/**
								 * [tRESTResponse_17 main ] start
								 */

								currentComponent = "tRESTResponse_17";

								if (globalMap.containsKey("restResponse")) {
									throw new RuntimeException(
											"Rest response already sent.");
								} else if (!globalMap
										.containsKey("restRequest")) {
									throw new RuntimeException(
											"Not received rest request yet.");
								} else {
									Integer restProviderStatusCode_tRESTResponse_17 = 200;

									Object restProviderResponse_tRESTResponse_17 = null;
									restProviderResponse_tRESTResponse_17 = row26.string;

									java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_17 = new java.util.TreeMap<String, String>(
											String.CASE_INSENSITIVE_ORDER);

									java.util.Map<String, Object> restResponse_tRESTResponse_17 = new java.util.HashMap<String, Object>();
									restResponse_tRESTResponse_17
											.put("BODY",
													restProviderResponse_tRESTResponse_17);
									restResponse_tRESTResponse_17
											.put("STATUS",
													restProviderStatusCode_tRESTResponse_17);
									restResponse_tRESTResponse_17
											.put("HEADERS",
													restProviderResponseHeaders_tRESTResponse_17);
									restResponse_tRESTResponse_17.put(
											"drop.json.root.element",
											Boolean.valueOf(false));
									globalMap.put("restResponse",
											restResponse_tRESTResponse_17);

								}

								tos_count_tRESTResponse_17++;

								/**
								 * [tRESTResponse_17 main ] stop
								 */

								/**
								 * [tFixedFlowInput_7 end ] start
								 */

								currentComponent = "tFixedFlowInput_7";

							}
							fid_tFixedFlowInput_7.close();
						}

						globalMap.put("tFixedFlowInput_7_NB_LINE",
								nb_line_tFixedFlowInput_7);

						ok_Hash.put("tFixedFlowInput_7", true);
						end_Hash.put("tFixedFlowInput_7",
								System.currentTimeMillis());

						/**
						 * [tFixedFlowInput_7 end ] stop
						 */

						/**
						 * [tRESTResponse_17 end ] start
						 */

						currentComponent = "tRESTResponse_17";

						ok_Hash.put("tRESTResponse_17", true);
						end_Hash.put("tRESTResponse_17",
								System.currentTimeMillis());

						/**
						 * [tRESTResponse_17 end ] stop
						 */

					} // End of branch "datasets"

					// Start of branch "method_nsid"
					if (method_nsid != null) {

						/**
						 * [tLogRow_30 main ] start
						 */

						currentComponent = "tLogRow_30";

						// /////////////////////

						strBuffer_tLogRow_30 = new StringBuilder();

						if (method_nsid.method != null) { //

							strBuffer_tLogRow_30.append(String
									.valueOf(method_nsid.method));

						} //

						strBuffer_tLogRow_30.append(" |30| ");

						if (method_nsid.format != null) { //

							strBuffer_tLogRow_30.append(String
									.valueOf(method_nsid.format));

						} //

						strBuffer_tLogRow_30.append(" |30| ");

						if (method_nsid.ns != null) { //

							strBuffer_tLogRow_30.append(String
									.valueOf(method_nsid.ns));

						} //

						strBuffer_tLogRow_30.append(" |30| ");

						if (method_nsid.id != null) { //

							strBuffer_tLogRow_30.append(String
									.valueOf(method_nsid.id));

						} //

						strBuffer_tLogRow_30.append(" |30| ");

						if (method_nsid.namespace != null) { //

							strBuffer_tLogRow_30.append(String
									.valueOf(method_nsid.namespace));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_30 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_30 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_30);
						}

						consoleOut_tLogRow_30.println(strBuffer_tLogRow_30
								.toString());
						consoleOut_tLogRow_30.flush();
						nb_line_tLogRow_30++;
						// ////

						// ////

						// /////////////////////

						row63 = method_nsid;

						tos_count_tLogRow_30++;

						/**
						 * [tLogRow_30 main ] stop
						 */

						/**
						 * [tJavaRow_18 main ] start
						 */

						currentComponent = "tJavaRow_18";

						context.ns = row63.ns;
						context.id = row63.id;
						context.namespace = row63.namespace;
						context.request = BioUtil.restMethod(row63.method);

						context.format = BioUtil.restFormat(row63.format);

						nb_line_tJavaRow_18++;

						tos_count_tJavaRow_18++;

						/**
						 * [tJavaRow_18 main ] stop
						 */

						/**
						 * [tFlowToIterate_29 main ] start
						 */

						currentComponent = "tFlowToIterate_29";

						globalMap.put("row58.namespace", row58.namespace);
						nb_line_tFlowToIterate_29++;
						globalMap.put("row58.format", row58.format);
						nb_line_tFlowToIterate_29++;
						globalMap.put("row58.ns", row58.ns);
						nb_line_tFlowToIterate_29++;
						globalMap.put("row58.id", row58.id);
						nb_line_tFlowToIterate_29++;
						globalMap.put("row58.query", row58.query);
						nb_line_tFlowToIterate_29++;
						globalMap.put("row58.request", row58.request);
						nb_line_tFlowToIterate_29++;

						counter_tFlowToIterate_29++;
						globalMap.put("tFlowToIterate_29_CURRENT_ITERATION",
								counter_tFlowToIterate_29);

						tos_count_tFlowToIterate_29++;

						/**
						 * [tFlowToIterate_29 main ] stop
						 */
						NB_ITERATE_tRunJob_10++;
						iterateLoop++;

						/**
						 * [tRESTResponse_16 begin ] start
						 */

						ok_Hash.put("tRESTResponse_16", false);
						start_Hash.put("tRESTResponse_16",
								System.currentTimeMillis());

						currentComponent = "tRESTResponse_16";

						int tos_count_tRESTResponse_16 = 0;

						/**
						 * [tRESTResponse_16 begin ] stop
						 */

						/**
						 * [tRunJob_10 begin ] start
						 */

						ok_Hash.put("tRunJob_10", false);
						start_Hash
								.put("tRunJob_10", System.currentTimeMillis());

						currentComponent = "tRunJob_10";

						int tos_count_tRunJob_10 = 0;

						/**
						 * [tRunJob_10 begin ] stop
						 */
						/**
						 * [tRunJob_10 main ] start
						 */

						currentComponent = "tRunJob_10";

						java.util.List<String> paraList_tRunJob_10 = new java.util.ArrayList<String>();

						paraList_tRunJob_10.add("--father_pid=" + pid);

						paraList_tRunJob_10.add("--root_pid=" + rootPid);

						paraList_tRunJob_10.add("--father_node=tRunJob_10");

						paraList_tRunJob_10.add("--context=Default");

						// for feature:10589

						paraList_tRunJob_10.add("--stat_port=" + portStats);

						if (resuming_logs_dir_path != null) {
							paraList_tRunJob_10.add("--resuming_logs_dir_path="
									+ resuming_logs_dir_path);
						}
						String childResumePath_tRunJob_10 = ResumeUtil
								.getChildJobCheckPointPath(resuming_checkpoint_path);
						String tRunJobName_tRunJob_10 = ResumeUtil
								.getRighttRunJob(resuming_checkpoint_path);
						if ("tRunJob_10".equals(tRunJobName_tRunJob_10)
								&& childResumePath_tRunJob_10 != null) {
							paraList_tRunJob_10
									.add("--resuming_checkpoint_path="
											+ ResumeUtil
													.getChildJobCheckPointPath(resuming_checkpoint_path));
						}
						paraList_tRunJob_10.add("--parent_part_launcher=JOB:"
								+ jobName + "/NODE:tRunJob_10");

						java.util.Map<String, Object> parentContextMap_tRunJob_10 = new java.util.HashMap<String, Object>();

						context.synchronizeContext();
						java.util.Enumeration<?> propertyNames_tRunJob_10 = context
								.propertyNames();
						while (propertyNames_tRunJob_10.hasMoreElements()) {
							String key_tRunJob_10 = (String) propertyNames_tRunJob_10
									.nextElement();
							Object value_tRunJob_10 = (Object) context
									.get(key_tRunJob_10);
							paraList_tRunJob_10.add("--context_param "
									+ key_tRunJob_10 + "=" + value_tRunJob_10);
						}

						parentContextMap_tRunJob_10.put("pageTest",
								context.pageTest);

						parentContextMap_tRunJob_10.put("request",
								context.request);

						parentContextMap_tRunJob_10.put("message",
								context.message);

						parentContextMap_tRunJob_10.put("ns", context.ns);

						parentContextMap_tRunJob_10.put("id", context.id);

						parentContextMap_tRunJob_10.put("format",
								context.format);

						parentContextMap_tRunJob_10.put("localhost",
								context.localhost);

						parentContextMap_tRunJob_10.put("sparql",
								context.sparql);

						parentContextMap_tRunJob_10.put("database_endpoint",
								context.database_endpoint);

						parentContextMap_tRunJob_10.put("query", context.query);

						parentContextMap_tRunJob_10.put("debug", context.debug);

						parentContextMap_tRunJob_10.put("namespace",
								context.namespace);

						parentContextMap_tRunJob_10.put("database_endpoint1",
								context.database_endpoint1);

						parentContextMap_tRunJob_10.put("localhost1",
								context.localhost1);

						parentContextMap_tRunJob_10.put("localhost2",
								context.localhost2);

						parentContextMap_tRunJob_10.put("uri", context.uri);

						parentContextMap_tRunJob_10.put("parm1", context.parm1);

						parentContextMap_tRunJob_10.put("parm2", context.parm2);

						parentContextMap_tRunJob_10.put("parm3", context.parm3);

						parentContextMap_tRunJob_10.put("restUrl",
								context.restUrl);

						Object obj_tRunJob_10 = null;

						bio2rdf.bio2rdf_rest_subjob_1_7.bio2rdf_rest_subjob childJob_tRunJob_10 = new bio2rdf.bio2rdf_rest_subjob_1_7.bio2rdf_rest_subjob();
						// pass DataSources
						java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_10 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						if (null != talendDataSources_tRunJob_10) {
							java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_10 = new java.util.HashMap<String, javax.sql.DataSource>();
							for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_10 : talendDataSources_tRunJob_10
									.entrySet()) {
								dataSources_tRunJob_10.put(
										talendDataSourceEntry_tRunJob_10
												.getKey(),
										talendDataSourceEntry_tRunJob_10
												.getValue().getRawDataSource());
							}
							childJob_tRunJob_10
									.setDataSources(dataSources_tRunJob_10);
						}

						childJob_tRunJob_10.parentContextMap = parentContextMap_tRunJob_10;

						String[][] childReturn_tRunJob_10 = childJob_tRunJob_10
								.runJob((String[]) paraList_tRunJob_10
										.toArray(new String[paraList_tRunJob_10
												.size()]));

						errorCode = childJob_tRunJob_10.getErrorCode();

						if (childJob_tRunJob_10.getErrorCode() == null) {
							globalMap.put(
									"tRunJob_10_CHILD_RETURN_CODE",
									childJob_tRunJob_10.getStatus() != null
											&& ("failure")
													.equals(childJob_tRunJob_10
															.getStatus()) ? 1
											: 0);
						} else {
							globalMap.put("tRunJob_10_CHILD_RETURN_CODE",
									childJob_tRunJob_10.getErrorCode());
						}
						if (childJob_tRunJob_10.getExceptionStackTrace() != null) {
							globalMap.put(
									"tRunJob_10_CHILD_EXCEPTION_STACKTRACE",
									childJob_tRunJob_10
											.getExceptionStackTrace());
						}

						if (childJob_tRunJob_10.getErrorCode() != null
								|| ("failure").equals(childJob_tRunJob_10
										.getStatus())) {

							throw new RuntimeException(
									"Child job running failed");
						}

						for (String[] item_tRunJob_10 : childReturn_tRunJob_10) {
							if (childJob_tRunJob_10.hastBufferOutputComponent() || true) {

								if (0 < item_tRunJob_10.length) {

									row60.string = item_tRunJob_10[0];

								} else {
									row60.string = null;
								}

								if (1 < item_tRunJob_10.length) {

									row60.body = ParserUtils
											.parseTo_Document(item_tRunJob_10[1]);

								} else {
									row60.body = null;
								}

							}

							tos_count_tRunJob_10++;

							/**
							 * [tRunJob_10 main ] stop
							 */

							/**
							 * [tRESTResponse_16 main ] start
							 */

							currentComponent = "tRESTResponse_16";

							if (globalMap.containsKey("restResponse")) {
								throw new RuntimeException(
										"Rest response already sent.");
							} else if (!globalMap.containsKey("restRequest")) {
								throw new RuntimeException(
										"Not received rest request yet.");
							} else {
								Integer restProviderStatusCode_tRESTResponse_16 = 200;

								Object restProviderResponse_tRESTResponse_16 = null;
								restProviderResponse_tRESTResponse_16 = row60.string;
								if (null != row60.body) {
									restProviderResponse_tRESTResponse_16 = row60.body
											.getDocument();
								}

								java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_16 = new java.util.TreeMap<String, String>(
										String.CASE_INSENSITIVE_ORDER);
								restProviderResponseHeaders_tRESTResponse_16
										.put("Content-Type", context.format);

								java.util.Map<String, Object> restResponse_tRESTResponse_16 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_16.put("BODY",
										restProviderResponse_tRESTResponse_16);
								restResponse_tRESTResponse_16
										.put("STATUS",
												restProviderStatusCode_tRESTResponse_16);
								restResponse_tRESTResponse_16
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_16);
								restResponse_tRESTResponse_16.put(
										"drop.json.root.element",
										Boolean.valueOf(false));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_16);

							}

							tos_count_tRESTResponse_16++;

							/**
							 * [tRESTResponse_16 main ] stop
							 */

						} // C_01

						/**
						 * [tRunJob_10 end ] start
						 */

						currentComponent = "tRunJob_10";

						ok_Hash.put("tRunJob_10", true);
						end_Hash.put("tRunJob_10", System.currentTimeMillis());

						/**
						 * [tRunJob_10 end ] stop
						 */

						/**
						 * [tRESTResponse_16 end ] start
						 */

						currentComponent = "tRESTResponse_16";

						ok_Hash.put("tRESTResponse_16", true);
						end_Hash.put("tRESTResponse_16",
								System.currentTimeMillis());

						/**
						 * [tRESTResponse_16 end ] stop
						 */

					} // End of branch "method_nsid"

					// Start of branch "method_uri"
					if (method_uri != null) {

						/**
						 * [tLogRow_28 main ] start
						 */

						currentComponent = "tLogRow_28";

						// /////////////////////

						strBuffer_tLogRow_28 = new StringBuilder();

						if (method_uri.uri != null) { //

							strBuffer_tLogRow_28.append(String
									.valueOf(method_uri.uri));

						} //

						strBuffer_tLogRow_28.append(" |28| ");

						if (method_uri.namespace != null) { //

							strBuffer_tLogRow_28.append(String
									.valueOf(method_uri.namespace));

						} //

						strBuffer_tLogRow_28.append(" |28| ");

						if (method_uri.method != null) { //

							strBuffer_tLogRow_28.append(String
									.valueOf(method_uri.method));

						} //

						strBuffer_tLogRow_28.append(" |28| ");

						if (method_uri.format != null) { //

							strBuffer_tLogRow_28.append(String
									.valueOf(method_uri.format));

						} //

						strBuffer_tLogRow_28.append(" |28| ");

						if (method_uri.query != null) { //

							strBuffer_tLogRow_28.append(String
									.valueOf(method_uri.query));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_28 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_28 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_28);
						}

						consoleOut_tLogRow_28.println(strBuffer_tLogRow_28
								.toString());
						consoleOut_tLogRow_28.flush();
						nb_line_tLogRow_28++;
						// ////

						// ////

						// /////////////////////

						row66 = method_uri;

						tos_count_tLogRow_28++;

						/**
						 * [tLogRow_28 main ] stop
						 */

						/**
						 * [tJavaRow_17 main ] start
						 */

						currentComponent = "tJavaRow_17";

						context.namespace = row66.namespace;
						context.format = BioUtil.restFormat(row66.format);
						context.uri = row66.uri;
						context.query = row66.query;

						if (row66.uri != null) {
							context.request = BioUtil.restMethod(row66.method)
									+ "_uri";
						} else {
							context.request = BioUtil.restMethod(row66.method);
						}

						nb_line_tJavaRow_17++;

						tos_count_tJavaRow_17++;

						/**
						 * [tJavaRow_17 main ] stop
						 */

						/**
						 * [tFlowToIterate_26 main ] start
						 */

						currentComponent = "tFlowToIterate_26";

						globalMap.put("row67.uri", row67.uri);
						nb_line_tFlowToIterate_26++;
						globalMap.put("row67.query", row67.query);
						nb_line_tFlowToIterate_26++;
						globalMap.put("row67.ns", row67.ns);
						nb_line_tFlowToIterate_26++;
						globalMap.put("row67.id", row67.id);
						nb_line_tFlowToIterate_26++;
						globalMap.put("row67.request", row67.request);
						nb_line_tFlowToIterate_26++;
						globalMap.put("row67.namespace", row67.namespace);
						nb_line_tFlowToIterate_26++;
						globalMap.put("row67.format", row67.format);
						nb_line_tFlowToIterate_26++;

						counter_tFlowToIterate_26++;
						globalMap.put("tFlowToIterate_26_CURRENT_ITERATION",
								counter_tFlowToIterate_26);

						tos_count_tFlowToIterate_26++;

						/**
						 * [tFlowToIterate_26 main ] stop
						 */
						NB_ITERATE_tRunJob_12++;
						iterateLoop++;

						/**
						 * [tRESTResponse_20 begin ] start
						 */

						ok_Hash.put("tRESTResponse_20", false);
						start_Hash.put("tRESTResponse_20",
								System.currentTimeMillis());

						currentComponent = "tRESTResponse_20";

						int tos_count_tRESTResponse_20 = 0;

						/**
						 * [tRESTResponse_20 begin ] stop
						 */

						/**
						 * [tRunJob_12 begin ] start
						 */

						ok_Hash.put("tRunJob_12", false);
						start_Hash
								.put("tRunJob_12", System.currentTimeMillis());

						currentComponent = "tRunJob_12";

						int tos_count_tRunJob_12 = 0;

						/**
						 * [tRunJob_12 begin ] stop
						 */
						/**
						 * [tRunJob_12 main ] start
						 */

						currentComponent = "tRunJob_12";

						java.util.List<String> paraList_tRunJob_12 = new java.util.ArrayList<String>();

						paraList_tRunJob_12.add("--father_pid=" + pid);

						paraList_tRunJob_12.add("--root_pid=" + rootPid);

						paraList_tRunJob_12.add("--father_node=tRunJob_12");

						paraList_tRunJob_12.add("--context=Default");

						// for feature:10589

						paraList_tRunJob_12.add("--stat_port=" + portStats);

						if (resuming_logs_dir_path != null) {
							paraList_tRunJob_12.add("--resuming_logs_dir_path="
									+ resuming_logs_dir_path);
						}
						String childResumePath_tRunJob_12 = ResumeUtil
								.getChildJobCheckPointPath(resuming_checkpoint_path);
						String tRunJobName_tRunJob_12 = ResumeUtil
								.getRighttRunJob(resuming_checkpoint_path);
						if ("tRunJob_12".equals(tRunJobName_tRunJob_12)
								&& childResumePath_tRunJob_12 != null) {
							paraList_tRunJob_12
									.add("--resuming_checkpoint_path="
											+ ResumeUtil
													.getChildJobCheckPointPath(resuming_checkpoint_path));
						}
						paraList_tRunJob_12.add("--parent_part_launcher=JOB:"
								+ jobName + "/NODE:tRunJob_12");

						java.util.Map<String, Object> parentContextMap_tRunJob_12 = new java.util.HashMap<String, Object>();

						context.synchronizeContext();
						java.util.Enumeration<?> propertyNames_tRunJob_12 = context
								.propertyNames();
						while (propertyNames_tRunJob_12.hasMoreElements()) {
							String key_tRunJob_12 = (String) propertyNames_tRunJob_12
									.nextElement();
							Object value_tRunJob_12 = (Object) context
									.get(key_tRunJob_12);
							paraList_tRunJob_12.add("--context_param "
									+ key_tRunJob_12 + "=" + value_tRunJob_12);
						}

						parentContextMap_tRunJob_12.put("pageTest",
								context.pageTest);

						parentContextMap_tRunJob_12.put("request",
								context.request);

						parentContextMap_tRunJob_12.put("message",
								context.message);

						parentContextMap_tRunJob_12.put("ns", context.ns);

						parentContextMap_tRunJob_12.put("id", context.id);

						parentContextMap_tRunJob_12.put("format",
								context.format);

						parentContextMap_tRunJob_12.put("localhost",
								context.localhost);

						parentContextMap_tRunJob_12.put("sparql",
								context.sparql);

						parentContextMap_tRunJob_12.put("database_endpoint",
								context.database_endpoint);

						parentContextMap_tRunJob_12.put("query", context.query);

						parentContextMap_tRunJob_12.put("debug", context.debug);

						parentContextMap_tRunJob_12.put("namespace",
								context.namespace);

						parentContextMap_tRunJob_12.put("database_endpoint1",
								context.database_endpoint1);

						parentContextMap_tRunJob_12.put("localhost1",
								context.localhost1);

						parentContextMap_tRunJob_12.put("localhost2",
								context.localhost2);

						parentContextMap_tRunJob_12.put("uri", context.uri);

						parentContextMap_tRunJob_12.put("parm1", context.parm1);

						parentContextMap_tRunJob_12.put("parm2", context.parm2);

						parentContextMap_tRunJob_12.put("parm3", context.parm3);

						parentContextMap_tRunJob_12.put("restUrl",
								context.restUrl);

						Object obj_tRunJob_12 = null;

						bio2rdf.bio2rdf_rest_subjob_1_7.bio2rdf_rest_subjob childJob_tRunJob_12 = new bio2rdf.bio2rdf_rest_subjob_1_7.bio2rdf_rest_subjob();
						// pass DataSources
						java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_12 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						if (null != talendDataSources_tRunJob_12) {
							java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_12 = new java.util.HashMap<String, javax.sql.DataSource>();
							for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_12 : talendDataSources_tRunJob_12
									.entrySet()) {
								dataSources_tRunJob_12.put(
										talendDataSourceEntry_tRunJob_12
												.getKey(),
										talendDataSourceEntry_tRunJob_12
												.getValue().getRawDataSource());
							}
							childJob_tRunJob_12
									.setDataSources(dataSources_tRunJob_12);
						}

						childJob_tRunJob_12.parentContextMap = parentContextMap_tRunJob_12;

						String[][] childReturn_tRunJob_12 = childJob_tRunJob_12
								.runJob((String[]) paraList_tRunJob_12
										.toArray(new String[paraList_tRunJob_12
												.size()]));

						errorCode = childJob_tRunJob_12.getErrorCode();

						if (childJob_tRunJob_12.getErrorCode() == null) {
							globalMap.put(
									"tRunJob_12_CHILD_RETURN_CODE",
									childJob_tRunJob_12.getStatus() != null
											&& ("failure")
													.equals(childJob_tRunJob_12
															.getStatus()) ? 1
											: 0);
						} else {
							globalMap.put("tRunJob_12_CHILD_RETURN_CODE",
									childJob_tRunJob_12.getErrorCode());
						}
						if (childJob_tRunJob_12.getExceptionStackTrace() != null) {
							globalMap.put(
									"tRunJob_12_CHILD_EXCEPTION_STACKTRACE",
									childJob_tRunJob_12
											.getExceptionStackTrace());
						}

						if (childJob_tRunJob_12.getErrorCode() != null
								|| ("failure").equals(childJob_tRunJob_12
										.getStatus())) {

							throw new RuntimeException(
									"Child job running failed");
						}

						for (String[] item_tRunJob_12 : childReturn_tRunJob_12) {
							if (childJob_tRunJob_12.hastBufferOutputComponent() || true) {

								if (0 < item_tRunJob_12.length) {

									row68.string = item_tRunJob_12[0];

								} else {
									row68.string = null;
								}

								if (1 < item_tRunJob_12.length) {

									row68.body = ParserUtils
											.parseTo_Document(item_tRunJob_12[1]);

								} else {
									row68.body = null;
								}

							}

							tos_count_tRunJob_12++;

							/**
							 * [tRunJob_12 main ] stop
							 */

							/**
							 * [tRESTResponse_20 main ] start
							 */

							currentComponent = "tRESTResponse_20";

							if (globalMap.containsKey("restResponse")) {
								throw new RuntimeException(
										"Rest response already sent.");
							} else if (!globalMap.containsKey("restRequest")) {
								throw new RuntimeException(
										"Not received rest request yet.");
							} else {
								Integer restProviderStatusCode_tRESTResponse_20 = 200;

								Object restProviderResponse_tRESTResponse_20 = null;
								restProviderResponse_tRESTResponse_20 = row68.string;
								if (null != row68.body) {
									restProviderResponse_tRESTResponse_20 = row68.body
											.getDocument();
								}

								java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_20 = new java.util.TreeMap<String, String>(
										String.CASE_INSENSITIVE_ORDER);
								restProviderResponseHeaders_tRESTResponse_20
										.put("Content-Type", context.format);

								java.util.Map<String, Object> restResponse_tRESTResponse_20 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_20.put("BODY",
										restProviderResponse_tRESTResponse_20);
								restResponse_tRESTResponse_20
										.put("STATUS",
												restProviderStatusCode_tRESTResponse_20);
								restResponse_tRESTResponse_20
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_20);
								restResponse_tRESTResponse_20.put(
										"drop.json.root.element",
										Boolean.valueOf(false));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_20);

							}

							tos_count_tRESTResponse_20++;

							/**
							 * [tRESTResponse_20 main ] stop
							 */

						} // C_01

						/**
						 * [tRunJob_12 end ] start
						 */

						currentComponent = "tRunJob_12";

						ok_Hash.put("tRunJob_12", true);
						end_Hash.put("tRunJob_12", System.currentTimeMillis());

						/**
						 * [tRunJob_12 end ] stop
						 */

						/**
						 * [tRESTResponse_20 end ] start
						 */

						currentComponent = "tRESTResponse_20";

						ok_Hash.put("tRESTResponse_20", true);
						end_Hash.put("tRESTResponse_20",
								System.currentTimeMillis());

						/**
						 * [tRESTResponse_20 end ] stop
						 */

					} // End of branch "method_uri"

					// Start of branch "method_query"
					if (method_query != null) {

						/**
						 * [tLogRow_31 main ] start
						 */

						currentComponent = "tLogRow_31";

						// /////////////////////

						strBuffer_tLogRow_31 = new StringBuilder();

						if (method_query.namespace != null) { //

							strBuffer_tLogRow_31.append(String
									.valueOf(method_query.namespace));

						} //

						strBuffer_tLogRow_31.append(" |31| ");

						if (method_query.method != null) { //

							strBuffer_tLogRow_31.append(String
									.valueOf(method_query.method));

						} //

						strBuffer_tLogRow_31.append(" |31| ");

						if (method_query.format != null) { //

							strBuffer_tLogRow_31.append(String
									.valueOf(method_query.format));

						} //

						strBuffer_tLogRow_31.append(" |31| ");

						if (method_query.query != null) { //

							strBuffer_tLogRow_31.append(String
									.valueOf(method_query.query));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_31 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_31 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_31);
						}

						consoleOut_tLogRow_31.println(strBuffer_tLogRow_31
								.toString());
						consoleOut_tLogRow_31.flush();
						nb_line_tLogRow_31++;
						// ////

						// ////

						// /////////////////////

						row64 = method_query;

						tos_count_tLogRow_31++;

						/**
						 * [tLogRow_31 main ] stop
						 */

						/**
						 * [tJavaRow_16 main ] start
						 */

						currentComponent = "tJavaRow_16";

						context.namespace = row64.namespace;
						context.query = row64.query;
						context.request = BioUtil.restMethod(row64.method);

						context.format = BioUtil.restFormat(row64.format);

						nb_line_tJavaRow_16++;

						tos_count_tJavaRow_16++;

						/**
						 * [tJavaRow_16 main ] stop
						 */

						/**
						 * [tFlowToIterate_25 main ] start
						 */

						currentComponent = "tFlowToIterate_25";

						globalMap.put("row57.namespace", row57.namespace);
						nb_line_tFlowToIterate_25++;
						globalMap.put("row57.format", row57.format);
						nb_line_tFlowToIterate_25++;
						globalMap.put("row57.ns", row57.ns);
						nb_line_tFlowToIterate_25++;
						globalMap.put("row57.id", row57.id);
						nb_line_tFlowToIterate_25++;
						globalMap.put("row57.query", row57.query);
						nb_line_tFlowToIterate_25++;
						globalMap.put("row57.request", row57.request);
						nb_line_tFlowToIterate_25++;

						counter_tFlowToIterate_25++;
						globalMap.put("tFlowToIterate_25_CURRENT_ITERATION",
								counter_tFlowToIterate_25);

						tos_count_tFlowToIterate_25++;

						/**
						 * [tFlowToIterate_25 main ] stop
						 */
						NB_ITERATE_tRunJob_9++;
						iterateLoop++;

						/**
						 * [tRESTResponse_15 begin ] start
						 */

						ok_Hash.put("tRESTResponse_15", false);
						start_Hash.put("tRESTResponse_15",
								System.currentTimeMillis());

						currentComponent = "tRESTResponse_15";

						int tos_count_tRESTResponse_15 = 0;

						/**
						 * [tRESTResponse_15 begin ] stop
						 */

						/**
						 * [tRunJob_9 begin ] start
						 */

						ok_Hash.put("tRunJob_9", false);
						start_Hash.put("tRunJob_9", System.currentTimeMillis());

						currentComponent = "tRunJob_9";

						int tos_count_tRunJob_9 = 0;

						/**
						 * [tRunJob_9 begin ] stop
						 */
						/**
						 * [tRunJob_9 main ] start
						 */

						currentComponent = "tRunJob_9";

						java.util.List<String> paraList_tRunJob_9 = new java.util.ArrayList<String>();

						paraList_tRunJob_9.add("--father_pid=" + pid);

						paraList_tRunJob_9.add("--root_pid=" + rootPid);

						paraList_tRunJob_9.add("--father_node=tRunJob_9");

						paraList_tRunJob_9.add("--context=Default");

						// for feature:10589

						paraList_tRunJob_9.add("--stat_port=" + portStats);

						if (resuming_logs_dir_path != null) {
							paraList_tRunJob_9.add("--resuming_logs_dir_path="
									+ resuming_logs_dir_path);
						}
						String childResumePath_tRunJob_9 = ResumeUtil
								.getChildJobCheckPointPath(resuming_checkpoint_path);
						String tRunJobName_tRunJob_9 = ResumeUtil
								.getRighttRunJob(resuming_checkpoint_path);
						if ("tRunJob_9".equals(tRunJobName_tRunJob_9)
								&& childResumePath_tRunJob_9 != null) {
							paraList_tRunJob_9
									.add("--resuming_checkpoint_path="
											+ ResumeUtil
													.getChildJobCheckPointPath(resuming_checkpoint_path));
						}
						paraList_tRunJob_9.add("--parent_part_launcher=JOB:"
								+ jobName + "/NODE:tRunJob_9");

						java.util.Map<String, Object> parentContextMap_tRunJob_9 = new java.util.HashMap<String, Object>();

						context.synchronizeContext();
						java.util.Enumeration<?> propertyNames_tRunJob_9 = context
								.propertyNames();
						while (propertyNames_tRunJob_9.hasMoreElements()) {
							String key_tRunJob_9 = (String) propertyNames_tRunJob_9
									.nextElement();
							Object value_tRunJob_9 = (Object) context
									.get(key_tRunJob_9);
							paraList_tRunJob_9.add("--context_param "
									+ key_tRunJob_9 + "=" + value_tRunJob_9);
						}

						parentContextMap_tRunJob_9.put("pageTest",
								context.pageTest);

						parentContextMap_tRunJob_9.put("request",
								context.request);

						parentContextMap_tRunJob_9.put("message",
								context.message);

						parentContextMap_tRunJob_9.put("ns", context.ns);

						parentContextMap_tRunJob_9.put("id", context.id);

						parentContextMap_tRunJob_9
								.put("format", context.format);

						parentContextMap_tRunJob_9.put("localhost",
								context.localhost);

						parentContextMap_tRunJob_9
								.put("sparql", context.sparql);

						parentContextMap_tRunJob_9.put("database_endpoint",
								context.database_endpoint);

						parentContextMap_tRunJob_9.put("query", context.query);

						parentContextMap_tRunJob_9.put("debug", context.debug);

						parentContextMap_tRunJob_9.put("namespace",
								context.namespace);

						parentContextMap_tRunJob_9.put("database_endpoint1",
								context.database_endpoint1);

						parentContextMap_tRunJob_9.put("localhost1",
								context.localhost1);

						parentContextMap_tRunJob_9.put("localhost2",
								context.localhost2);

						parentContextMap_tRunJob_9.put("uri", context.uri);

						parentContextMap_tRunJob_9.put("parm1", context.parm1);

						parentContextMap_tRunJob_9.put("parm2", context.parm2);

						parentContextMap_tRunJob_9.put("parm3", context.parm3);

						parentContextMap_tRunJob_9.put("restUrl",
								context.restUrl);

						Object obj_tRunJob_9 = null;

						bio2rdf.bio2rdf_rest_subjob_1_7.bio2rdf_rest_subjob childJob_tRunJob_9 = new bio2rdf.bio2rdf_rest_subjob_1_7.bio2rdf_rest_subjob();
						// pass DataSources
						java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_9 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						if (null != talendDataSources_tRunJob_9) {
							java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_9 = new java.util.HashMap<String, javax.sql.DataSource>();
							for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_9 : talendDataSources_tRunJob_9
									.entrySet()) {
								dataSources_tRunJob_9.put(
										talendDataSourceEntry_tRunJob_9
												.getKey(),
										talendDataSourceEntry_tRunJob_9
												.getValue().getRawDataSource());
							}
							childJob_tRunJob_9
									.setDataSources(dataSources_tRunJob_9);
						}

						childJob_tRunJob_9.parentContextMap = parentContextMap_tRunJob_9;

						String[][] childReturn_tRunJob_9 = childJob_tRunJob_9
								.runJob((String[]) paraList_tRunJob_9
										.toArray(new String[paraList_tRunJob_9
												.size()]));

						errorCode = childJob_tRunJob_9.getErrorCode();

						if (childJob_tRunJob_9.getErrorCode() == null) {
							globalMap.put(
									"tRunJob_9_CHILD_RETURN_CODE",
									childJob_tRunJob_9.getStatus() != null
											&& ("failure")
													.equals(childJob_tRunJob_9
															.getStatus()) ? 1
											: 0);
						} else {
							globalMap.put("tRunJob_9_CHILD_RETURN_CODE",
									childJob_tRunJob_9.getErrorCode());
						}
						if (childJob_tRunJob_9.getExceptionStackTrace() != null) {
							globalMap
									.put("tRunJob_9_CHILD_EXCEPTION_STACKTRACE",
											childJob_tRunJob_9
													.getExceptionStackTrace());
						}

						if (childJob_tRunJob_9.getErrorCode() != null
								|| ("failure").equals(childJob_tRunJob_9
										.getStatus())) {

							throw new RuntimeException(
									"Child job running failed");
						}

						for (String[] item_tRunJob_9 : childReturn_tRunJob_9) {
							if (childJob_tRunJob_9.hastBufferOutputComponent() || true) {

								if (0 < item_tRunJob_9.length) {

									row59.string = item_tRunJob_9[0];

								} else {
									row59.string = null;
								}

								if (1 < item_tRunJob_9.length) {

									row59.body = ParserUtils
											.parseTo_Document(item_tRunJob_9[1]);

								} else {
									row59.body = null;
								}

							}

							tos_count_tRunJob_9++;

							/**
							 * [tRunJob_9 main ] stop
							 */

							/**
							 * [tRESTResponse_15 main ] start
							 */

							currentComponent = "tRESTResponse_15";

							if (globalMap.containsKey("restResponse")) {
								throw new RuntimeException(
										"Rest response already sent.");
							} else if (!globalMap.containsKey("restRequest")) {
								throw new RuntimeException(
										"Not received rest request yet.");
							} else {
								Integer restProviderStatusCode_tRESTResponse_15 = 200;

								Object restProviderResponse_tRESTResponse_15 = null;
								restProviderResponse_tRESTResponse_15 = row59.string;
								if (null != row59.body) {
									restProviderResponse_tRESTResponse_15 = row59.body
											.getDocument();
								}

								java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_15 = new java.util.TreeMap<String, String>(
										String.CASE_INSENSITIVE_ORDER);
								restProviderResponseHeaders_tRESTResponse_15
										.put("Content-Type", context.format);

								java.util.Map<String, Object> restResponse_tRESTResponse_15 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_15.put("BODY",
										restProviderResponse_tRESTResponse_15);
								restResponse_tRESTResponse_15
										.put("STATUS",
												restProviderStatusCode_tRESTResponse_15);
								restResponse_tRESTResponse_15
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_15);
								restResponse_tRESTResponse_15.put(
										"drop.json.root.element",
										Boolean.valueOf(false));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_15);

							}

							tos_count_tRESTResponse_15++;

							/**
							 * [tRESTResponse_15 main ] stop
							 */

						} // C_01

						/**
						 * [tRunJob_9 end ] start
						 */

						currentComponent = "tRunJob_9";

						ok_Hash.put("tRunJob_9", true);
						end_Hash.put("tRunJob_9", System.currentTimeMillis());

						/**
						 * [tRunJob_9 end ] stop
						 */

						/**
						 * [tRESTResponse_15 end ] start
						 */

						currentComponent = "tRESTResponse_15";

						ok_Hash.put("tRESTResponse_15", true);
						end_Hash.put("tRESTResponse_15",
								System.currentTimeMillis());

						/**
						 * [tRESTResponse_15 end ] stop
						 */

					} // End of branch "method_query"

					// Start of branch "test_namespace"
					if (test_namespace != null) {

						/**
						 * [tLogRow_5 main ] start
						 */

						currentComponent = "tLogRow_5";

						// /////////////////////

						strBuffer_tLogRow_5 = new StringBuilder();

						if (test_namespace.namespace != null) { //

							strBuffer_tLogRow_5.append(String
									.valueOf(test_namespace.namespace));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_5 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_5);
						}

						consoleOut_tLogRow_5.println(strBuffer_tLogRow_5
								.toString());
						consoleOut_tLogRow_5.flush();
						nb_line_tLogRow_5++;
						// ////

						// ////

						// /////////////////////

						row30 = test_namespace;

						tos_count_tLogRow_5++;

						/**
						 * [tLogRow_5 main ] stop
						 */

						/**
						 * [tJavaRow_7 main ] start
						 */

						currentComponent = "tJavaRow_7";

						row31.namespace = row30.namespace;

						context.namespace = row30.namespace;

						nb_line_tJavaRow_7++;

						tos_count_tJavaRow_7++;

						/**
						 * [tJavaRow_7 main ] stop
						 */

						/**
						 * [tFlowToIterate_7 main ] start
						 */

						currentComponent = "tFlowToIterate_7";

						globalMap.put("row31.namespace", row31.namespace);
						nb_line_tFlowToIterate_7++;

						counter_tFlowToIterate_7++;
						globalMap.put("tFlowToIterate_7_CURRENT_ITERATION",
								counter_tFlowToIterate_7);

						tos_count_tFlowToIterate_7++;

						/**
						 * [tFlowToIterate_7 main ] stop
						 */
						NB_ITERATE_tSparqlSelectRequest_2++;
						iterateLoop++;

						/**
						 * [tSortRow_2_SortOut begin ] start
						 */

						ok_Hash.put("tSortRow_2_SortOut", false);
						start_Hash.put("tSortRow_2_SortOut",
								System.currentTimeMillis());

						currentVirtualComponent = "tSortRow_2";

						currentComponent = "tSortRow_2_SortOut";

						int tos_count_tSortRow_2_SortOut = 0;

						class ComparablecopyOfout6Struct extends
								copyOfout6Struct implements
								Comparable<ComparablecopyOfout6Struct> {

							public int compareTo(
									ComparablecopyOfout6Struct other) {

								if (this.string == null && other.string != null) {
									return -1;

								} else if (this.string != null
										&& other.string == null) {
									return 1;

								} else if (this.string != null
										&& other.string != null) {
									if (!this.string.equals(other.string)) {
										return this.string
												.compareTo(other.string);
									}
								}
								return 0;
							}
						}

						java.util.List<ComparablecopyOfout6Struct> list_tSortRow_2_SortOut = new java.util.ArrayList<ComparablecopyOfout6Struct>();

						/**
						 * [tSortRow_2_SortOut begin ] stop
						 */

						/**
						 * [tMap_3 begin ] start
						 */

						ok_Hash.put("tMap_3", false);
						start_Hash.put("tMap_3", System.currentTimeMillis());

						currentComponent = "tMap_3";

						int tos_count_tMap_3 = 0;

						// ###############################
						// # Lookup's keys initialization
						// ###############################

						// ###############################
						// # Vars initialization
						class Var__tMap_3__Struct {
						}
						Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
						// ###############################

						// ###############################
						// # Outputs initialization
						copyOfout6Struct copyOfout6_tmp = new copyOfout6Struct();
						// ###############################

						/**
						 * [tMap_3 begin ] stop
						 */

						/**
						 * [tLogRow_6 begin ] start
						 */

						ok_Hash.put("tLogRow_6", false);
						start_Hash.put("tLogRow_6", System.currentTimeMillis());

						currentComponent = "tLogRow_6";

						int tos_count_tLogRow_6 = 0;

						/**
						 * [tLogRow_6 begin ] stop
						 */

						/**
						 * [tSparqlSelectRequest_2 begin ] start
						 */

						ok_Hash.put("tSparqlSelectRequest_2", false);
						start_Hash.put("tSparqlSelectRequest_2",
								System.currentTimeMillis());

						currentComponent = "tSparqlSelectRequest_2";

						int tos_count_tSparqlSelectRequest_2 = 0;

						String URL_string_tSparqlSelectRequest_2;

						URL_string_tSparqlSelectRequest_2 = context.database_endpoint
								+ "?default-graph-uri=&query="
								+ java.net.URLEncoder
										.encode("SELECT ?o ?comment ?title WHERE  { ?s <http://bio2rdf.org/bio2rdf_vocabulary:test> ?o . ?s dc:identifier 'namespace:"
												+ context.namespace
												+ "' . OPTIONAL { ?s rdfs:comment ?comment . } OPTIONAL { ?s dc:title ?title . } } ORDER BY 1",
												"UTF-8")
								+ "&format=application%2Fsparql-results%2Bjson&timeout=0&debug=on";

						org.json.JSONArray jsonArray_tSparqlSelectRequest_2 = new org.json.JSONArray();

						org.json.JSONArray jsonKeysArray_tSparqlSelectRequest_2;

						java.util.ArrayList<String> queryKeys_tSparqlSelectRequest_2 = new java.util.ArrayList<String>();
						// ArrayList that will contain the key value of the
						// query sorted correctly

						org.json.JSONObject jsonObj_tSparqlSelectRequest_2;

						java.util.Iterator<String> queryKeysIterator_tSparqlSelectRequest_2;

						java.net.URL url_tSparqlSelectRequest_2 = new java.net.URL(
								URL_string_tSparqlSelectRequest_2);

						java.net.HttpURLConnection urlConn_tSparqlSelectRequest_2 = (java.net.HttpURLConnection) url_tSparqlSelectRequest_2
								.openConnection();
						urlConn_tSparqlSelectRequest_2.setRequestMethod("GET");
						urlConn_tSparqlSelectRequest_2.setDoOutput(true);
						urlConn_tSparqlSelectRequest_2.setDoInput(true);
						urlConn_tSparqlSelectRequest_2.setUseCaches(false);

						try {
							urlConn_tSparqlSelectRequest_2.connect();

							byte[] buffer_tSparqlSelectRequest_2 = new byte[1024];
							int bos_buffer_tSparqlSelectRequest_2 = 0;

							StringBuilder sb_tSparqlSelectRequest_2 = new StringBuilder();

							if (java.net.HttpURLConnection.HTTP_OK == (urlConn_tSparqlSelectRequest_2
									.getResponseCode())) {
								java.io.InputStream bis_tSparqlSelectRequest_2 = new java.io.BufferedInputStream(
										urlConn_tSparqlSelectRequest_2
												.getInputStream());

								while ((bos_buffer_tSparqlSelectRequest_2 = bis_tSparqlSelectRequest_2
										.read(buffer_tSparqlSelectRequest_2)) != -1) {
									// Then the table of bytes and its size are
									// used to generate a string
									// which is added to a string builder that
									// will contain the whole response
									sb_tSparqlSelectRequest_2
											.append(new String(
													buffer_tSparqlSelectRequest_2,
													0,
													bos_buffer_tSparqlSelectRequest_2));
								}
								bis_tSparqlSelectRequest_2.close();

							} else {
								System.err
										.println(urlConn_tSparqlSelectRequest_2
												.getResponseCode()
												+ " "
												+ urlConn_tSparqlSelectRequest_2
														.getResponseMessage());
							}

							urlConn_tSparqlSelectRequest_2.disconnect();

							jsonObj_tSparqlSelectRequest_2 = new org.json.JSONObject(
									sb_tSparqlSelectRequest_2.toString());

							jsonKeysArray_tSparqlSelectRequest_2 = jsonObj_tSparqlSelectRequest_2
									.getJSONObject("head").getJSONArray("vars");
							for (int k_tSparqlSelectRequest_2 = 0; k_tSparqlSelectRequest_2 < jsonKeysArray_tSparqlSelectRequest_2
									.length(); k_tSparqlSelectRequest_2++) {
								queryKeys_tSparqlSelectRequest_2
										.add(jsonKeysArray_tSparqlSelectRequest_2
												.getString(k_tSparqlSelectRequest_2));
							}

							jsonArray_tSparqlSelectRequest_2 = jsonObj_tSparqlSelectRequest_2
									.getJSONObject("results").getJSONArray(
											"bindings");

						} catch (Exception e) {
							System.err.println("UnknownHostException");
						}

						if (jsonArray_tSparqlSelectRequest_2.length() == 0) {
							globalMap.put("tSparqlSelectRequest_2_HAS_RESULTS",
									false);
						} else {
							globalMap.put("tSparqlSelectRequest_2_HAS_RESULTS",
									true);
						}

						int i_tSparqlSelectRequest_2;
						int nb_line_tSparqlSelectRequest_2 = 0;

						for (i_tSparqlSelectRequest_2 = 0; i_tSparqlSelectRequest_2 < jsonArray_tSparqlSelectRequest_2
								.length(); i_tSparqlSelectRequest_2++) {

							/**
							 * [tSparqlSelectRequest_2 begin ] stop
							 */
							/**
							 * [tSparqlSelectRequest_2 main ] start
							 */

							currentComponent = "tSparqlSelectRequest_2";

							queryKeysIterator_tSparqlSelectRequest_2 = queryKeys_tSparqlSelectRequest_2
									.iterator();

							if (queryKeysIterator_tSparqlSelectRequest_2
									.hasNext()) {
								try {
									row34.o = jsonArray_tSparqlSelectRequest_2
											.getJSONObject(
													i_tSparqlSelectRequest_2)
											.getJSONObject(
													queryKeysIterator_tSparqlSelectRequest_2
															.next())
											.getString("value");
								} catch (org.json.JSONException e_tSparqlSelectRequest_2) {
									row34.o = "";
								}
							}

							if (queryKeysIterator_tSparqlSelectRequest_2
									.hasNext()) {
								try {
									row34.comment = jsonArray_tSparqlSelectRequest_2
											.getJSONObject(
													i_tSparqlSelectRequest_2)
											.getJSONObject(
													queryKeysIterator_tSparqlSelectRequest_2
															.next())
											.getString("value");
								} catch (org.json.JSONException e_tSparqlSelectRequest_2) {
									row34.comment = "";
								}
							}

							if (queryKeysIterator_tSparqlSelectRequest_2
									.hasNext()) {
								try {
									row34.title = jsonArray_tSparqlSelectRequest_2
											.getJSONObject(
													i_tSparqlSelectRequest_2)
											.getJSONObject(
													queryKeysIterator_tSparqlSelectRequest_2
															.next())
											.getString("value");
								} catch (org.json.JSONException e_tSparqlSelectRequest_2) {
									row34.title = "";
								}
							}

							tos_count_tSparqlSelectRequest_2++;

							/**
							 * [tSparqlSelectRequest_2 main ] stop
							 */

							/**
							 * [tLogRow_6 main ] start
							 */

							currentComponent = "tLogRow_6";

							row40 = row34;

							tos_count_tLogRow_6++;

							/**
							 * [tLogRow_6 main ] stop
							 */

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
								// ###############################
								// # Output tables

								copyOfout6 = null;

								// # Output table : 'copyOfout6'
								copyOfout6_tmp.body = null;
								copyOfout6_tmp.string = "<p><a href=\""
										+ row40.o + "\"> " + row40.o
										+ "</a></p>";
								copyOfout6_tmp.comment = row40.comment;
								copyOfout6_tmp.title = row40.title;
								copyOfout6 = copyOfout6_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */
							// Start of branch "copyOfout6"
							if (copyOfout6 != null) {

								/**
								 * [tSortRow_2_SortOut main ] start
								 */

								currentVirtualComponent = "tSortRow_2";

								currentComponent = "tSortRow_2_SortOut";

								ComparablecopyOfout6Struct arrayRowtSortRow_2_SortOut = new ComparablecopyOfout6Struct();

								arrayRowtSortRow_2_SortOut.body = copyOfout6.body;
								arrayRowtSortRow_2_SortOut.string = copyOfout6.string;
								arrayRowtSortRow_2_SortOut.comment = copyOfout6.comment;
								arrayRowtSortRow_2_SortOut.title = copyOfout6.title;
								list_tSortRow_2_SortOut
										.add(arrayRowtSortRow_2_SortOut);

								tos_count_tSortRow_2_SortOut++;

								/**
								 * [tSortRow_2_SortOut main ] stop
								 */

							} // End of branch "copyOfout6"

							/**
							 * [tSparqlSelectRequest_2 end ] start
							 */

							currentComponent = "tSparqlSelectRequest_2";

							nb_line_tSparqlSelectRequest_2++;
						}

						globalMap.put("tSparqlSelectRequest_2_NB_LINE",
								nb_line_tSparqlSelectRequest_2);

						ok_Hash.put("tSparqlSelectRequest_2", true);
						end_Hash.put("tSparqlSelectRequest_2",
								System.currentTimeMillis());

						/**
						 * [tSparqlSelectRequest_2 end ] stop
						 */

						/**
						 * [tLogRow_6 end ] start
						 */

						currentComponent = "tLogRow_6";

						ok_Hash.put("tLogRow_6", true);
						end_Hash.put("tLogRow_6", System.currentTimeMillis());

						/**
						 * [tLogRow_6 end ] stop
						 */

						/**
						 * [tMap_3 end ] start
						 */

						currentComponent = "tMap_3";

						// ###############################
						// # Lookup hashes releasing
						// ###############################

						ok_Hash.put("tMap_3", true);
						end_Hash.put("tMap_3", System.currentTimeMillis());

						/**
						 * [tMap_3 end ] stop
						 */

						/**
						 * [tSortRow_2_SortOut end ] start
						 */

						currentVirtualComponent = "tSortRow_2";

						currentComponent = "tSortRow_2_SortOut";

						copyOfout6Struct[] array_tSortRow_2_SortOut = list_tSortRow_2_SortOut
								.toArray(new ComparablecopyOfout6Struct[0]);

						java.util.Arrays.sort(array_tSortRow_2_SortOut);

						globalMap.put("tSortRow_2", array_tSortRow_2_SortOut);

						ok_Hash.put("tSortRow_2_SortOut", true);
						end_Hash.put("tSortRow_2_SortOut",
								System.currentTimeMillis());

						/**
						 * [tSortRow_2_SortOut end ] stop
						 */

						/**
						 * [tDenormalize_1_DenormalizeOut begin ] start
						 */

						ok_Hash.put("tDenormalize_1_DenormalizeOut", false);
						start_Hash.put("tDenormalize_1_DenormalizeOut",
								System.currentTimeMillis());

						currentVirtualComponent = "tDenormalize_1";

						currentComponent = "tDenormalize_1_DenormalizeOut";

						int tos_count_tDenormalize_1_DenormalizeOut = 0;

						class DenormalizeStructtDenormalize_1_DenormalizeOut {
							StringBuilder string = new StringBuilder();
						}
						DenormalizeStructtDenormalize_1_DenormalizeOut denormalize_result_tDenormalize_1_DenormalizeOut = null;
						java.util.Map<Document, java.util.Map<String, java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>> hash_body_tDenormalize_1_DenormalizeOut = new java.util.HashMap<Document, java.util.Map<String, java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>();
						java.util.Map<String, java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>> hash_comment_tDenormalize_1_DenormalizeOut = null;
						java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut> hash_title_tDenormalize_1_DenormalizeOut = null;

						/**
						 * [tDenormalize_1_DenormalizeOut begin ] stop
						 */

						/**
						 * [tSortRow_2_SortIn begin ] start
						 */

						ok_Hash.put("tSortRow_2_SortIn", false);
						start_Hash.put("tSortRow_2_SortIn",
								System.currentTimeMillis());

						currentVirtualComponent = "tSortRow_2";

						currentComponent = "tSortRow_2_SortIn";

						int tos_count_tSortRow_2_SortIn = 0;

						copyOfout6Struct[] array_tSortRow_2_SortIn = (copyOfout6Struct[]) globalMap
								.get("tSortRow_2");

						int nb_line_tSortRow_2_SortIn = 0;

						copyOfout6Struct current_tSortRow_2_SortIn = null;

						for (int i_tSortRow_2_SortIn = 0; i_tSortRow_2_SortIn < array_tSortRow_2_SortIn.length; i_tSortRow_2_SortIn++) {
							current_tSortRow_2_SortIn = array_tSortRow_2_SortIn[i_tSortRow_2_SortIn];
							row41.body = current_tSortRow_2_SortIn.body;
							row41.string = current_tSortRow_2_SortIn.string;
							row41.comment = current_tSortRow_2_SortIn.comment;
							row41.title = current_tSortRow_2_SortIn.title;
							// increase number of line sorted
							nb_line_tSortRow_2_SortIn++;

							/**
							 * [tSortRow_2_SortIn begin ] stop
							 */
							/**
							 * [tSortRow_2_SortIn main ] start
							 */

							currentVirtualComponent = "tSortRow_2";

							currentComponent = "tSortRow_2_SortIn";

							tos_count_tSortRow_2_SortIn++;

							/**
							 * [tSortRow_2_SortIn main ] stop
							 */

							/**
							 * [tDenormalize_1_DenormalizeOut main ] start
							 */

							currentVirtualComponent = "tDenormalize_1";

							currentComponent = "tDenormalize_1_DenormalizeOut";

							if (hash_body_tDenormalize_1_DenormalizeOut
									.containsKey(row41.body)) {
								hash_comment_tDenormalize_1_DenormalizeOut = hash_body_tDenormalize_1_DenormalizeOut
										.get(row41.body);
							} else {
								hash_comment_tDenormalize_1_DenormalizeOut = new java.util.HashMap<String, java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>();
								hash_body_tDenormalize_1_DenormalizeOut
										.put(row41.body,
												hash_comment_tDenormalize_1_DenormalizeOut);
							}
							if (hash_comment_tDenormalize_1_DenormalizeOut
									.containsKey(row41.comment)) {
								hash_title_tDenormalize_1_DenormalizeOut = hash_comment_tDenormalize_1_DenormalizeOut
										.get(row41.comment);
							} else {
								hash_title_tDenormalize_1_DenormalizeOut = new java.util.HashMap<String, DenormalizeStructtDenormalize_1_DenormalizeOut>();
								hash_comment_tDenormalize_1_DenormalizeOut
										.put(row41.comment,
												hash_title_tDenormalize_1_DenormalizeOut);
							}
							if (hash_title_tDenormalize_1_DenormalizeOut
									.containsKey(row41.title)) {
								denormalize_result_tDenormalize_1_DenormalizeOut = hash_title_tDenormalize_1_DenormalizeOut
										.get(row41.title);
								denormalize_result_tDenormalize_1_DenormalizeOut.string
										.append("\n").append(row41.string);

							} else {
								denormalize_result_tDenormalize_1_DenormalizeOut = new DenormalizeStructtDenormalize_1_DenormalizeOut();
								denormalize_result_tDenormalize_1_DenormalizeOut.string
										.append(row41.string);

								hash_title_tDenormalize_1_DenormalizeOut
										.put(row41.title,
												denormalize_result_tDenormalize_1_DenormalizeOut);
							}

							tos_count_tDenormalize_1_DenormalizeOut++;

							/**
							 * [tDenormalize_1_DenormalizeOut main ] stop
							 */

							/**
							 * [tSortRow_2_SortIn end ] start
							 */

							currentVirtualComponent = "tSortRow_2";

							currentComponent = "tSortRow_2_SortIn";

						}

						globalMap.put("tSortRow_2_SortIn_NB_LINE",
								nb_line_tSortRow_2_SortIn);

						ok_Hash.put("tSortRow_2_SortIn", true);
						end_Hash.put("tSortRow_2_SortIn",
								System.currentTimeMillis());

						/**
						 * [tSortRow_2_SortIn end ] stop
						 */

						/**
						 * [tDenormalize_1_DenormalizeOut end ] start
						 */

						currentVirtualComponent = "tDenormalize_1";

						currentComponent = "tDenormalize_1_DenormalizeOut";

						java.util.List<OnRowsEndStructtDenormalize_1> result_list_tDenormalize_1_DenormalizeOut = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
						if (denormalize_result_tDenormalize_1_DenormalizeOut != null) {
							// generate result begin
							java.util.Iterator<Document> body_iterator_tDenormalize_1_DenormalizeOut = hash_body_tDenormalize_1_DenormalizeOut
									.keySet().iterator();

							while (body_iterator_tDenormalize_1_DenormalizeOut
									.hasNext()) {

								Document key_body_tDenormalize_1_DenormalizeOut = body_iterator_tDenormalize_1_DenormalizeOut
										.next();

								hash_comment_tDenormalize_1_DenormalizeOut = hash_body_tDenormalize_1_DenormalizeOut
										.get(key_body_tDenormalize_1_DenormalizeOut);

								java.util.Iterator<String> comment_iterator_tDenormalize_1_DenormalizeOut = hash_comment_tDenormalize_1_DenormalizeOut
										.keySet().iterator();

								while (comment_iterator_tDenormalize_1_DenormalizeOut
										.hasNext()) {

									String key_comment_tDenormalize_1_DenormalizeOut = comment_iterator_tDenormalize_1_DenormalizeOut
											.next();

									hash_title_tDenormalize_1_DenormalizeOut = hash_comment_tDenormalize_1_DenormalizeOut
											.get(key_comment_tDenormalize_1_DenormalizeOut);

									java.util.Iterator<String> title_iterator_tDenormalize_1_DenormalizeOut = hash_title_tDenormalize_1_DenormalizeOut
											.keySet().iterator();

									while (title_iterator_tDenormalize_1_DenormalizeOut
											.hasNext()) {

										String key_title_tDenormalize_1_DenormalizeOut = title_iterator_tDenormalize_1_DenormalizeOut
												.next();

										denormalize_result_tDenormalize_1_DenormalizeOut = hash_title_tDenormalize_1_DenormalizeOut
												.get(key_title_tDenormalize_1_DenormalizeOut);

										OnRowsEndStructtDenormalize_1 denormalize_row_tDenormalize_1_DenormalizeOut = new OnRowsEndStructtDenormalize_1();

										denormalize_row_tDenormalize_1_DenormalizeOut.body = key_body_tDenormalize_1_DenormalizeOut;
										denormalize_row_tDenormalize_1_DenormalizeOut.comment = key_comment_tDenormalize_1_DenormalizeOut;
										denormalize_row_tDenormalize_1_DenormalizeOut.title = key_title_tDenormalize_1_DenormalizeOut;
										denormalize_row_tDenormalize_1_DenormalizeOut.string = denormalize_result_tDenormalize_1_DenormalizeOut.string
												.toString();

										// in the deepest end

										result_list_tDenormalize_1_DenormalizeOut
												.add(denormalize_row_tDenormalize_1_DenormalizeOut);

									}

								}

							}

						}
						// generate result end
						globalMap.put("tDenormalize_1",
								result_list_tDenormalize_1_DenormalizeOut);
						globalMap.put("tDenormalize_1_DenormalizeOut_NB_LINE",
								result_list_tDenormalize_1_DenormalizeOut
										.size());

						ok_Hash.put("tDenormalize_1_DenormalizeOut", true);
						end_Hash.put("tDenormalize_1_DenormalizeOut",
								System.currentTimeMillis());

						/**
						 * [tDenormalize_1_DenormalizeOut end ] stop
						 */

						/**
						 * [tRESTResponse_8 begin ] start
						 */

						ok_Hash.put("tRESTResponse_8", false);
						start_Hash.put("tRESTResponse_8",
								System.currentTimeMillis());

						currentComponent = "tRESTResponse_8";

						int tos_count_tRESTResponse_8 = 0;

						/**
						 * [tRESTResponse_8 begin ] stop
						 */

						/**
						 * [tJavaRow_8 begin ] start
						 */

						ok_Hash.put("tJavaRow_8", false);
						start_Hash
								.put("tJavaRow_8", System.currentTimeMillis());

						currentComponent = "tJavaRow_8";

						int tos_count_tJavaRow_8 = 0;

						int nb_line_tJavaRow_8 = 0;

						/**
						 * [tJavaRow_8 begin ] stop
						 */

						/**
						 * [tDenormalize_1_ArrayIn begin ] start
						 */

						ok_Hash.put("tDenormalize_1_ArrayIn", false);
						start_Hash.put("tDenormalize_1_ArrayIn",
								System.currentTimeMillis());

						currentVirtualComponent = "tDenormalize_1";

						currentComponent = "tDenormalize_1_ArrayIn";

						int tos_count_tDenormalize_1_ArrayIn = 0;

						int nb_line_tDenormalize_1_ArrayIn = 0;
						java.util.List<OnRowsEndStructtDenormalize_1> list_tDenormalize_1_ArrayIn = (java.util.List<OnRowsEndStructtDenormalize_1>) globalMap
								.get("tDenormalize_1");
						if (list_tDenormalize_1_ArrayIn == null) {
							list_tDenormalize_1_ArrayIn = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
						}
						for (OnRowsEndStructtDenormalize_1 row_tDenormalize_1_ArrayIn : list_tDenormalize_1_ArrayIn) {

							row43.body = row_tDenormalize_1_ArrayIn.body;

							row43.string = row_tDenormalize_1_ArrayIn.string;

							row43.comment = row_tDenormalize_1_ArrayIn.comment;

							row43.title = row_tDenormalize_1_ArrayIn.title;

							/**
							 * [tDenormalize_1_ArrayIn begin ] stop
							 */
							/**
							 * [tDenormalize_1_ArrayIn main ] start
							 */

							currentVirtualComponent = "tDenormalize_1";

							currentComponent = "tDenormalize_1_ArrayIn";

							tos_count_tDenormalize_1_ArrayIn++;

							/**
							 * [tDenormalize_1_ArrayIn main ] stop
							 */

							/**
							 * [tJavaRow_8 main ] start
							 */

							currentComponent = "tJavaRow_8";

							String title;
							if (row43.title.equals("")) {
								title = context.namespace.substring(0, 1)
										.toUpperCase()
										+ context.namespace.substring(1)
												.toLowerCase();
							} else {
								title = row43.title;
							}

							row44.body = row43.body;
							row44.string = "<html><head><style>p {margin:0 0 8px 0;} .describe {text-indent:2em; margin: 0 0 20px 0} .label { color:grey; font-style:italic; font-size:80%;text-decoration:none;} a {color: blue;} a:link {text-decoration:none;} a:visited {text-decoration:none;color: blue;} a:hover {text-decoration:underline;color: blue;} a:active {text-decoration:underline;color: blue;} h1 {margin-left:3cm; color: blue;margin-bottom:15px}</style></head> <body><h1>"
									+ title
									+ " example page</h1><p class=\"describe\">"
									+ row43.comment
									+ "</p>"
									+ row43.string
									+ "</body></html>";

							nb_line_tJavaRow_8++;

							tos_count_tJavaRow_8++;

							/**
							 * [tJavaRow_8 main ] stop
							 */

							/**
							 * [tRESTResponse_8 main ] start
							 */

							currentComponent = "tRESTResponse_8";

							if (globalMap.containsKey("restResponse")) {
								throw new RuntimeException(
										"Rest response already sent.");
							} else if (!globalMap.containsKey("restRequest")) {
								throw new RuntimeException(
										"Not received rest request yet.");
							} else {
								Integer restProviderStatusCode_tRESTResponse_8 = 200;

								Object restProviderResponse_tRESTResponse_8 = null;
								restProviderResponse_tRESTResponse_8 = row44.string;
								if (null != row44.body) {
									restProviderResponse_tRESTResponse_8 = row44.body
											.getDocument();
								}

								java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_8 = new java.util.TreeMap<String, String>(
										String.CASE_INSENSITIVE_ORDER);
								restProviderResponseHeaders_tRESTResponse_8
										.put("Content-Type", "text/html");

								java.util.Map<String, Object> restResponse_tRESTResponse_8 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_8.put("BODY",
										restProviderResponse_tRESTResponse_8);
								restResponse_tRESTResponse_8.put("STATUS",
										restProviderStatusCode_tRESTResponse_8);
								restResponse_tRESTResponse_8
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_8);
								restResponse_tRESTResponse_8.put(
										"drop.json.root.element",
										Boolean.valueOf(false));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_8);

							}

							tos_count_tRESTResponse_8++;

							/**
							 * [tRESTResponse_8 main ] stop
							 */

							/**
							 * [tDenormalize_1_ArrayIn end ] start
							 */

							currentVirtualComponent = "tDenormalize_1";

							currentComponent = "tDenormalize_1_ArrayIn";

							nb_line_tDenormalize_1_ArrayIn++;
						}
						globalMap.put("tDenormalize_1_ArrayIn_NB_LINE",
								nb_line_tDenormalize_1_ArrayIn);

						ok_Hash.put("tDenormalize_1_ArrayIn", true);
						end_Hash.put("tDenormalize_1_ArrayIn",
								System.currentTimeMillis());

						/**
						 * [tDenormalize_1_ArrayIn end ] stop
						 */

						/**
						 * [tJavaRow_8 end ] start
						 */

						currentComponent = "tJavaRow_8";

						globalMap.put("tJavaRow_8_NB_LINE", nb_line_tJavaRow_8);

						ok_Hash.put("tJavaRow_8", true);
						end_Hash.put("tJavaRow_8", System.currentTimeMillis());

						/**
						 * [tJavaRow_8 end ] stop
						 */

						/**
						 * [tRESTResponse_8 end ] start
						 */

						currentComponent = "tRESTResponse_8";

						ok_Hash.put("tRESTResponse_8", true);
						end_Hash.put("tRESTResponse_8",
								System.currentTimeMillis());

						/**
						 * [tRESTResponse_8 end ] stop
						 */

					} // End of branch "test_namespace"

					// Start of branch "method_linksns"
					if (method_linksns != null) {

						/**
						 * [tLogRow_1 main ] start
						 */

						currentComponent = "tLogRow_1";

						// /////////////////////

						strBuffer_tLogRow_1 = new StringBuilder();

						if (method_linksns.format != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(method_linksns.format));

						} //

						strBuffer_tLogRow_1.append(" |1| ");

						if (method_linksns.namespace != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(method_linksns.namespace));

						} //

						strBuffer_tLogRow_1.append(" |1| ");

						if (method_linksns.ns != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(method_linksns.ns));

						} //

						strBuffer_tLogRow_1.append(" |1| ");

						if (method_linksns.id != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(method_linksns.id));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_1 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_1);
						}

						consoleOut_tLogRow_1.println(strBuffer_tLogRow_1
								.toString());
						consoleOut_tLogRow_1.flush();
						nb_line_tLogRow_1++;
						// ////

						// ////

						// /////////////////////

						row3 = method_linksns;

						tos_count_tLogRow_1++;

						/**
						 * [tLogRow_1 main ] stop
						 */

						/**
						 * [tJavaRow_1 main ] start
						 */

						currentComponent = "tJavaRow_1";

						context.namespace = row3.namespace;
						context.ns = row3.ns;
						context.id = row3.id;
						context.request = "links";

						context.format = BioUtil.restFormat(row3.format);
						nb_line_tJavaRow_1++;

						tos_count_tJavaRow_1++;

						/**
						 * [tJavaRow_1 main ] stop
						 */

						/**
						 * [tFlowToIterate_1 main ] start
						 */

						currentComponent = "tFlowToIterate_1";

						globalMap.put("row18.namespace", row18.namespace);
						nb_line_tFlowToIterate_1++;
						globalMap.put("row18.format", row18.format);
						nb_line_tFlowToIterate_1++;
						globalMap.put("row18.ns", row18.ns);
						nb_line_tFlowToIterate_1++;
						globalMap.put("row18.id", row18.id);
						nb_line_tFlowToIterate_1++;
						globalMap.put("row18.query", row18.query);
						nb_line_tFlowToIterate_1++;
						globalMap.put("row18.request", row18.request);
						nb_line_tFlowToIterate_1++;

						counter_tFlowToIterate_1++;
						globalMap.put("tFlowToIterate_1_CURRENT_ITERATION",
								counter_tFlowToIterate_1);

						tos_count_tFlowToIterate_1++;

						/**
						 * [tFlowToIterate_1 main ] stop
						 */
						NB_ITERATE_tRunJob_1++;
						iterateLoop++;

						/**
						 * [tRESTResponse_1 begin ] start
						 */

						ok_Hash.put("tRESTResponse_1", false);
						start_Hash.put("tRESTResponse_1",
								System.currentTimeMillis());

						currentComponent = "tRESTResponse_1";

						int tos_count_tRESTResponse_1 = 0;

						/**
						 * [tRESTResponse_1 begin ] stop
						 */

						/**
						 * [tRunJob_1 begin ] start
						 */

						ok_Hash.put("tRunJob_1", false);
						start_Hash.put("tRunJob_1", System.currentTimeMillis());

						currentComponent = "tRunJob_1";

						int tos_count_tRunJob_1 = 0;

						/**
						 * [tRunJob_1 begin ] stop
						 */
						/**
						 * [tRunJob_1 main ] start
						 */

						currentComponent = "tRunJob_1";

						java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

						paraList_tRunJob_1.add("--father_pid=" + pid);

						paraList_tRunJob_1.add("--root_pid=" + rootPid);

						paraList_tRunJob_1.add("--father_node=tRunJob_1");

						paraList_tRunJob_1.add("--context=Default");

						// for feature:10589

						paraList_tRunJob_1.add("--stat_port=" + portStats);

						if (resuming_logs_dir_path != null) {
							paraList_tRunJob_1.add("--resuming_logs_dir_path="
									+ resuming_logs_dir_path);
						}
						String childResumePath_tRunJob_1 = ResumeUtil
								.getChildJobCheckPointPath(resuming_checkpoint_path);
						String tRunJobName_tRunJob_1 = ResumeUtil
								.getRighttRunJob(resuming_checkpoint_path);
						if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
								&& childResumePath_tRunJob_1 != null) {
							paraList_tRunJob_1
									.add("--resuming_checkpoint_path="
											+ ResumeUtil
													.getChildJobCheckPointPath(resuming_checkpoint_path));
						}
						paraList_tRunJob_1.add("--parent_part_launcher=JOB:"
								+ jobName + "/NODE:tRunJob_1");

						java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

						context.synchronizeContext();
						java.util.Enumeration<?> propertyNames_tRunJob_1 = context
								.propertyNames();
						while (propertyNames_tRunJob_1.hasMoreElements()) {
							String key_tRunJob_1 = (String) propertyNames_tRunJob_1
									.nextElement();
							Object value_tRunJob_1 = (Object) context
									.get(key_tRunJob_1);
							paraList_tRunJob_1.add("--context_param "
									+ key_tRunJob_1 + "=" + value_tRunJob_1);
						}

						parentContextMap_tRunJob_1.put("pageTest",
								context.pageTest);

						parentContextMap_tRunJob_1.put("request",
								context.request);

						parentContextMap_tRunJob_1.put("message",
								context.message);

						parentContextMap_tRunJob_1.put("ns", context.ns);

						parentContextMap_tRunJob_1.put("id", context.id);

						parentContextMap_tRunJob_1
								.put("format", context.format);

						parentContextMap_tRunJob_1.put("localhost",
								context.localhost);

						parentContextMap_tRunJob_1
								.put("sparql", context.sparql);

						parentContextMap_tRunJob_1.put("database_endpoint",
								context.database_endpoint);

						parentContextMap_tRunJob_1.put("query", context.query);

						parentContextMap_tRunJob_1.put("debug", context.debug);

						parentContextMap_tRunJob_1.put("namespace",
								context.namespace);

						parentContextMap_tRunJob_1.put("database_endpoint1",
								context.database_endpoint1);

						parentContextMap_tRunJob_1.put("localhost1",
								context.localhost1);

						parentContextMap_tRunJob_1.put("localhost2",
								context.localhost2);

						parentContextMap_tRunJob_1.put("uri", context.uri);

						parentContextMap_tRunJob_1.put("parm1", context.parm1);

						parentContextMap_tRunJob_1.put("parm2", context.parm2);

						parentContextMap_tRunJob_1.put("parm3", context.parm3);

						parentContextMap_tRunJob_1.put("restUrl",
								context.restUrl);

						Object obj_tRunJob_1 = null;

						bio2rdf.bio2rdf_rest_subjob_1_7.bio2rdf_rest_subjob childJob_tRunJob_1 = new bio2rdf.bio2rdf_rest_subjob_1_7.bio2rdf_rest_subjob();
						// pass DataSources
						java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						if (null != talendDataSources_tRunJob_1) {
							java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
							for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
									.entrySet()) {
								dataSources_tRunJob_1.put(
										talendDataSourceEntry_tRunJob_1
												.getKey(),
										talendDataSourceEntry_tRunJob_1
												.getValue().getRawDataSource());
							}
							childJob_tRunJob_1
									.setDataSources(dataSources_tRunJob_1);
						}

						childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

						String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
								.runJob((String[]) paraList_tRunJob_1
										.toArray(new String[paraList_tRunJob_1
												.size()]));

						errorCode = childJob_tRunJob_1.getErrorCode();

						if (childJob_tRunJob_1.getErrorCode() == null) {
							globalMap.put(
									"tRunJob_1_CHILD_RETURN_CODE",
									childJob_tRunJob_1.getStatus() != null
											&& ("failure")
													.equals(childJob_tRunJob_1
															.getStatus()) ? 1
											: 0);
						} else {
							globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
									childJob_tRunJob_1.getErrorCode());
						}
						if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
							globalMap
									.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
											childJob_tRunJob_1
													.getExceptionStackTrace());
						}

						if (childJob_tRunJob_1.getErrorCode() != null
								|| ("failure").equals(childJob_tRunJob_1
										.getStatus())) {

							throw new RuntimeException(
									"Child job running failed");
						}

						for (String[] item_tRunJob_1 : childReturn_tRunJob_1) {
							if (childJob_tRunJob_1.hastBufferOutputComponent() || true) {

								if (0 < item_tRunJob_1.length) {

									row22.string = item_tRunJob_1[0];

								} else {
									row22.string = null;
								}

								if (1 < item_tRunJob_1.length) {

									row22.body = ParserUtils
											.parseTo_Document(item_tRunJob_1[1]);

								} else {
									row22.body = null;
								}

							}

							tos_count_tRunJob_1++;

							/**
							 * [tRunJob_1 main ] stop
							 */

							/**
							 * [tRESTResponse_1 main ] start
							 */

							currentComponent = "tRESTResponse_1";

							if (globalMap.containsKey("restResponse")) {
								throw new RuntimeException(
										"Rest response already sent.");
							} else if (!globalMap.containsKey("restRequest")) {
								throw new RuntimeException(
										"Not received rest request yet.");
							} else {
								Integer restProviderStatusCode_tRESTResponse_1 = 200;

								Object restProviderResponse_tRESTResponse_1 = null;
								restProviderResponse_tRESTResponse_1 = row22.string;
								if (null != row22.body) {
									restProviderResponse_tRESTResponse_1 = row22.body
											.getDocument();
								}

								java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_1 = new java.util.TreeMap<String, String>(
										String.CASE_INSENSITIVE_ORDER);
								restProviderResponseHeaders_tRESTResponse_1
										.put("Content-Type", context.format);

								java.util.Map<String, Object> restResponse_tRESTResponse_1 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_1.put("BODY",
										restProviderResponse_tRESTResponse_1);
								restResponse_tRESTResponse_1.put("STATUS",
										restProviderStatusCode_tRESTResponse_1);
								restResponse_tRESTResponse_1
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_1);
								restResponse_tRESTResponse_1.put(
										"drop.json.root.element",
										Boolean.valueOf(false));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_1);

							}

							tos_count_tRESTResponse_1++;

							/**
							 * [tRESTResponse_1 main ] stop
							 */

						} // C_01

						/**
						 * [tRunJob_1 end ] start
						 */

						currentComponent = "tRunJob_1";

						ok_Hash.put("tRunJob_1", true);
						end_Hash.put("tRunJob_1", System.currentTimeMillis());

						/**
						 * [tRunJob_1 end ] stop
						 */

						/**
						 * [tRESTResponse_1 end ] start
						 */

						currentComponent = "tRESTResponse_1";

						ok_Hash.put("tRESTResponse_1", true);
						end_Hash.put("tRESTResponse_1",
								System.currentTimeMillis());

						/**
						 * [tRESTResponse_1 end ] stop
						 */

					} // End of branch "method_linksns"

					// Start of branch "method_searchns"
					if (method_searchns != null) {

						/**
						 * [tLogRow_3 main ] start
						 */

						currentComponent = "tLogRow_3";

						// /////////////////////

						strBuffer_tLogRow_3 = new StringBuilder();

						if (method_searchns.format != null) { //

							strBuffer_tLogRow_3.append(String
									.valueOf(method_searchns.format));

						} //

						strBuffer_tLogRow_3.append(" |3| ");

						if (method_searchns.namespace != null) { //

							strBuffer_tLogRow_3.append(String
									.valueOf(method_searchns.namespace));

						} //

						strBuffer_tLogRow_3.append(" |3| ");

						if (method_searchns.query != null) { //

							strBuffer_tLogRow_3.append(String
									.valueOf(method_searchns.query));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_3 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_3);
						}

						consoleOut_tLogRow_3.println(strBuffer_tLogRow_3
								.toString());
						consoleOut_tLogRow_3.flush();
						nb_line_tLogRow_3++;
						// ////

						// ////

						// /////////////////////

						row23 = method_searchns;

						tos_count_tLogRow_3++;

						/**
						 * [tLogRow_3 main ] stop
						 */

						/**
						 * [tJavaRow_2 main ] start
						 */

						currentComponent = "tJavaRow_2";

						context.namespace = row23.namespace;
						context.query = row23.query;
						context.request = "search";

						context.format = BioUtil.restFormat(row23.format);

						nb_line_tJavaRow_2++;

						tos_count_tJavaRow_2++;

						/**
						 * [tJavaRow_2 main ] stop
						 */

						/**
						 * [tFlowToIterate_2 main ] start
						 */

						currentComponent = "tFlowToIterate_2";

						globalMap.put("row24.namespace", row24.namespace);
						nb_line_tFlowToIterate_2++;
						globalMap.put("row24.format", row24.format);
						nb_line_tFlowToIterate_2++;
						globalMap.put("row24.ns", row24.ns);
						nb_line_tFlowToIterate_2++;
						globalMap.put("row24.id", row24.id);
						nb_line_tFlowToIterate_2++;
						globalMap.put("row24.query", row24.query);
						nb_line_tFlowToIterate_2++;
						globalMap.put("row24.request", row24.request);
						nb_line_tFlowToIterate_2++;

						counter_tFlowToIterate_2++;
						globalMap.put("tFlowToIterate_2_CURRENT_ITERATION",
								counter_tFlowToIterate_2);

						tos_count_tFlowToIterate_2++;

						/**
						 * [tFlowToIterate_2 main ] stop
						 */
						NB_ITERATE_tRunJob_2++;
						iterateLoop++;

						/**
						 * [tRESTResponse_4 begin ] start
						 */

						ok_Hash.put("tRESTResponse_4", false);
						start_Hash.put("tRESTResponse_4",
								System.currentTimeMillis());

						currentComponent = "tRESTResponse_4";

						int tos_count_tRESTResponse_4 = 0;

						/**
						 * [tRESTResponse_4 begin ] stop
						 */

						/**
						 * [tRunJob_2 begin ] start
						 */

						ok_Hash.put("tRunJob_2", false);
						start_Hash.put("tRunJob_2", System.currentTimeMillis());

						currentComponent = "tRunJob_2";

						int tos_count_tRunJob_2 = 0;

						/**
						 * [tRunJob_2 begin ] stop
						 */
						/**
						 * [tRunJob_2 main ] start
						 */

						currentComponent = "tRunJob_2";

						java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

						paraList_tRunJob_2.add("--father_pid=" + pid);

						paraList_tRunJob_2.add("--root_pid=" + rootPid);

						paraList_tRunJob_2.add("--father_node=tRunJob_2");

						paraList_tRunJob_2.add("--context=Default");

						// for feature:10589

						paraList_tRunJob_2.add("--stat_port=" + portStats);

						if (resuming_logs_dir_path != null) {
							paraList_tRunJob_2.add("--resuming_logs_dir_path="
									+ resuming_logs_dir_path);
						}
						String childResumePath_tRunJob_2 = ResumeUtil
								.getChildJobCheckPointPath(resuming_checkpoint_path);
						String tRunJobName_tRunJob_2 = ResumeUtil
								.getRighttRunJob(resuming_checkpoint_path);
						if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
								&& childResumePath_tRunJob_2 != null) {
							paraList_tRunJob_2
									.add("--resuming_checkpoint_path="
											+ ResumeUtil
													.getChildJobCheckPointPath(resuming_checkpoint_path));
						}
						paraList_tRunJob_2.add("--parent_part_launcher=JOB:"
								+ jobName + "/NODE:tRunJob_2");

						java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

						context.synchronizeContext();
						java.util.Enumeration<?> propertyNames_tRunJob_2 = context
								.propertyNames();
						while (propertyNames_tRunJob_2.hasMoreElements()) {
							String key_tRunJob_2 = (String) propertyNames_tRunJob_2
									.nextElement();
							Object value_tRunJob_2 = (Object) context
									.get(key_tRunJob_2);
							paraList_tRunJob_2.add("--context_param "
									+ key_tRunJob_2 + "=" + value_tRunJob_2);
						}

						parentContextMap_tRunJob_2.put("pageTest",
								context.pageTest);

						parentContextMap_tRunJob_2.put("request",
								context.request);

						parentContextMap_tRunJob_2.put("message",
								context.message);

						parentContextMap_tRunJob_2.put("ns", context.ns);

						parentContextMap_tRunJob_2.put("id", context.id);

						parentContextMap_tRunJob_2
								.put("format", context.format);

						parentContextMap_tRunJob_2.put("localhost",
								context.localhost);

						parentContextMap_tRunJob_2
								.put("sparql", context.sparql);

						parentContextMap_tRunJob_2.put("database_endpoint",
								context.database_endpoint);

						parentContextMap_tRunJob_2.put("query", context.query);

						parentContextMap_tRunJob_2.put("debug", context.debug);

						parentContextMap_tRunJob_2.put("namespace",
								context.namespace);

						parentContextMap_tRunJob_2.put("database_endpoint1",
								context.database_endpoint1);

						parentContextMap_tRunJob_2.put("localhost1",
								context.localhost1);

						parentContextMap_tRunJob_2.put("localhost2",
								context.localhost2);

						parentContextMap_tRunJob_2.put("uri", context.uri);

						parentContextMap_tRunJob_2.put("parm1", context.parm1);

						parentContextMap_tRunJob_2.put("parm2", context.parm2);

						parentContextMap_tRunJob_2.put("parm3", context.parm3);

						parentContextMap_tRunJob_2.put("restUrl",
								context.restUrl);

						Object obj_tRunJob_2 = null;

						bio2rdf.bio2rdf_rest_subjob_1_7.bio2rdf_rest_subjob childJob_tRunJob_2 = new bio2rdf.bio2rdf_rest_subjob_1_7.bio2rdf_rest_subjob();
						// pass DataSources
						java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						if (null != talendDataSources_tRunJob_2) {
							java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
							for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
									.entrySet()) {
								dataSources_tRunJob_2.put(
										talendDataSourceEntry_tRunJob_2
												.getKey(),
										talendDataSourceEntry_tRunJob_2
												.getValue().getRawDataSource());
							}
							childJob_tRunJob_2
									.setDataSources(dataSources_tRunJob_2);
						}

						childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;

						String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
								.runJob((String[]) paraList_tRunJob_2
										.toArray(new String[paraList_tRunJob_2
												.size()]));

						errorCode = childJob_tRunJob_2.getErrorCode();

						if (childJob_tRunJob_2.getErrorCode() == null) {
							globalMap.put(
									"tRunJob_2_CHILD_RETURN_CODE",
									childJob_tRunJob_2.getStatus() != null
											&& ("failure")
													.equals(childJob_tRunJob_2
															.getStatus()) ? 1
											: 0);
						} else {
							globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
									childJob_tRunJob_2.getErrorCode());
						}
						if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
							globalMap
									.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
											childJob_tRunJob_2
													.getExceptionStackTrace());
						}

						if (childJob_tRunJob_2.getErrorCode() != null
								|| ("failure").equals(childJob_tRunJob_2
										.getStatus())) {

							throw new RuntimeException(
									"Child job running failed");
						}

						for (String[] item_tRunJob_2 : childReturn_tRunJob_2) {
							if (childJob_tRunJob_2.hastBufferOutputComponent() || true) {

								if (0 < item_tRunJob_2.length) {

									row29.string = item_tRunJob_2[0];

								} else {
									row29.string = null;
								}

								if (1 < item_tRunJob_2.length) {

									row29.body = ParserUtils
											.parseTo_Document(item_tRunJob_2[1]);

								} else {
									row29.body = null;
								}

							}

							tos_count_tRunJob_2++;

							/**
							 * [tRunJob_2 main ] stop
							 */

							/**
							 * [tRESTResponse_4 main ] start
							 */

							currentComponent = "tRESTResponse_4";

							if (globalMap.containsKey("restResponse")) {
								throw new RuntimeException(
										"Rest response already sent.");
							} else if (!globalMap.containsKey("restRequest")) {
								throw new RuntimeException(
										"Not received rest request yet.");
							} else {
								Integer restProviderStatusCode_tRESTResponse_4 = 200;

								Object restProviderResponse_tRESTResponse_4 = null;
								restProviderResponse_tRESTResponse_4 = row29.string;
								if (null != row29.body) {
									restProviderResponse_tRESTResponse_4 = row29.body
											.getDocument();
								}

								java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_4 = new java.util.TreeMap<String, String>(
										String.CASE_INSENSITIVE_ORDER);
								restProviderResponseHeaders_tRESTResponse_4
										.put("Content-Type", context.format);

								java.util.Map<String, Object> restResponse_tRESTResponse_4 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_4.put("BODY",
										restProviderResponse_tRESTResponse_4);
								restResponse_tRESTResponse_4.put("STATUS",
										restProviderStatusCode_tRESTResponse_4);
								restResponse_tRESTResponse_4
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_4);
								restResponse_tRESTResponse_4.put(
										"drop.json.root.element",
										Boolean.valueOf(false));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_4);

							}

							tos_count_tRESTResponse_4++;

							/**
							 * [tRESTResponse_4 main ] stop
							 */

						} // C_01

						/**
						 * [tRunJob_2 end ] start
						 */

						currentComponent = "tRunJob_2";

						ok_Hash.put("tRunJob_2", true);
						end_Hash.put("tRunJob_2", System.currentTimeMillis());

						/**
						 * [tRunJob_2 end ] stop
						 */

						/**
						 * [tRESTResponse_4 end ] start
						 */

						currentComponent = "tRESTResponse_4";

						ok_Hash.put("tRESTResponse_4", true);
						end_Hash.put("tRESTResponse_4",
								System.currentTimeMillis());

						/**
						 * [tRESTResponse_4 end ] stop
						 */

					} // End of branch "method_searchns"

					// Start of branch "queryall"
					if (queryall != null) {

						/**
						 * [tLogRow_4 main ] start
						 */

						currentComponent = "tLogRow_4";

						// /////////////////////

						strBuffer_tLogRow_4 = new StringBuilder();

						if (queryall.ns != null) { //

							strBuffer_tLogRow_4.append(String
									.valueOf(queryall.ns));

						} //

						strBuffer_tLogRow_4.append(" |2| ");

						if (queryall.id != null) { //

							strBuffer_tLogRow_4.append(String
									.valueOf(queryall.id));

						} //

						strBuffer_tLogRow_4.append(" |2| ");

						if (queryall.Accept != null) { //

							strBuffer_tLogRow_4.append(String
									.valueOf(queryall.Accept));

						} //

						strBuffer_tLogRow_4.append(" |2| ");

						if (queryall.request != null) { //

							strBuffer_tLogRow_4.append(String
									.valueOf(queryall.request));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_4 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_4);
						}

						consoleOut_tLogRow_4.println(strBuffer_tLogRow_4
								.toString());
						consoleOut_tLogRow_4.flush();
						nb_line_tLogRow_4++;
						// ////

						// ////

						// /////////////////////

						row45 = queryall;

						tos_count_tLogRow_4++;

						/**
						 * [tLogRow_4 main ] stop
						 */

						/**
						 * [tJavaRow_9 main ] start
						 */

						currentComponent = "tJavaRow_9";

						// Code généré selon le schémas d'entrée et de sortie
						row46.request = "describe";
						row46.ns = row45.ns;
						row46.id = row45.id;
						context.ns = row45.ns;
						context.id = row45.id;

						row46.Accept = BioUtil
								.parseContentNegotiation(row45.Accept);
						context.format = row46.Accept;

						context.format = "application/rdf+xml";
						nb_line_tJavaRow_9++;

						tos_count_tJavaRow_9++;

						/**
						 * [tJavaRow_9 main ] stop
						 */

						/**
						 * [tHttpRequest_1 main ] start
						 */

						currentComponent = "tHttpRequest_1";

						java.net.URL url_tHttpRequest_1 = new java.net.URL(
								"http://queryall.rest.bio2rdf.org/queryall/"
										+ row46.ns + ":" + row46.id);

						java.net.HttpURLConnection urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1
								.openConnection();
						urlConn_tHttpRequest_1.setRequestMethod("GET");
						urlConn_tHttpRequest_1.setDoOutput(true);
						urlConn_tHttpRequest_1.setDoInput(true);
						urlConn_tHttpRequest_1.setUseCaches(false);

						urlConn_tHttpRequest_1.connect();

						byte[] buffer_tHttpRequest_1 = new byte[1024];
						int bos_buffer_tHttpRequest_1 = 0;
						StringBuilder sb_tHttpRequest_1 = new StringBuilder();

						if (java.net.HttpURLConnection.HTTP_OK == (urlConn_tHttpRequest_1
								.getResponseCode())) {
							java.io.InputStream bis_tHttpRequest_1 = new java.io.BufferedInputStream(
									urlConn_tHttpRequest_1.getInputStream());
							while ((bos_buffer_tHttpRequest_1 = bis_tHttpRequest_1
									.read(buffer_tHttpRequest_1)) != -1) {
								sb_tHttpRequest_1.append(new String(
										buffer_tHttpRequest_1, 0,
										bos_buffer_tHttpRequest_1));
							}
							bis_tHttpRequest_1.close();
						} else {
							System.err.println(urlConn_tHttpRequest_1
									.getResponseCode()
									+ " "
									+ urlConn_tHttpRequest_1
											.getResponseMessage());
						}

						row47.request = row46.request;
						row47.ns = row46.ns;
						row47.id = row46.id;
						row47.Accept = row46.Accept;
						row47.ResponseContent = sb_tHttpRequest_1.toString();
						urlConn_tHttpRequest_1.disconnect();

						tos_count_tHttpRequest_1++;

						/**
						 * [tHttpRequest_1 main ] stop
						 */

						/**
						 * [tJavaRow_10 main ] start
						 */

						currentComponent = "tJavaRow_10";

						row48.string = row47.ResponseContent;

						nb_line_tJavaRow_10++;

						tos_count_tJavaRow_10++;

						/**
						 * [tJavaRow_10 main ] stop
						 */

						/**
						 * [tRESTResponse_7 main ] start
						 */

						currentComponent = "tRESTResponse_7";

						if (globalMap.containsKey("restResponse")) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_7 = 200;

							Object restProviderResponse_tRESTResponse_7 = null;
							restProviderResponse_tRESTResponse_7 = row48.string;

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_7 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);
							restProviderResponseHeaders_tRESTResponse_7.put(
									"Content-Type", context.format);

							java.util.Map<String, Object> restResponse_tRESTResponse_7 = new java.util.HashMap<String, Object>();
							restResponse_tRESTResponse_7.put("BODY",
									restProviderResponse_tRESTResponse_7);
							restResponse_tRESTResponse_7.put("STATUS",
									restProviderStatusCode_tRESTResponse_7);
							restResponse_tRESTResponse_7
									.put("HEADERS",
											restProviderResponseHeaders_tRESTResponse_7);
							restResponse_tRESTResponse_7.put(
									"drop.json.root.element",
									Boolean.valueOf(false));
							globalMap.put("restResponse",
									restResponse_tRESTResponse_7);

						}

						tos_count_tRESTResponse_7++;

						/**
						 * [tRESTResponse_7 main ] stop
						 */

					} // End of branch "queryall"

					/**
					 * [tRESTRequest_1_In end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					ok_Hash.put("tRESTRequest_1_In", true);
					end_Hash.put("tRESTRequest_1_In",
							System.currentTimeMillis());

					/**
					 * [tRESTRequest_1_In end ] stop
					 */

					/**
					 * [tFlowToIterate_3 end ] start
					 */

					currentComponent = "tFlowToIterate_3";

					globalMap.put("tFlowToIterate_3_NB_LINE",
							nb_line_tFlowToIterate_3);

					ok_Hash.put("tFlowToIterate_3", true);
					end_Hash.put("tFlowToIterate_3", System.currentTimeMillis());

					/**
					 * [tFlowToIterate_3 end ] stop
					 */

					/**
					 * [tLogRow_2 end ] start
					 */

					currentComponent = "tLogRow_2";

					// ////
					// ////
					globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

					// /////////////////////

					ok_Hash.put("tLogRow_2", true);
					end_Hash.put("tLogRow_2", System.currentTimeMillis());

					/**
					 * [tLogRow_2 end ] stop
					 */

					/**
					 * [tJavaRow_5 end ] start
					 */

					currentComponent = "tJavaRow_5";

					globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);

					ok_Hash.put("tJavaRow_5", true);
					end_Hash.put("tJavaRow_5", System.currentTimeMillis());

					/**
					 * [tJavaRow_5 end ] stop
					 */

					/**
					 * [tFlowToIterate_6 end ] start
					 */

					currentComponent = "tFlowToIterate_6";

					globalMap.put("tFlowToIterate_6_NB_LINE",
							nb_line_tFlowToIterate_6);

					ok_Hash.put("tFlowToIterate_6", true);
					end_Hash.put("tFlowToIterate_6", System.currentTimeMillis());

					/**
					 * [tFlowToIterate_6 end ] stop
					 */

					/**
					 * [tLogRow_21 end ] start
					 */

					currentComponent = "tLogRow_21";

					// ////
					// ////
					globalMap.put("tLogRow_21_NB_LINE", nb_line_tLogRow_21);

					// /////////////////////

					ok_Hash.put("tLogRow_21", true);
					end_Hash.put("tLogRow_21", System.currentTimeMillis());

					/**
					 * [tLogRow_21 end ] stop
					 */

					/**
					 * [tLogRow_8 end ] start
					 */

					currentComponent = "tLogRow_8";

					// ////
					// ////
					globalMap.put("tLogRow_8_NB_LINE", nb_line_tLogRow_8);

					// /////////////////////

					ok_Hash.put("tLogRow_8", true);
					end_Hash.put("tLogRow_8", System.currentTimeMillis());

					/**
					 * [tLogRow_8 end ] stop
					 */

					/**
					 * [tJavaRow_11 end ] start
					 */

					currentComponent = "tJavaRow_11";

					globalMap.put("tJavaRow_11_NB_LINE", nb_line_tJavaRow_11);

					ok_Hash.put("tJavaRow_11", true);
					end_Hash.put("tJavaRow_11", System.currentTimeMillis());

					/**
					 * [tJavaRow_11 end ] stop
					 */

					/**
					 * [tFlowToIterate_12 end ] start
					 */

					currentComponent = "tFlowToIterate_12";

					globalMap.put("tFlowToIterate_12_NB_LINE",
							nb_line_tFlowToIterate_12);

					ok_Hash.put("tFlowToIterate_12", true);
					end_Hash.put("tFlowToIterate_12",
							System.currentTimeMillis());

					/**
					 * [tFlowToIterate_12 end ] stop
					 */

					/**
					 * [tLogRow_14 end ] start
					 */

					currentComponent = "tLogRow_14";

					// ////
					// ////
					globalMap.put("tLogRow_14_NB_LINE", nb_line_tLogRow_14);

					// /////////////////////

					ok_Hash.put("tLogRow_14", true);
					end_Hash.put("tLogRow_14", System.currentTimeMillis());

					/**
					 * [tLogRow_14 end ] stop
					 */

					/**
					 * [tJavaRow_12 end ] start
					 */

					currentComponent = "tJavaRow_12";

					globalMap.put("tJavaRow_12_NB_LINE", nb_line_tJavaRow_12);

					ok_Hash.put("tJavaRow_12", true);
					end_Hash.put("tJavaRow_12", System.currentTimeMillis());

					/**
					 * [tJavaRow_12 end ] stop
					 */

					/**
					 * [tFlowToIterate_17 end ] start
					 */

					currentComponent = "tFlowToIterate_17";

					globalMap.put("tFlowToIterate_17_NB_LINE",
							nb_line_tFlowToIterate_17);

					ok_Hash.put("tFlowToIterate_17", true);
					end_Hash.put("tFlowToIterate_17",
							System.currentTimeMillis());

					/**
					 * [tFlowToIterate_17 end ] stop
					 */

					/**
					 * [tLogRow_9 end ] start
					 */

					currentComponent = "tLogRow_9";

					// ////
					// ////
					globalMap.put("tLogRow_9_NB_LINE", nb_line_tLogRow_9);

					// /////////////////////

					ok_Hash.put("tLogRow_9", true);
					end_Hash.put("tLogRow_9", System.currentTimeMillis());

					/**
					 * [tLogRow_9 end ] stop
					 */

					/**
					 * [tJavaRow_3 end ] start
					 */

					currentComponent = "tJavaRow_3";

					globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

					ok_Hash.put("tJavaRow_3", true);
					end_Hash.put("tJavaRow_3", System.currentTimeMillis());

					/**
					 * [tJavaRow_3 end ] stop
					 */

					/**
					 * [tFlowToIterate_5 end ] start
					 */

					currentComponent = "tFlowToIterate_5";

					globalMap.put("tFlowToIterate_5_NB_LINE",
							nb_line_tFlowToIterate_5);

					ok_Hash.put("tFlowToIterate_5", true);
					end_Hash.put("tFlowToIterate_5", System.currentTimeMillis());

					/**
					 * [tFlowToIterate_5 end ] stop
					 */

					/**
					 * [tFlowToIterate_18 end ] start
					 */

					currentComponent = "tFlowToIterate_18";

					globalMap.put("tFlowToIterate_18_NB_LINE",
							nb_line_tFlowToIterate_18);

					ok_Hash.put("tFlowToIterate_18", true);
					end_Hash.put("tFlowToIterate_18",
							System.currentTimeMillis());

					/**
					 * [tFlowToIterate_18 end ] stop
					 */

					/**
					 * [tLogRow_30 end ] start
					 */

					currentComponent = "tLogRow_30";

					// ////
					// ////
					globalMap.put("tLogRow_30_NB_LINE", nb_line_tLogRow_30);

					// /////////////////////

					ok_Hash.put("tLogRow_30", true);
					end_Hash.put("tLogRow_30", System.currentTimeMillis());

					/**
					 * [tLogRow_30 end ] stop
					 */

					/**
					 * [tJavaRow_18 end ] start
					 */

					currentComponent = "tJavaRow_18";

					globalMap.put("tJavaRow_18_NB_LINE", nb_line_tJavaRow_18);

					ok_Hash.put("tJavaRow_18", true);
					end_Hash.put("tJavaRow_18", System.currentTimeMillis());

					/**
					 * [tJavaRow_18 end ] stop
					 */

					/**
					 * [tFlowToIterate_29 end ] start
					 */

					currentComponent = "tFlowToIterate_29";

					globalMap.put("tFlowToIterate_29_NB_LINE",
							nb_line_tFlowToIterate_29);

					ok_Hash.put("tFlowToIterate_29", true);
					end_Hash.put("tFlowToIterate_29",
							System.currentTimeMillis());

					/**
					 * [tFlowToIterate_29 end ] stop
					 */

					/**
					 * [tLogRow_28 end ] start
					 */

					currentComponent = "tLogRow_28";

					// ////
					// ////
					globalMap.put("tLogRow_28_NB_LINE", nb_line_tLogRow_28);

					// /////////////////////

					ok_Hash.put("tLogRow_28", true);
					end_Hash.put("tLogRow_28", System.currentTimeMillis());

					/**
					 * [tLogRow_28 end ] stop
					 */

					/**
					 * [tJavaRow_17 end ] start
					 */

					currentComponent = "tJavaRow_17";

					globalMap.put("tJavaRow_17_NB_LINE", nb_line_tJavaRow_17);

					ok_Hash.put("tJavaRow_17", true);
					end_Hash.put("tJavaRow_17", System.currentTimeMillis());

					/**
					 * [tJavaRow_17 end ] stop
					 */

					/**
					 * [tFlowToIterate_26 end ] start
					 */

					currentComponent = "tFlowToIterate_26";

					globalMap.put("tFlowToIterate_26_NB_LINE",
							nb_line_tFlowToIterate_26);

					ok_Hash.put("tFlowToIterate_26", true);
					end_Hash.put("tFlowToIterate_26",
							System.currentTimeMillis());

					/**
					 * [tFlowToIterate_26 end ] stop
					 */

					/**
					 * [tLogRow_31 end ] start
					 */

					currentComponent = "tLogRow_31";

					// ////
					// ////
					globalMap.put("tLogRow_31_NB_LINE", nb_line_tLogRow_31);

					// /////////////////////

					ok_Hash.put("tLogRow_31", true);
					end_Hash.put("tLogRow_31", System.currentTimeMillis());

					/**
					 * [tLogRow_31 end ] stop
					 */

					/**
					 * [tJavaRow_16 end ] start
					 */

					currentComponent = "tJavaRow_16";

					globalMap.put("tJavaRow_16_NB_LINE", nb_line_tJavaRow_16);

					ok_Hash.put("tJavaRow_16", true);
					end_Hash.put("tJavaRow_16", System.currentTimeMillis());

					/**
					 * [tJavaRow_16 end ] stop
					 */

					/**
					 * [tFlowToIterate_25 end ] start
					 */

					currentComponent = "tFlowToIterate_25";

					globalMap.put("tFlowToIterate_25_NB_LINE",
							nb_line_tFlowToIterate_25);

					ok_Hash.put("tFlowToIterate_25", true);
					end_Hash.put("tFlowToIterate_25",
							System.currentTimeMillis());

					/**
					 * [tFlowToIterate_25 end ] stop
					 */

					/**
					 * [tLogRow_5 end ] start
					 */

					currentComponent = "tLogRow_5";

					// ////
					// ////
					globalMap.put("tLogRow_5_NB_LINE", nb_line_tLogRow_5);

					// /////////////////////

					ok_Hash.put("tLogRow_5", true);
					end_Hash.put("tLogRow_5", System.currentTimeMillis());

					/**
					 * [tLogRow_5 end ] stop
					 */

					/**
					 * [tJavaRow_7 end ] start
					 */

					currentComponent = "tJavaRow_7";

					globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);

					ok_Hash.put("tJavaRow_7", true);
					end_Hash.put("tJavaRow_7", System.currentTimeMillis());

					/**
					 * [tJavaRow_7 end ] stop
					 */

					/**
					 * [tFlowToIterate_7 end ] start
					 */

					currentComponent = "tFlowToIterate_7";

					globalMap.put("tFlowToIterate_7_NB_LINE",
							nb_line_tFlowToIterate_7);

					ok_Hash.put("tFlowToIterate_7", true);
					end_Hash.put("tFlowToIterate_7", System.currentTimeMillis());

					/**
					 * [tFlowToIterate_7 end ] stop
					 */

					/**
					 * [tLogRow_1 end ] start
					 */

					currentComponent = "tLogRow_1";

					// ////
					// ////
					globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

					// /////////////////////

					ok_Hash.put("tLogRow_1", true);
					end_Hash.put("tLogRow_1", System.currentTimeMillis());

					/**
					 * [tLogRow_1 end ] stop
					 */

					/**
					 * [tJavaRow_1 end ] start
					 */

					currentComponent = "tJavaRow_1";

					globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

					ok_Hash.put("tJavaRow_1", true);
					end_Hash.put("tJavaRow_1", System.currentTimeMillis());

					/**
					 * [tJavaRow_1 end ] stop
					 */

					/**
					 * [tFlowToIterate_1 end ] start
					 */

					currentComponent = "tFlowToIterate_1";

					globalMap.put("tFlowToIterate_1_NB_LINE",
							nb_line_tFlowToIterate_1);

					ok_Hash.put("tFlowToIterate_1", true);
					end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

					/**
					 * [tFlowToIterate_1 end ] stop
					 */

					/**
					 * [tLogRow_3 end ] start
					 */

					currentComponent = "tLogRow_3";

					// ////
					// ////
					globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

					// /////////////////////

					ok_Hash.put("tLogRow_3", true);
					end_Hash.put("tLogRow_3", System.currentTimeMillis());

					/**
					 * [tLogRow_3 end ] stop
					 */

					/**
					 * [tJavaRow_2 end ] start
					 */

					currentComponent = "tJavaRow_2";

					globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

					ok_Hash.put("tJavaRow_2", true);
					end_Hash.put("tJavaRow_2", System.currentTimeMillis());

					/**
					 * [tJavaRow_2 end ] stop
					 */

					/**
					 * [tFlowToIterate_2 end ] start
					 */

					currentComponent = "tFlowToIterate_2";

					globalMap.put("tFlowToIterate_2_NB_LINE",
							nb_line_tFlowToIterate_2);

					ok_Hash.put("tFlowToIterate_2", true);
					end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());

					/**
					 * [tFlowToIterate_2 end ] stop
					 */

					/**
					 * [tLogRow_4 end ] start
					 */

					currentComponent = "tLogRow_4";

					// ////
					// ////
					globalMap.put("tLogRow_4_NB_LINE", nb_line_tLogRow_4);

					// /////////////////////

					ok_Hash.put("tLogRow_4", true);
					end_Hash.put("tLogRow_4", System.currentTimeMillis());

					/**
					 * [tLogRow_4 end ] stop
					 */

					/**
					 * [tJavaRow_9 end ] start
					 */

					currentComponent = "tJavaRow_9";

					globalMap.put("tJavaRow_9_NB_LINE", nb_line_tJavaRow_9);

					ok_Hash.put("tJavaRow_9", true);
					end_Hash.put("tJavaRow_9", System.currentTimeMillis());

					/**
					 * [tJavaRow_9 end ] stop
					 */

					/**
					 * [tHttpRequest_1 end ] start
					 */

					currentComponent = "tHttpRequest_1";

					ok_Hash.put("tHttpRequest_1", true);
					end_Hash.put("tHttpRequest_1", System.currentTimeMillis());

					/**
					 * [tHttpRequest_1 end ] stop
					 */

					/**
					 * [tJavaRow_10 end ] start
					 */

					currentComponent = "tJavaRow_10";

					globalMap.put("tJavaRow_10_NB_LINE", nb_line_tJavaRow_10);

					ok_Hash.put("tJavaRow_10", true);
					end_Hash.put("tJavaRow_10", System.currentTimeMillis());

					/**
					 * [tJavaRow_10 end ] stop
					 */

					/**
					 * [tRESTResponse_7 end ] start
					 */

					currentComponent = "tRESTResponse_7";

					ok_Hash.put("tRESTResponse_7", true);
					end_Hash.put("tRESTResponse_7", System.currentTimeMillis());

					/**
					 * [tRESTResponse_7 end ] stop
					 */

					/**
					 * [tRESTRequest_1_Loop end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

				} catch (Exception e_tRESTRequest_1) {
					new TalendException(e_tRESTRequest_1, currentComponent,
							globalMap).printStackTrace();
					if (!globalMap.containsKey("restResponse")) {
						java.util.Map<String, Object> restFault_tRESTRequest_1 = new java.util.HashMap<String, Object>();
						restFault_tRESTRequest_1.put("STATUS", 500);
						restFault_tRESTRequest_1.put("BODY",
								e_tRESTRequest_1.getMessage());
						globalMap.put("restResponse", restFault_tRESTRequest_1);
					}
					return;
				}
				nb_line_tRESTRequest_1++;
				globalMap.put("tRESTRequest_1_NB_LINE", nb_line_tRESTRequest_1);

				ok_Hash.put("tRESTRequest_1_Loop", true);
				end_Hash.put("tRESTRequest_1_Loop", System.currentTimeMillis());

				/**
				 * [tRESTRequest_1_Loop end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tDenormalize_1_ArrayIn"
			globalMap.remove("tDenormalize_1");

			// free memory for "tSortRow_2_SortIn"
			globalMap.remove("tSortRow_2");

			// free memory for "tDenormalize_2_ArrayIn"
			globalMap.remove("tDenormalize_2");

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			try {

				/**
				 * [tRESTRequest_1_Loop finally ] start
				 */

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_Loop";

				/**
				 * [tRESTRequest_1_Loop finally ] stop
				 */

				/**
				 * [tRESTRequest_1_In finally ] start
				 */

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_In";

				/**
				 * [tRESTRequest_1_In finally ] stop
				 */

				/**
				 * [tFlowToIterate_3 finally ] start
				 */

				currentComponent = "tFlowToIterate_3";

				/**
				 * [tFlowToIterate_3 finally ] stop
				 */

				/**
				 * [tFixedFlowInput_1 finally ] start
				 */

				currentComponent = "tFixedFlowInput_1";

				/**
				 * [tFixedFlowInput_1 finally ] stop
				 */

				/**
				 * [tRESTResponse_6 finally ] start
				 */

				currentComponent = "tRESTResponse_6";

				/**
				 * [tRESTResponse_6 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tJavaRow_5 finally ] start
				 */

				currentComponent = "tJavaRow_5";

				/**
				 * [tJavaRow_5 finally ] stop
				 */

				/**
				 * [tFlowToIterate_6 finally ] start
				 */

				currentComponent = "tFlowToIterate_6";

				/**
				 * [tFlowToIterate_6 finally ] stop
				 */

				/**
				 * [tRunJob_5 finally ] start
				 */

				currentComponent = "tRunJob_5";

				/**
				 * [tRunJob_5 finally ] stop
				 */

				/**
				 * [tJavaRow_13 finally ] start
				 */

				currentComponent = "tJavaRow_13";

				/**
				 * [tJavaRow_13 finally ] stop
				 */

				/**
				 * [tRESTResponse_9 finally ] start
				 */

				currentComponent = "tRESTResponse_9";

				/**
				 * [tRESTResponse_9 finally ] stop
				 */

				/**
				 * [tLogRow_21 finally ] start
				 */

				currentComponent = "tLogRow_21";

				/**
				 * [tLogRow_21 finally ] stop
				 */

				/**
				 * [tLogRow_8 finally ] start
				 */

				currentComponent = "tLogRow_8";

				/**
				 * [tLogRow_8 finally ] stop
				 */

				/**
				 * [tJavaRow_11 finally ] start
				 */

				currentComponent = "tJavaRow_11";

				/**
				 * [tJavaRow_11 finally ] stop
				 */

				/**
				 * [tFlowToIterate_12 finally ] start
				 */

				currentComponent = "tFlowToIterate_12";

				/**
				 * [tFlowToIterate_12 finally ] stop
				 */

				/**
				 * [tSparqlSelectRequest_6 finally ] start
				 */

				currentComponent = "tSparqlSelectRequest_6";

				/**
				 * [tSparqlSelectRequest_6 finally ] stop
				 */

				/**
				 * [tReplace_6 finally ] start
				 */

				currentComponent = "tReplace_6";

				/**
				 * [tReplace_6 finally ] stop
				 */

				/**
				 * [tLogRow_18 finally ] start
				 */

				currentComponent = "tLogRow_18";

				/**
				 * [tLogRow_18 finally ] stop
				 */

				/**
				 * [tFlowToIterate_13 finally ] start
				 */

				currentComponent = "tFlowToIterate_13";

				/**
				 * [tFlowToIterate_13 finally ] stop
				 */

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */

				/**
				 * [tRESTResponse_5 finally ] start
				 */

				currentComponent = "tRESTResponse_5";

				/**
				 * [tRESTResponse_5 finally ] stop
				 */

				/**
				 * [tLogRow_14 finally ] start
				 */

				currentComponent = "tLogRow_14";

				/**
				 * [tLogRow_14 finally ] stop
				 */

				/**
				 * [tJavaRow_12 finally ] start
				 */

				currentComponent = "tJavaRow_12";

				/**
				 * [tJavaRow_12 finally ] stop
				 */

				/**
				 * [tFlowToIterate_17 finally ] start
				 */

				currentComponent = "tFlowToIterate_17";

				/**
				 * [tFlowToIterate_17 finally ] stop
				 */

				/**
				 * [tSparqlSelectRequest_3 finally ] start
				 */

				currentComponent = "tSparqlSelectRequest_3";

				/**
				 * [tSparqlSelectRequest_3 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tLogRow_19 finally ] start
				 */

				currentComponent = "tLogRow_19";

				/**
				 * [tLogRow_19 finally ] stop
				 */

				/**
				 * [tReplace_5 finally ] start
				 */

				currentComponent = "tReplace_5";

				/**
				 * [tReplace_5 finally ] stop
				 */

				/**
				 * [tRESTResponse_13 finally ] start
				 */

				currentComponent = "tRESTResponse_13";

				/**
				 * [tRESTResponse_13 finally ] stop
				 */

				/**
				 * [tLogRow_9 finally ] start
				 */

				currentComponent = "tLogRow_9";

				/**
				 * [tLogRow_9 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tFlowToIterate_5 finally ] start
				 */

				currentComponent = "tFlowToIterate_5";

				/**
				 * [tFlowToIterate_5 finally ] stop
				 */

				/**
				 * [tSparqlSelectRequest_1 finally ] start
				 */

				currentComponent = "tSparqlSelectRequest_1";

				/**
				 * [tSparqlSelectRequest_1 finally ] stop
				 */

				/**
				 * [tLogRow_15 finally ] start
				 */

				currentComponent = "tLogRow_15";

				/**
				 * [tLogRow_15 finally ] stop
				 */

				/**
				 * [tJavaRow_6 finally ] start
				 */

				currentComponent = "tJavaRow_6";

				/**
				 * [tJavaRow_6 finally ] stop
				 */

				/**
				 * [tSortRow_1_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				/**
				 * [tSortRow_1_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_1_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				/**
				 * [tSortRow_1_SortIn finally ] stop
				 */

				/**
				 * [tDenormalize_2_DenormalizeOut finally ] start
				 */

				currentVirtualComponent = "tDenormalize_2";

				currentComponent = "tDenormalize_2_DenormalizeOut";

				/**
				 * [tDenormalize_2_DenormalizeOut finally ] stop
				 */

				/**
				 * [tDenormalize_2_ArrayIn finally ] start
				 */

				currentVirtualComponent = "tDenormalize_2";

				currentComponent = "tDenormalize_2_ArrayIn";

				/**
				 * [tDenormalize_2_ArrayIn finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

				/**
				 * [tRESTResponse_3 finally ] start
				 */

				currentComponent = "tRESTResponse_3";

				/**
				 * [tRESTResponse_3 finally ] stop
				 */

				/**
				 * [tFlowToIterate_18 finally ] start
				 */

				currentComponent = "tFlowToIterate_18";

				/**
				 * [tFlowToIterate_18 finally ] stop
				 */

				/**
				 * [tFixedFlowInput_7 finally ] start
				 */

				currentComponent = "tFixedFlowInput_7";

				/**
				 * [tFixedFlowInput_7 finally ] stop
				 */

				/**
				 * [tRESTResponse_17 finally ] start
				 */

				currentComponent = "tRESTResponse_17";

				/**
				 * [tRESTResponse_17 finally ] stop
				 */

				/**
				 * [tLogRow_30 finally ] start
				 */

				currentComponent = "tLogRow_30";

				/**
				 * [tLogRow_30 finally ] stop
				 */

				/**
				 * [tJavaRow_18 finally ] start
				 */

				currentComponent = "tJavaRow_18";

				/**
				 * [tJavaRow_18 finally ] stop
				 */

				/**
				 * [tFlowToIterate_29 finally ] start
				 */

				currentComponent = "tFlowToIterate_29";

				/**
				 * [tFlowToIterate_29 finally ] stop
				 */

				/**
				 * [tRunJob_10 finally ] start
				 */

				currentComponent = "tRunJob_10";

				/**
				 * [tRunJob_10 finally ] stop
				 */

				/**
				 * [tRESTResponse_16 finally ] start
				 */

				currentComponent = "tRESTResponse_16";

				/**
				 * [tRESTResponse_16 finally ] stop
				 */

				/**
				 * [tLogRow_28 finally ] start
				 */

				currentComponent = "tLogRow_28";

				/**
				 * [tLogRow_28 finally ] stop
				 */

				/**
				 * [tJavaRow_17 finally ] start
				 */

				currentComponent = "tJavaRow_17";

				/**
				 * [tJavaRow_17 finally ] stop
				 */

				/**
				 * [tFlowToIterate_26 finally ] start
				 */

				currentComponent = "tFlowToIterate_26";

				/**
				 * [tFlowToIterate_26 finally ] stop
				 */

				/**
				 * [tRunJob_12 finally ] start
				 */

				currentComponent = "tRunJob_12";

				/**
				 * [tRunJob_12 finally ] stop
				 */

				/**
				 * [tRESTResponse_20 finally ] start
				 */

				currentComponent = "tRESTResponse_20";

				/**
				 * [tRESTResponse_20 finally ] stop
				 */

				/**
				 * [tLogRow_31 finally ] start
				 */

				currentComponent = "tLogRow_31";

				/**
				 * [tLogRow_31 finally ] stop
				 */

				/**
				 * [tJavaRow_16 finally ] start
				 */

				currentComponent = "tJavaRow_16";

				/**
				 * [tJavaRow_16 finally ] stop
				 */

				/**
				 * [tFlowToIterate_25 finally ] start
				 */

				currentComponent = "tFlowToIterate_25";

				/**
				 * [tFlowToIterate_25 finally ] stop
				 */

				/**
				 * [tRunJob_9 finally ] start
				 */

				currentComponent = "tRunJob_9";

				/**
				 * [tRunJob_9 finally ] stop
				 */

				/**
				 * [tRESTResponse_15 finally ] start
				 */

				currentComponent = "tRESTResponse_15";

				/**
				 * [tRESTResponse_15 finally ] stop
				 */

				/**
				 * [tLogRow_5 finally ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 finally ] stop
				 */

				/**
				 * [tJavaRow_7 finally ] start
				 */

				currentComponent = "tJavaRow_7";

				/**
				 * [tJavaRow_7 finally ] stop
				 */

				/**
				 * [tFlowToIterate_7 finally ] start
				 */

				currentComponent = "tFlowToIterate_7";

				/**
				 * [tFlowToIterate_7 finally ] stop
				 */

				/**
				 * [tSparqlSelectRequest_2 finally ] start
				 */

				currentComponent = "tSparqlSelectRequest_2";

				/**
				 * [tSparqlSelectRequest_2 finally ] stop
				 */

				/**
				 * [tLogRow_6 finally ] start
				 */

				currentComponent = "tLogRow_6";

				/**
				 * [tLogRow_6 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tSortRow_2_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				/**
				 * [tSortRow_2_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_2_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortIn";

				/**
				 * [tSortRow_2_SortIn finally ] stop
				 */

				/**
				 * [tDenormalize_1_DenormalizeOut finally ] start
				 */

				currentVirtualComponent = "tDenormalize_1";

				currentComponent = "tDenormalize_1_DenormalizeOut";

				/**
				 * [tDenormalize_1_DenormalizeOut finally ] stop
				 */

				/**
				 * [tDenormalize_1_ArrayIn finally ] start
				 */

				currentVirtualComponent = "tDenormalize_1";

				currentComponent = "tDenormalize_1_ArrayIn";

				/**
				 * [tDenormalize_1_ArrayIn finally ] stop
				 */

				/**
				 * [tJavaRow_8 finally ] start
				 */

				currentComponent = "tJavaRow_8";

				/**
				 * [tJavaRow_8 finally ] stop
				 */

				/**
				 * [tRESTResponse_8 finally ] start
				 */

				currentComponent = "tRESTResponse_8";

				/**
				 * [tRESTResponse_8 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */

				/**
				 * [tRESTResponse_1 finally ] start
				 */

				currentComponent = "tRESTResponse_1";

				/**
				 * [tRESTResponse_1 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tFlowToIterate_2 finally ] start
				 */

				currentComponent = "tFlowToIterate_2";

				/**
				 * [tFlowToIterate_2 finally ] stop
				 */

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */

				/**
				 * [tRESTResponse_4 finally ] start
				 */

				currentComponent = "tRESTResponse_4";

				/**
				 * [tRESTResponse_4 finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

				/**
				 * [tJavaRow_9 finally ] start
				 */

				currentComponent = "tJavaRow_9";

				/**
				 * [tJavaRow_9 finally ] stop
				 */

				/**
				 * [tHttpRequest_1 finally ] start
				 */

				currentComponent = "tHttpRequest_1";

				/**
				 * [tHttpRequest_1 finally ] stop
				 */

				/**
				 * [tJavaRow_10 finally ] start
				 */

				currentComponent = "tJavaRow_10";

				/**
				 * [tJavaRow_10 finally ] stop
				 */

				/**
				 * [tRESTResponse_7 finally ] start
				 */

				currentComponent = "tRESTResponse_7";

				/**
				 * [tRESTResponse_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final REST_Bio2RDF_9000 REST_Bio2RDF_9000Class = new REST_Bio2RDF_9000();

		int exitCode = REST_Bio2RDF_9000Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = REST_Bio2RDF_9000.class
					.getClassLoader().getResourceAsStream(
							"bio2rdf/rest_bio2rdf_9000_2_4/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.pageTest = (String) context.getProperty("pageTest");
			context.request = (String) context.getProperty("request");
			context.message = (String) context.getProperty("message");
			context.ns = (String) context.getProperty("ns");
			context.id = (String) context.getProperty("id");
			context.format = (String) context.getProperty("format");
			context.localhost = (String) context.getProperty("localhost");
			context.sparql = (String) context.getProperty("sparql");
			context.database_endpoint = (String) context
					.getProperty("database_endpoint");
			context.query = (String) context.getProperty("query");
			try {
				context.debug = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("debug"));
			} catch (NumberFormatException e) {
				context.debug = null;
			}
			context.namespace = (String) context.getProperty("namespace");
			context.database_endpoint1 = (String) context
					.getProperty("database_endpoint1");
			context.localhost1 = (String) context.getProperty("localhost1");
			context.localhost2 = (String) context.getProperty("localhost2");
			context.uri = (String) context.getProperty("uri");
			context.parm1 = (String) context.getProperty("parm1");
			context.parm2 = (String) context.getProperty("parm2");
			context.parm3 = (String) context.getProperty("parm3");
			context.restUrl = (String) context.getProperty("restUrl");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("pageTest")) {
				context.pageTest = (String) parentContextMap.get("pageTest");
			}
			if (parentContextMap.containsKey("request")) {
				context.request = (String) parentContextMap.get("request");
			}
			if (parentContextMap.containsKey("message")) {
				context.message = (String) parentContextMap.get("message");
			}
			if (parentContextMap.containsKey("ns")) {
				context.ns = (String) parentContextMap.get("ns");
			}
			if (parentContextMap.containsKey("id")) {
				context.id = (String) parentContextMap.get("id");
			}
			if (parentContextMap.containsKey("format")) {
				context.format = (String) parentContextMap.get("format");
			}
			if (parentContextMap.containsKey("localhost")) {
				context.localhost = (String) parentContextMap.get("localhost");
			}
			if (parentContextMap.containsKey("sparql")) {
				context.sparql = (String) parentContextMap.get("sparql");
			}
			if (parentContextMap.containsKey("database_endpoint")) {
				context.database_endpoint = (String) parentContextMap
						.get("database_endpoint");
			}
			if (parentContextMap.containsKey("query")) {
				context.query = (String) parentContextMap.get("query");
			}
			if (parentContextMap.containsKey("debug")) {
				context.debug = (Boolean) parentContextMap.get("debug");
			}
			if (parentContextMap.containsKey("namespace")) {
				context.namespace = (String) parentContextMap.get("namespace");
			}
			if (parentContextMap.containsKey("database_endpoint1")) {
				context.database_endpoint1 = (String) parentContextMap
						.get("database_endpoint1");
			}
			if (parentContextMap.containsKey("localhost1")) {
				context.localhost1 = (String) parentContextMap
						.get("localhost1");
			}
			if (parentContextMap.containsKey("localhost2")) {
				context.localhost2 = (String) parentContextMap
						.get("localhost2");
			}
			if (parentContextMap.containsKey("uri")) {
				context.uri = (String) parentContextMap.get("uri");
			}
			if (parentContextMap.containsKey("parm1")) {
				context.parm1 = (String) parentContextMap.get("parm1");
			}
			if (parentContextMap.containsKey("parm2")) {
				context.parm2 = (String) parentContextMap.get("parm2");
			}
			if (parentContextMap.containsKey("parm3")) {
				context.parm3 = (String) parentContextMap.get("parm3");
			}
			if (parentContextMap.containsKey("restUrl")) {
				context.restUrl = (String) parentContextMap.get("restUrl");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tRESTRequest_1_LoopProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRESTRequest_1_Loop) {
			globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", -1);

			e_tRESTRequest_1_Loop.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : REST_Bio2RDF_9000");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 588061 characters generated by Talend Open Studio for ESB on the 23 juillet
 * 2014 16:21:10 EDT
 ************************************************************************************************/
