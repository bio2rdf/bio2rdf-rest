// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bio2rdf.generate_json_datahub_file_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.BioUtil;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.MD5;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: generate_json_datahub_file Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.5.0.r117820
 * @status 
 */
public class generate_json_datahub_file implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (inputFile != null) {

				this.setProperty("inputFile", inputFile.toString());

			}

			if (namespace != null) {

				this.setProperty("namespace", namespace.toString());

			}

			if (extras != null) {

				this.setProperty("extras", extras.toString());

			}

			if (jsonString != null) {

				this.setProperty("jsonString", jsonString.toString());

			}

			if (workspace != null) {

				this.setProperty("workspace", workspace.toString());

			}

			if (authorizationKey != null) {

				this.setProperty("authorizationKey",
						authorizationKey.toString());

			}

			if (downloadResource != null) {

				this.setProperty("downloadResource",
						downloadResource.toString());

			}

			if (resourceCount != null) {

				this.setProperty("resourceCount", resourceCount.toString());

			}

		}

		public String inputFile;

		public String getInputFile() {
			return this.inputFile;
		}

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String extras;

		public String getExtras() {
			return this.extras;
		}

		public String jsonString;

		public String getJsonString() {
			return this.jsonString;
		}

		public String workspace;

		public String getWorkspace() {
			return this.workspace;
		}

		public String authorizationKey;

		public String getAuthorizationKey() {
			return this.authorizationKey;
		}

		public String downloadResource;

		public String getDownloadResource() {
			return this.downloadResource;
		}

		public Integer resourceCount;

		public Integer getResourceCount() {
			return this.resourceCount;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "generate_json_datahub_file";
	private final String projectName = "BIO2RDF";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					generate_json_datahub_file.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(generate_json_datahub_file.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tNTriplesTemplate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPrejob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSparqlSelectRequest_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostjob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHttpRequest_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractRegexFields_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSampleRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractRegexFields_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSparqlSelectRequest_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHttpRequest_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_generate_json_datahub_file = new byte[0];
		static byte[] commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[0];

		public String RDF;

		public String getRDF() {
			return this.RDF;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_generate_json_datahub_file.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_generate_json_datahub_file.length == 0) {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_generate_json_datahub_file) {

				try {

					int length = 0;

					this.RDF = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.RDF, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RDF=" + RDF);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_generate_json_datahub_file = new byte[0];
		static byte[] commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[0];

		public String RDF;

		public String getRDF() {
			return this.RDF;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_generate_json_datahub_file.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_generate_json_datahub_file.length == 0) {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_generate_json_datahub_file) {

				try {

					int length = 0;

					this.RDF = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.RDF, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RDF=" + RDF);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_generate_json_datahub_file = new byte[0];
		static byte[] commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[0];

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String releaseDate;

		public String getReleaseDate() {
			return this.releaseDate;
		}

		public String rSparqlEndpoint;

		public String getRSparqlEndpoint() {
			return this.rSparqlEndpoint;
		}

		public String rDownloadPage;

		public String getRDownloadPage() {
			return this.rDownloadPage;
		}

		public String rExample;

		public String getRExample() {
			return this.rExample;
		}

		public String rDatasetDescriptionHTML;

		public String getRDatasetDescriptionHTML() {
			return this.rDatasetDescriptionHTML;
		}

		public String rDatasetDescriptionRDF;

		public String getRDatasetDescriptionRDF() {
			return this.rDatasetDescriptionRDF;
		}

		public String rMappings;

		public String getRMappings() {
			return this.rMappings;
		}

		public String rDownloadFile;

		public String getRDownloadFile() {
			return this.rDownloadFile;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_generate_json_datahub_file.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_generate_json_datahub_file.length == 0) {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_generate_json_datahub_file) {

				try {

					int length = 0;

					this.namespace = readString(dis);

					this.title = readString(dis);

					this.description = readString(dis);

					this.releaseDate = readString(dis);

					this.rSparqlEndpoint = readString(dis);

					this.rDownloadPage = readString(dis);

					this.rExample = readString(dis);

					this.rDatasetDescriptionHTML = readString(dis);

					this.rDatasetDescriptionRDF = readString(dis);

					this.rMappings = readString(dis);

					this.rDownloadFile = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.releaseDate, dos);

				// String

				writeString(this.rSparqlEndpoint, dos);

				// String

				writeString(this.rDownloadPage, dos);

				// String

				writeString(this.rExample, dos);

				// String

				writeString(this.rDatasetDescriptionHTML, dos);

				// String

				writeString(this.rDatasetDescriptionRDF, dos);

				// String

				writeString(this.rMappings, dos);

				// String

				writeString(this.rDownloadFile, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("namespace=" + namespace);
			sb.append(",title=" + title);
			sb.append(",description=" + description);
			sb.append(",releaseDate=" + releaseDate);
			sb.append(",rSparqlEndpoint=" + rSparqlEndpoint);
			sb.append(",rDownloadPage=" + rDownloadPage);
			sb.append(",rExample=" + rExample);
			sb.append(",rDatasetDescriptionHTML=" + rDatasetDescriptionHTML);
			sb.append(",rDatasetDescriptionRDF=" + rDatasetDescriptionRDF);
			sb.append(",rMappings=" + rMappings);
			sb.append(",rDownloadFile=" + rDownloadFile);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_generate_json_datahub_file = new byte[0];
		static byte[] commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[0];

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String example;

		public String getExample() {
			return this.example;
		}

		public String releaseDate;

		public String getReleaseDate() {
			return this.releaseDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_generate_json_datahub_file.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_generate_json_datahub_file.length == 0) {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_generate_json_datahub_file) {

				try {

					int length = 0;

					this.namespace = readString(dis);

					this.description = readString(dis);

					this.example = readString(dis);

					this.releaseDate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.example, dos);

				// String

				writeString(this.releaseDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("namespace=" + namespace);
			sb.append(",description=" + description);
			sb.append(",example=" + example);
			sb.append(",releaseDate=" + releaseDate);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_generate_json_datahub_file = new byte[0];
		static byte[] commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[0];

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String example;

		public String getExample() {
			return this.example;
		}

		public String releaseDate;

		public String getReleaseDate() {
			return this.releaseDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_generate_json_datahub_file.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_generate_json_datahub_file.length == 0) {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_generate_json_datahub_file) {

				try {

					int length = 0;

					this.namespace = readString(dis);

					this.description = readString(dis);

					this.example = readString(dis);

					this.releaseDate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.example, dos);

				// String

				writeString(this.releaseDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("namespace=" + namespace);
			sb.append(",description=" + description);
			sb.append(",example=" + example);
			sb.append(",releaseDate=" + releaseDate);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_generate_json_datahub_file = new byte[0];
		static byte[] commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[0];

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String example;

		public String getExample() {
			return this.example;
		}

		public String releaseDate;

		public String getReleaseDate() {
			return this.releaseDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_generate_json_datahub_file.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_generate_json_datahub_file.length == 0) {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_generate_json_datahub_file) {

				try {

					int length = 0;

					this.namespace = readString(dis);

					this.description = readString(dis);

					this.example = readString(dis);

					this.releaseDate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.example, dos);

				// String

				writeString(this.releaseDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("namespace=" + namespace);
			sb.append(",description=" + description);
			sb.append(",example=" + example);
			sb.append(",releaseDate=" + releaseDate);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row1Struct row1 = new row1Struct();
				row1Struct row8 = row1;
				out1Struct out1 = new out1Struct();
				row6Struct row6 = new row6Struct();
				row5Struct row5 = new row5Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.workspace + "datahub_import_"
								+ context.namespace + ".json"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {

						dir_tFileOutputDelimited_1.mkdirs();

					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}

				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, false),
								"ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);

				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tNTriplesTemplate_1 begin ] start
				 */

				ok_Hash.put("tNTriplesTemplate_1", false);
				start_Hash.put("tNTriplesTemplate_1",
						System.currentTimeMillis());

				currentComponent = "tNTriplesTemplate_1";

				int tos_count_tNTriplesTemplate_1 = 0;

				int nb_line_tNTriplesTemplate_1 = 0;
				int nb_line_ok_tNTriplesTemplate_1 = 0;

				/**
				 * [tNTriplesTemplate_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				int tos_count_tLogRow_2 = 0;

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = context.inputFile;
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {

							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								context.inputFile, "ISO-8859-15", "\t", "\n",
								true, 0, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {

						row3 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row3 = new row3Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row3.namespace = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row3.description = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row3.example = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row3.releaseDate = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tFilterRow_1 main ] start
							 */

							currentComponent = "tFilterRow_1";

							row1 = null;
							Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
									"&&");
							ope_tFilterRow_1
									.matches(
											(row3.namespace == null ? false
													: row3.namespace
															.matches(context.namespace) == true),
											" namespace.matches(context.namespace) == true failed");

							if (ope_tFilterRow_1.getMatchFlag()) {
								if (row1 == null) {
									row1 = new row1Struct();
								}
								row1.namespace = row3.namespace;
								row1.description = row3.description;
								row1.example = row3.example;
								row1.releaseDate = row3.releaseDate;
								nb_line_ok_tFilterRow_1++;
							} else {
								nb_line_reject_tFilterRow_1++;
							}

							nb_line_tFilterRow_1++;

							tos_count_tFilterRow_1++;

							/**
							 * [tFilterRow_1 main ] stop
							 */
							// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tLogRow_2 main ] start
								 */

								currentComponent = "tLogRow_2";

								row8 = row1;

								tos_count_tLogRow_2++;

								/**
								 * [tLogRow_2 main ] stop
								 */

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									out1 = null;

									// # Output table : 'out1'
									out1_tmp.namespace = row8.namespace;
									out1_tmp.title = row8.namespace.substring(
											0, 1).toUpperCase()
											+ row8.namespace.substring(1)
													.toLowerCase();
									out1_tmp.description = StringHandling
											.CHANGE(row8.description, "\"", "'");
									out1_tmp.releaseDate = row8.releaseDate;
									out1_tmp.rSparqlEndpoint = "http://"
											+ row8.namespace
											+ ".bio2rdf.org/sparql";
									out1_tmp.rDownloadPage = "http://download.bio2rdf.org/current/"
											+ row8.namespace + "/";
									out1_tmp.rExample = (row8.example
											.contains("bio2rdf.org")) ? java.net.URLDecoder
											.decode(row8.example, "UTF-8")
											: "http://bio2rdf.org/"
													+ row8.namespace
													+ "/describe/rdf?uri="
													+ java.net.URLDecoder
															.decode(row8.example,
																	"UTF-8")
															.replace("#", "%23");
									out1_tmp.rDatasetDescriptionHTML = "http://download.bio2rdf.org/current/"
											+ row8.namespace
											+ "/"
											+ row8.namespace + ".html";
									out1_tmp.rDatasetDescriptionRDF = "http://download.bio2rdf.org/current/"
											+ row8.namespace
											+ "/bio2rdf-"
											+ row8.namespace + ".nq";
									out1_tmp.rMappings = "https://raw.github.com/bio2rdf/bio2rdf-mapping/master/2/"
											+ row8.namespace
											+ "/bio2rdf_"
											+ row8.namespace
											+ "_sio_mapping.owl";
									out1_tmp.rDownloadFile = "http://download.bio2rdf.org/current/"
											+ row8.namespace
											+ "/"
											+ row8.namespace + ".nq.gz";
									out1 = out1_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */
								// Start of branch "out1"
								if (out1 != null) {

									/**
									 * [tNTriplesTemplate_1 main ] start
									 */

									currentComponent = "tNTriplesTemplate_1";

									row6.RDF = "{~n~    \"state\": \"active\",~n~    \"name\": \"bio2rdf-%NS%\",~n~    \"title\": \"Bio2RDF::%TITLE%\",~n~    \"notes\": \"%DESCRIPTION%\",~n~    \"version\": \"%VERSION%\",~n~    \"author\": \"Bio2RDF\",~n~    \"author_email\": \"bio2rdf@googlegroups.com\",~n~    \"maintainer\": \"Michel Dumontier\",~n~    \"maintainer_email\": \"michel.dumontier@gmail.com\",~n~    \"license_id\": \"cc-by\",~n~    \"type\": \"dataset\",~n~    \"isopen\": \"true\",~n~    \"url\": \"http://%NS%.bio2rdf.org/\",~n~    \"owner_org\": \"bio2rdf\",~n~    \"resources\": [~n~        {~n~            \"state\": \"active\",~n~            \"description\": \"SPARQL endpoint\",~n~            \"format\": \"api/sparql\",~n~            \"name\": \"SPARQL endpoint\",~n~            \"url\": \"http://%NS%.bio2rdf.org/sparql\",~n~            \"position\": 0,~n~            \"resource_type\": \"\"~n~        },~n~        {~n~            \"state\": \"active\",~n~            \"description\": \"Example resource (RDF)\",~n~            \"format\": \"example/rdf+xml\",~n~            \"name\": \"Example resource (RDF)\",~n~            \"url\": \"%EXAMPLE%\",~n~            \"position\": 1,~n~            \"resource_type\": \"file\"~n~        },~n~        {~n~            \"state\": \"active\",~n~            \"description\": \"Download\",~n~            \"format\": \"\",~n~            \"name\": \"Download page (n-quads, gz compressed)\",~n~            \"url\": \"http://download.bio2rdf.org/current/%NS%/\",~n~            \"position\": 2,~n~            \"resource_type\": \"file\"~n~        },~n~        {~n~            \"state\": \"active\",~n~            \"description\": \"Dataset description (HTML)\",~n~            \"format\": \"HTML\",~n~            \"name\": \"Dataset description (HTML)\",~n~            \"url\": \"http://download.bio2rdf.org/current/%NS%/%NS%.html\",~n~            \"position\": 3,~n~            \"resource_type\": \"file\"~n~        },~n~        {~n~            \"state\": \"active\",~n~            \"description\": \"Dataset description (RDF)\",~n~            \"format\": \"meta/void\",~n~            \"name\": \"Dataset description (RDF)\",~n~            \"url\": \"http://download.bio2rdf.org/current/%NS%/bio2rdf-%NS%.nq\",~n~            \"position\": 4,~n~            \"resource_type\": \"file\"~n~        },~n~        {~n~            \"state\": \"active\",~n~            \"description\": \"OWL Schema\",~n~            \"format\": \"meta/rdf-schema\",~n~            \"name\": \"OWL Schema\",~n~            \"url\": \"http://download.bio2rdf.org/release/3/%NS%/%NS%.schema.owl\",~n~            \"position\": 5,~n~            \"resource_type\": \"file\"~n~        },~n~        {~n~            \"state\": \"active\",~n~            \"description\": \"Mappings (SIO)\",~n~            \"format\": \"mapping/owl\",~n~            \"name\": \"Mappings (SIO)\",~n~            \"url\": \"https://raw.github.com/bio2rdf/bio2rdf-mapping/master/2/%NS%/bio2rdf_%NS%_sio_mapping.owl\",~n~            \"position\": 6,~n~            \"resource_type\": \"file\"~n~        },~n~	{~n~            \"state\": \"active\",~n~            \"description\": \"Semantic Web Sitemap\",~n~            \"format\": \"meta/sitemap\",~n~            \"name\": \"Semantic Web Sitemap\",~n~            \"url\": \"http://download.bio2rdf.org/release/3/%NS%/sitemap.xml\",~n~            \"position\": 7,~n~            \"resource_type\": \"file\"~n~        }~n~	%DOWNLOAD%~n~    ],~n~    \"tags\": [~n~        {~n~            \"display_name\": \"bio2rdf\",~n~            \"name\": \"bio2rdf\",~n~            \"state\": \"active\"~n~        },~n~        {~n~            \"display_name\": \"lifesciences\",~n~            \"name\": \"lifesciences\",~n~            \"state\": \"active\"~n~        },~n~        {~n~            \"display_name\": \"lod\",~n~            \"name\": \"lod\",~n~            \"state\": \"active\"~n~        },~n~	{~n~            \"display_name\": \"published-by-third-party\",~n~            \"name\": \"published-by-third-party\",~n~            \"state\": \"active\"~n~        },~n~        {~n~            \"display_name\": \"deref-vocab\",~n~            \"name\": \"deref-vocab\",~n~            \"state\": \"active\"~n~        },~n~        {~n~            \"display_name\": \"provenance-metadata\",~n~            \"name\": \"provenance-metadata\",~n~            \"state\": \"active\"~n~        },~n~	{~n~            \"display_name\": \"license-metadata\",~n~            \"name\": \"license-metadata\",~n~            \"state\": \"active\"~n~        },~n~	{~n~            \"display_name\": \"vocab-mappings\",~n~            \"name\": \"vocab-mappings\",~n~            \"state\": \"active\"~n~        },~n~        {~n~            \"display_name\": \"format-dc\",~n~            \"name\": \"format-dc\",~n~            \"state\": \"active\"~n~        },~n~        {~n~            \"display_name\": \"format-rdfs\",~n~            \"name\": \"format-rdfs\",~n~            \"state\": \"active\"~n~        },~n~	{~n~            \"display_name\": \"format-rdf\",~n~            \"name\": \"format-rdf\",~n~            \"state\": \"active\"~n~        }~n~    ],~n~    \"extras\": [~n~        {~n~            \"key\": \"namespace\",~n~            \"value\": \"http://bio2rdf.org/%NS%:\",~n~            \"state\": \"active\"~n~        }~n~	%EXTRAS%~n~    ]~n~~n~}";

									String searchStr_tNTriplesTemplate_1_1 = "%NS%"
											+ "";
									row6.RDF = StringUtils.replaceAll(row6.RDF,
											searchStr_tNTriplesTemplate_1_1,
											out1.namespace + "").replace("~n~",
											"\n");
									String searchStr_tNTriplesTemplate_1_2 = "%EXAMPLE%"
											+ "";
									row6.RDF = StringUtils.replaceAll(row6.RDF,
											searchStr_tNTriplesTemplate_1_2,
											out1.rExample + "").replace("~n~",
											"\n");
									String searchStr_tNTriplesTemplate_1_3 = "%EXTRAS%"
											+ "";
									row6.RDF = StringUtils.replaceAll(row6.RDF,
											searchStr_tNTriplesTemplate_1_3,
											context.extras + "").replace("~n~",
											"\n");
									String searchStr_tNTriplesTemplate_1_4 = "%DESCRIPTION%"
											+ "";
									row6.RDF = StringUtils.replaceAll(row6.RDF,
											searchStr_tNTriplesTemplate_1_4,
											out1.description + "").replace(
											"~n~", "\n");
									String searchStr_tNTriplesTemplate_1_5 = "%TITLE%"
											+ "";
									row6.RDF = StringUtils.replaceAll(row6.RDF,
											searchStr_tNTriplesTemplate_1_5,
											out1.title + "").replace("~n~",
											"\n");
									String searchStr_tNTriplesTemplate_1_6 = "%VERSION%"
											+ "";
									row6.RDF = StringUtils.replaceAll(row6.RDF,
											searchStr_tNTriplesTemplate_1_6,
											out1.releaseDate + "").replace(
											"~n~", "\n");
									String searchStr_tNTriplesTemplate_1_7 = "%DOWNLOAD%"
											+ "";
									row6.RDF = StringUtils.replaceAll(row6.RDF,
											searchStr_tNTriplesTemplate_1_7,
											context.downloadResource + "")
											.replace("~n~", "\n");
									nb_line_ok_tNTriplesTemplate_1++;
									// row6.RDF = out1.RDF;

									nb_line_tNTriplesTemplate_1++;

									tos_count_tNTriplesTemplate_1++;

									/**
									 * [tNTriplesTemplate_1 main ] stop
									 */

									/**
									 * [tJavaRow_4 main ] start
									 */

									currentComponent = "tJavaRow_4";

									row5.RDF = java.net.URLEncoder.encode(
											row6.RDF, "UTF-8");
									nb_line_tJavaRow_4++;

									tos_count_tJavaRow_4++;

									/**
									 * [tJavaRow_4 main ] stop
									 */

									/**
									 * [tFileOutputDelimited_1 main ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

									if (row5.RDF != null) {

										sb_tFileOutputDelimited_1.append(

										row5.RDF

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

									nb_line_tFileOutputDelimited_1++;
									resourceMap.put(
											"nb_line_tFileOutputDelimited_1",
											nb_line_tFileOutputDelimited_1);

									outtFileOutputDelimited_1
											.write(sb_tFileOutputDelimited_1
													.toString());

									tos_count_tFileOutputDelimited_1++;

									/**
									 * [tFileOutputDelimited_1 main ] stop
									 */

								} // End of branch "out1"

							} // End of branch "row1"

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) (context.inputFile) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK",
						nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_1);

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tNTriplesTemplate_1 end ] start
				 */

				currentComponent = "tNTriplesTemplate_1";

				globalMap.put("tNTriplesTemplate_1_NB_LINE",
						nb_line_tNTriplesTemplate_1);
				globalMap.put("tNTriplesTemplate_1_NB_LINE_OK",
						nb_line_ok_tNTriplesTemplate_1);

				ok_Hash.put("tNTriplesTemplate_1", true);
				end_Hash.put("tNTriplesTemplate_1", System.currentTimeMillis());

				/**
				 * [tNTriplesTemplate_1 end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				/**
				 * [tJavaRow_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tNTriplesTemplate_1 finally ] start
				 */

				currentComponent = "tNTriplesTemplate_1";

				/**
				 * [tNTriplesTemplate_1 finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */
				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */
				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tJava_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				context.extras = "";
				context.downloadResource = "";
				context.resourceCount = 7;

				// context.namespace = "reactome";

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_generate_json_datahub_file = new byte[0];
		static byte[] commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[0];

		public String link_namespace;

		public String getLink_namespace() {
			return this.link_namespace;
		}

		public String stat;

		public String getStat() {
			return this.stat;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_generate_json_datahub_file.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_generate_json_datahub_file.length == 0) {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_generate_json_datahub_file) {

				try {

					int length = 0;

					this.link_namespace = readString(dis);

					this.stat = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.link_namespace, dos);

				// String

				writeString(this.stat, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("link_namespace=" + link_namespace);
			sb.append(",stat=" + stat);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_generate_json_datahub_file = new byte[0];
		static byte[] commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[0];

		public String link_namespace;

		public String getLink_namespace() {
			return this.link_namespace;
		}

		public String stat;

		public String getStat() {
			return this.stat;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_generate_json_datahub_file.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_generate_json_datahub_file.length == 0) {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_generate_json_datahub_file) {

				try {

					int length = 0;

					this.link_namespace = readString(dis);

					this.stat = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.link_namespace, dos);

				// String

				writeString(this.stat, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("link_namespace=" + link_namespace);
			sb.append(",stat=" + stat);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				row2Struct row4 = row2;

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */
				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_1 = context
						.propertyNames();
				while (propertyNames_tRunJob_1.hasMoreElements()) {
					String key_tRunJob_1 = (String) propertyNames_tRunJob_1
							.nextElement();
					Object value_tRunJob_1 = (Object) context
							.get(key_tRunJob_1);
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1
							+ "=" + value_tRunJob_1);
				}

				parentContextMap_tRunJob_1.put("inputFile", context.inputFile);

				parentContextMap_tRunJob_1.put("namespace", context.namespace);

				parentContextMap_tRunJob_1.put("extras", context.extras);

				parentContextMap_tRunJob_1
						.put("jsonString", context.jsonString);

				parentContextMap_tRunJob_1.put("workspace", context.workspace);

				parentContextMap_tRunJob_1.put("authorizationKey",
						context.authorizationKey);

				parentContextMap_tRunJob_1.put("downloadResource",
						context.downloadResource);

				parentContextMap_tRunJob_1.put("resourceCount",
						context.resourceCount);

				Object obj_tRunJob_1 = null;

				obj_tRunJob_1 = context.namespace;
				paraList_tRunJob_1.add("--context_param endpoint_namespace="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				parentContextMap_tRunJob_1.put("endpoint_namespace",
						obj_tRunJob_1);

				bio2rdf.datahub_get_stats_0_1.datahub_get_stats childJob_tRunJob_1 = new bio2rdf.datahub_get_stats_0_1.datahub_get_stats();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(
								talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}

				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));

				errorCode = childJob_tRunJob_1.getErrorCode();

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_1
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_1.getExceptionStackTrace());
				}

				if (childJob_tRunJob_1.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_1.getStatus())) {

					throw new RuntimeException("Child job running failed");
				}

				for (String[] item_tRunJob_1 : childReturn_tRunJob_1) {
					if (childJob_tRunJob_1.hastBufferOutputComponent() || true) {

						if (0 < item_tRunJob_1.length) {

							row2.link_namespace = item_tRunJob_1[0];

						} else {
							row2.link_namespace = null;
						}

						if (1 < item_tRunJob_1.length) {

							row2.stat = item_tRunJob_1[1];

						} else {
							row2.stat = null;
						}

					}

					tos_count_tRunJob_1++;

					/**
					 * [tRunJob_1 main ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					row4 = row2;

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tJavaRow_1 main ] start
					 */

					currentComponent = "tJavaRow_1";

					context.extras = context.extras
							+ ",{ \"key\": \"links:bio2rdf-"
							+ row4.link_namespace + "\", \"value\": \""
							+ row4.stat + "\", \"state\": \"active\" }";
					nb_line_tJavaRow_1++;

					tos_count_tJavaRow_1++;

					/**
					 * [tJavaRow_1 main ] stop
					 */

				} // C_01

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				tSparqlSelectRequest_1Process(globalMap);

				/**
				 * [tJavaRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_generate_json_datahub_file = new byte[0];
		static byte[] commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[0];

		public String triplesCount;

		public String getTriplesCount() {
			return this.triplesCount;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_generate_json_datahub_file.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_generate_json_datahub_file.length == 0) {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_generate_json_datahub_file) {

				try {

					int length = 0;

					this.triplesCount = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.triplesCount, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("triplesCount=" + triplesCount);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tSparqlSelectRequest_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSparqlSelectRequest_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tSparqlSelectRequest_1 begin ] start
				 */

				ok_Hash.put("tSparqlSelectRequest_1", false);
				start_Hash.put("tSparqlSelectRequest_1",
						System.currentTimeMillis());

				currentComponent = "tSparqlSelectRequest_1";

				int tos_count_tSparqlSelectRequest_1 = 0;

				String URL_string_tSparqlSelectRequest_1;

				URL_string_tSparqlSelectRequest_1 = "http://"
						+ context.namespace
						+ ".bio2rdf.org/sparql"
						+ "?default-graph-uri=&query="
						+ java.net.URLEncoder
								.encode("PREFIX void: <http://rdfs.org/ns/void#> PREFIX ds: <http://bio2rdf.org/bio2rdf.dataset_vocabulary:>  SELECT * { [] void:subset [ a ds:Dataset-Triples; void:entities ?triples;]}",
										"UTF-8")
						+ "&format=application%2Fsparql-results%2Bjson&timeout=0&debug=on";

				org.json.JSONArray jsonArray_tSparqlSelectRequest_1 = new org.json.JSONArray();

				org.json.JSONArray jsonKeysArray_tSparqlSelectRequest_1;

				java.util.ArrayList<String> queryKeys_tSparqlSelectRequest_1 = new java.util.ArrayList<String>();
				// ArrayList that will contain the key value of the query sorted
				// correctly

				org.json.JSONObject jsonObj_tSparqlSelectRequest_1;

				java.util.Iterator<String> queryKeysIterator_tSparqlSelectRequest_1;

				java.net.URL url_tSparqlSelectRequest_1 = new java.net.URL(
						URL_string_tSparqlSelectRequest_1);

				java.net.HttpURLConnection urlConn_tSparqlSelectRequest_1 = (java.net.HttpURLConnection) url_tSparqlSelectRequest_1
						.openConnection();
				urlConn_tSparqlSelectRequest_1.setRequestMethod("GET");
				urlConn_tSparqlSelectRequest_1.setDoOutput(true);
				urlConn_tSparqlSelectRequest_1.setDoInput(true);
				urlConn_tSparqlSelectRequest_1.setUseCaches(false);

				try {
					urlConn_tSparqlSelectRequest_1.connect();

					byte[] buffer_tSparqlSelectRequest_1 = new byte[1024];
					int bos_buffer_tSparqlSelectRequest_1 = 0;

					StringBuilder sb_tSparqlSelectRequest_1 = new StringBuilder();

					if (java.net.HttpURLConnection.HTTP_OK == (urlConn_tSparqlSelectRequest_1
							.getResponseCode())) {
						java.io.InputStream bis_tSparqlSelectRequest_1 = new java.io.BufferedInputStream(
								urlConn_tSparqlSelectRequest_1.getInputStream());

						while ((bos_buffer_tSparqlSelectRequest_1 = bis_tSparqlSelectRequest_1
								.read(buffer_tSparqlSelectRequest_1)) != -1) {
							// Then the table of bytes and its size are used to
							// generate a string
							// which is added to a string builder that will
							// contain the whole response
							sb_tSparqlSelectRequest_1.append(new String(
									buffer_tSparqlSelectRequest_1, 0,
									bos_buffer_tSparqlSelectRequest_1));
						}
						bis_tSparqlSelectRequest_1.close();

					} else {
						System.err.println(urlConn_tSparqlSelectRequest_1
								.getResponseCode()
								+ " "
								+ urlConn_tSparqlSelectRequest_1
										.getResponseMessage());
					}

					urlConn_tSparqlSelectRequest_1.disconnect();

					jsonObj_tSparqlSelectRequest_1 = new org.json.JSONObject(
							sb_tSparqlSelectRequest_1.toString());

					jsonKeysArray_tSparqlSelectRequest_1 = jsonObj_tSparqlSelectRequest_1
							.getJSONObject("head").getJSONArray("vars");
					for (int k_tSparqlSelectRequest_1 = 0; k_tSparqlSelectRequest_1 < jsonKeysArray_tSparqlSelectRequest_1
							.length(); k_tSparqlSelectRequest_1++) {
						queryKeys_tSparqlSelectRequest_1
								.add(jsonKeysArray_tSparqlSelectRequest_1
										.getString(k_tSparqlSelectRequest_1));
					}

					jsonArray_tSparqlSelectRequest_1 = jsonObj_tSparqlSelectRequest_1
							.getJSONObject("results").getJSONArray("bindings");

				} catch (Exception e) {
					System.err.println("UnknownHostException");
				}

				if (jsonArray_tSparqlSelectRequest_1.length() == 0) {
					globalMap.put("tSparqlSelectRequest_1_HAS_RESULTS", false);
				} else {
					globalMap.put("tSparqlSelectRequest_1_HAS_RESULTS", true);
				}

				int i_tSparqlSelectRequest_1;
				int nb_line_tSparqlSelectRequest_1 = 0;

				for (i_tSparqlSelectRequest_1 = 0; i_tSparqlSelectRequest_1 < jsonArray_tSparqlSelectRequest_1
						.length(); i_tSparqlSelectRequest_1++) {

					/**
					 * [tSparqlSelectRequest_1 begin ] stop
					 */
					/**
					 * [tSparqlSelectRequest_1 main ] start
					 */

					currentComponent = "tSparqlSelectRequest_1";

					queryKeysIterator_tSparqlSelectRequest_1 = queryKeys_tSparqlSelectRequest_1
							.iterator();

					if (queryKeysIterator_tSparqlSelectRequest_1.hasNext()) {
						try {
							row7.triplesCount = jsonArray_tSparqlSelectRequest_1
									.getJSONObject(i_tSparqlSelectRequest_1)
									.getJSONObject(
											queryKeysIterator_tSparqlSelectRequest_1
													.next()).getString("value");
						} catch (org.json.JSONException e_tSparqlSelectRequest_1) {
							row7.triplesCount = "";
						}
					}

					tos_count_tSparqlSelectRequest_1++;

					/**
					 * [tSparqlSelectRequest_1 main ] stop
					 */

					/**
					 * [tJavaRow_3 main ] start
					 */

					currentComponent = "tJavaRow_3";

					context.extras = context.extras
							+ ",{ \"key\": \"triples\", \"value\": \""
							+ row7.triplesCount + "\", \"state\": \"active\" }";
					nb_line_tJavaRow_3++;

					tos_count_tJavaRow_3++;

					/**
					 * [tJavaRow_3 main ] stop
					 */

					/**
					 * [tSparqlSelectRequest_1 end ] start
					 */

					currentComponent = "tSparqlSelectRequest_1";

					nb_line_tSparqlSelectRequest_1++;
				}

				globalMap.put("tSparqlSelectRequest_1_NB_LINE",
						nb_line_tSparqlSelectRequest_1);

				ok_Hash.put("tSparqlSelectRequest_1", true);
				end_Hash.put("tSparqlSelectRequest_1",
						System.currentTimeMillis());

				/**
				 * [tSparqlSelectRequest_1 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSparqlSelectRequest_1 finally ] start
				 */

				currentComponent = "tSparqlSelectRequest_1";

				/**
				 * [tSparqlSelectRequest_1 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSparqlSelectRequest_1_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */
				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */
				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				tFileInputDelimited_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_generate_json_datahub_file = new byte[0];
		static byte[] commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[0];

		public String fileType;

		public String getFileType() {
			return this.fileType;
		}

		public String downloadFile;

		public String getDownloadFile() {
			return this.downloadFile;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_generate_json_datahub_file.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_generate_json_datahub_file.length == 0) {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_generate_json_datahub_file) {

				try {

					int length = 0;

					this.fileType = readString(dis);

					this.downloadFile = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.fileType, dos);

				// String

				writeString(this.downloadFile, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fileType=" + fileType);
			sb.append(",downloadFile=" + downloadFile);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_generate_json_datahub_file = new byte[0];
		static byte[] commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[0];

		public String downloadFile;

		public String getDownloadFile() {
			return this.downloadFile;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_generate_json_datahub_file.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_generate_json_datahub_file.length == 0) {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_generate_json_datahub_file) {

				try {

					int length = 0;

					this.downloadFile = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.downloadFile, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("downloadFile=" + downloadFile);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_generate_json_datahub_file = new byte[0];
		static byte[] commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[0];

		public String downloadFile;

		public String getDownloadFile() {
			return this.downloadFile;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_generate_json_datahub_file.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_generate_json_datahub_file.length == 0) {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_generate_json_datahub_file) {

				try {

					int length = 0;

					this.downloadFile = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.downloadFile, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("downloadFile=" + downloadFile);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_generate_json_datahub_file = new byte[0];
		static byte[] commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[0];

		public String downloadFile;

		public String getDownloadFile() {
			return this.downloadFile;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_generate_json_datahub_file.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_generate_json_datahub_file.length == 0) {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_generate_json_datahub_file) {

				try {

					int length = 0;

					this.downloadFile = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.downloadFile, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("downloadFile=" + downloadFile);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_generate_json_datahub_file = new byte[0];
		static byte[] commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[0];

		public String ResponseContent;

		public String getResponseContent() {
			return this.ResponseContent;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_generate_json_datahub_file.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_generate_json_datahub_file.length == 0) {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_generate_json_datahub_file = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_generate_json_datahub_file, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_generate_json_datahub_file) {

				try {

					int length = 0;

					this.ResponseContent = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ResponseContent, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ResponseContent=" + ResponseContent);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHttpRequest_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();
				row10Struct row10 = new row10Struct();
				row12Struct row12 = new row12Struct();
				row12Struct row11 = row12;
				row13Struct row13 = new row13Struct();

				/**
				 * [tJavaRow_5 begin ] start
				 */

				ok_Hash.put("tJavaRow_5", false);
				start_Hash.put("tJavaRow_5", System.currentTimeMillis());

				currentComponent = "tJavaRow_5";

				int tos_count_tJavaRow_5 = 0;

				int nb_line_tJavaRow_5 = 0;

				/**
				 * [tJavaRow_5 begin ] stop
				 */

				/**
				 * [tExtractRegexFields_2 begin ] start
				 */

				ok_Hash.put("tExtractRegexFields_2", false);
				start_Hash.put("tExtractRegexFields_2",
						System.currentTimeMillis());

				currentComponent = "tExtractRegexFields_2";

				int tos_count_tExtractRegexFields_2 = 0;

				java.util.regex.Pattern pattern_tExtractRegexFields_2 = java.util.regex.Pattern
						.compile(".*(\\.\\w*).gz$");

				/**
				 * [tExtractRegexFields_2 begin ] stop
				 */

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				int tos_count_tLogRow_3 = 0;

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tSampleRow_1 begin ] start
				 */

				ok_Hash.put("tSampleRow_1", false);
				start_Hash.put("tSampleRow_1", System.currentTimeMillis());

				currentComponent = "tSampleRow_1";

				int tos_count_tSampleRow_1 = 0;

				String[] rangetSampleRow_1 = "1..10".split(",");
				java.util.Set rangeSettSampleRow_1 = new java.util.HashSet();

				Integer nb_line_tSampleRow_1 = 0;

				for (int i = 0; i < rangetSampleRow_1.length; i++) {

					if (rangetSampleRow_1[i].matches("\\d+")) {

						rangeSettSampleRow_1.add(Integer
								.valueOf(rangetSampleRow_1[i]));

					} else if (rangetSampleRow_1[i].matches("\\d+\\.\\.\\d+")) {

						String[] edgetSampleRow_1 = rangetSampleRow_1[i]
								.split("\\.\\.");

						for (int j = Integer.valueOf(edgetSampleRow_1[0])
								.intValue(); j < Integer.valueOf(
								edgetSampleRow_1[1]).intValue() + 1; j++) {
							rangeSettSampleRow_1.add(Integer.valueOf(j));
						}
					} else {

					}

				}

				/**
				 * [tSampleRow_1 begin ] stop
				 */

				/**
				 * [tExtractRegexFields_1 begin ] start
				 */

				ok_Hash.put("tExtractRegexFields_1", false);
				start_Hash.put("tExtractRegexFields_1",
						System.currentTimeMillis());

				currentComponent = "tExtractRegexFields_1";

				int tos_count_tExtractRegexFields_1 = 0;

				java.util.regex.Pattern pattern_tExtractRegexFields_1 = java.util.regex.Pattern
						.compile(".*href=\"(.*?(?:\\.nq\\.gz|\\.nt\\.gz|\\.ttl\\.gz|\\.xml\\.gz))");

				/**
				 * [tExtractRegexFields_1 begin ] stop
				 */

				/**
				 * [tHttpRequest_1 begin ] start
				 */

				ok_Hash.put("tHttpRequest_1", false);
				start_Hash.put("tHttpRequest_1", System.currentTimeMillis());

				currentComponent = "tHttpRequest_1";

				int tos_count_tHttpRequest_1 = 0;

				/**
				 * [tHttpRequest_1 begin ] stop
				 */
				/**
				 * [tHttpRequest_1 main ] start
				 */

				currentComponent = "tHttpRequest_1";

				java.net.URL url_tHttpRequest_1 = new java.net.URL(
						"http://download.bio2rdf.org/release/3/"
								+ context.namespace + "/");

				java.net.HttpURLConnection urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1
						.openConnection();
				urlConn_tHttpRequest_1.setRequestMethod("GET");
				urlConn_tHttpRequest_1.setDoOutput(true);
				urlConn_tHttpRequest_1.setDoInput(true);
				urlConn_tHttpRequest_1.setUseCaches(false);

				urlConn_tHttpRequest_1.connect();

				byte[] buffer_tHttpRequest_1 = new byte[1024];
				int bos_buffer_tHttpRequest_1 = 0;
				StringBuilder sb_tHttpRequest_1 = new StringBuilder();

				if (java.net.HttpURLConnection.HTTP_OK == (urlConn_tHttpRequest_1
						.getResponseCode())) {
					java.io.InputStream bis_tHttpRequest_1 = new java.io.BufferedInputStream(
							urlConn_tHttpRequest_1.getInputStream());
					while ((bos_buffer_tHttpRequest_1 = bis_tHttpRequest_1
							.read(buffer_tHttpRequest_1)) != -1) {
						sb_tHttpRequest_1.append(new String(
								buffer_tHttpRequest_1, 0,
								bos_buffer_tHttpRequest_1));
					}
					bis_tHttpRequest_1.close();
				} else {
					System.err
							.println(urlConn_tHttpRequest_1.getResponseCode()
									+ " "
									+ urlConn_tHttpRequest_1
											.getResponseMessage());
				}

				row9.ResponseContent = sb_tHttpRequest_1.toString();
				urlConn_tHttpRequest_1.disconnect();

				tos_count_tHttpRequest_1++;

				/**
				 * [tHttpRequest_1 main ] stop
				 */

				/**
				 * [tExtractRegexFields_1 main ] start
				 */

				currentComponent = "tExtractRegexFields_1";

				row10 = null;
				if (row9.ResponseContent != null) {// C_01
					java.util.regex.Matcher matcher_tExtractRegexFields_1 = pattern_tExtractRegexFields_1
							.matcher(row9.ResponseContent);

					int groupCount_tExtractRegexFields_1 = matcher_tExtractRegexFields_1
							.groupCount();
					while (matcher_tExtractRegexFields_1.find()) {

						try {
							row10 = new row10Struct();

							String temp_tExtractRegexFields_1 = null;
							row10.downloadFile = groupCount_tExtractRegexFields_1 <= 0 ? ""
									: matcher_tExtractRegexFields_1.group(1);
						} catch (java.lang.Exception ex_tExtractRegexFields_1) {
							throw (ex_tExtractRegexFields_1);
						}

						tos_count_tExtractRegexFields_1++;

						/**
						 * [tExtractRegexFields_1 main ] stop
						 */
						// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tSampleRow_1 main ] start
							 */

							currentComponent = "tSampleRow_1";

							nb_line_tSampleRow_1++;

							if (!rangeSettSampleRow_1
									.contains(nb_line_tSampleRow_1)) {
								row12 = null;
							} else {
								row12 = new row12Struct();

								row12.downloadFile = row10.downloadFile;

							}

							tos_count_tSampleRow_1++;

							/**
							 * [tSampleRow_1 main ] stop
							 */
							// Start of branch "row12"
							if (row12 != null) {

								/**
								 * [tLogRow_3 main ] start
								 */

								currentComponent = "tLogRow_3";

								row11 = row12;

								tos_count_tLogRow_3++;

								/**
								 * [tLogRow_3 main ] stop
								 */

								/**
								 * [tExtractRegexFields_2 main ] start
								 */

								currentComponent = "tExtractRegexFields_2";

								row13 = null;
								if (row11.downloadFile != null) {// C_01
									java.util.regex.Matcher matcher_tExtractRegexFields_2 = pattern_tExtractRegexFields_2
											.matcher(row11.downloadFile);

									int groupCount_tExtractRegexFields_2 = matcher_tExtractRegexFields_2
											.groupCount();
									while (matcher_tExtractRegexFields_2.find()) {

										try {
											row13 = new row13Struct();
											row13.downloadFile = row11.downloadFile;

											String temp_tExtractRegexFields_2 = null;
											row13.fileType = groupCount_tExtractRegexFields_2 <= 0 ? ""
													: matcher_tExtractRegexFields_2
															.group(1);
										} catch (java.lang.Exception ex_tExtractRegexFields_2) {
											throw (ex_tExtractRegexFields_2);
										}

										tos_count_tExtractRegexFields_2++;

										/**
										 * [tExtractRegexFields_2 main ] stop
										 */
										// Start of branch "row13"
										if (row13 != null) {

											/**
											 * [tJavaRow_5 main ] start
											 */

											currentComponent = "tJavaRow_5";

											context.resourceCount = context.resourceCount + 1;

											// context.downloadResource =
											// row13.downloadFile;
											if (row13.fileType.equals(".nq")) {
												row13.fileType = "application/x-nquads";
											} else if (row13.fileType
													.equals(".nt")) {
												row13.fileType = "application/x-ntriples";
											} else if (row13.fileType
													.equals(".ttl")) {
												row13.fileType = "text/turtle";
											} else if (row13.fileType
													.equals(".xml")) {
												row13.fileType = "application/rdf+xml";
											}

											context.downloadResource = context.downloadResource
													+ ",\n {\"state\": \"active\", \"description\": \"Download "
													+ row13.downloadFile
													+ " (n-quads, gzipped)\", \"format\": \""
													+ row13.fileType
													+ "\", \"name\": \"Download (n-quads, gzipped)\", \"url\": \"http://download.bio2rdf.org/current/"
													+ context.namespace
													+ "/"
													+ row13.downloadFile
													+ "\", \"position\": "
													+ context.resourceCount
													+ ", \"resource_type\": \"file\" }";
											nb_line_tJavaRow_5++;

											tos_count_tJavaRow_5++;

											/**
											 * [tJavaRow_5 main ] stop
											 */

										} // End of branch "row13"

										// end for
									}

								} // C_01

							} // End of branch "row12"

						} // End of branch "row10"

						// end for
					}

				} // C_01

				/**
				 * [tHttpRequest_1 end ] start
				 */

				currentComponent = "tHttpRequest_1";

				ok_Hash.put("tHttpRequest_1", true);
				end_Hash.put("tHttpRequest_1", System.currentTimeMillis());

				/**
				 * [tHttpRequest_1 end ] stop
				 */

				/**
				 * [tExtractRegexFields_1 end ] start
				 */

				currentComponent = "tExtractRegexFields_1";

				ok_Hash.put("tExtractRegexFields_1", true);
				end_Hash.put("tExtractRegexFields_1",
						System.currentTimeMillis());

				/**
				 * [tExtractRegexFields_1 end ] stop
				 */

				/**
				 * [tSampleRow_1 end ] start
				 */

				currentComponent = "tSampleRow_1";

				ok_Hash.put("tSampleRow_1", true);
				end_Hash.put("tSampleRow_1", System.currentTimeMillis());

				/**
				 * [tSampleRow_1 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

				/**
				 * [tExtractRegexFields_2 end ] start
				 */

				currentComponent = "tExtractRegexFields_2";

				ok_Hash.put("tExtractRegexFields_2", true);
				end_Hash.put("tExtractRegexFields_2",
						System.currentTimeMillis());

				/**
				 * [tExtractRegexFields_2 end ] stop
				 */

				/**
				 * [tJavaRow_5 end ] start
				 */

				currentComponent = "tJavaRow_5";

				globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);

				ok_Hash.put("tJavaRow_5", true);
				end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				/**
				 * [tJavaRow_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tHttpRequest_1 finally ] start
				 */

				currentComponent = "tHttpRequest_1";

				/**
				 * [tHttpRequest_1 finally ] stop
				 */

				/**
				 * [tExtractRegexFields_1 finally ] start
				 */

				currentComponent = "tExtractRegexFields_1";

				/**
				 * [tExtractRegexFields_1 finally ] stop
				 */

				/**
				 * [tSampleRow_1 finally ] start
				 */

				currentComponent = "tSampleRow_1";

				/**
				 * [tSampleRow_1 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

				/**
				 * [tExtractRegexFields_2 finally ] start
				 */

				currentComponent = "tExtractRegexFields_2";

				/**
				 * [tExtractRegexFields_2 finally ] stop
				 */

				/**
				 * [tJavaRow_5 finally ] start
				 */

				currentComponent = "tJavaRow_5";

				/**
				 * [tJavaRow_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final generate_json_datahub_file generate_json_datahub_fileClass = new generate_json_datahub_file();

		int exitCode = generate_json_datahub_fileClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = generate_json_datahub_file.class
					.getClassLoader().getResourceAsStream(
							"bio2rdf/generate_json_datahub_file_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.inputFile = (String) context.getProperty("inputFile");
			context.namespace = (String) context.getProperty("namespace");
			context.extras = (String) context.getProperty("extras");
			context.jsonString = (String) context.getProperty("jsonString");
			context.workspace = (String) context.getProperty("workspace");
			context.authorizationKey = (String) context
					.getProperty("authorizationKey");
			context.downloadResource = (String) context
					.getProperty("downloadResource");
			try {
				context.resourceCount = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("resourceCount"));
			} catch (NumberFormatException e) {
				context.resourceCount = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("inputFile")) {
				context.inputFile = (String) parentContextMap.get("inputFile");
			}
			if (parentContextMap.containsKey("namespace")) {
				context.namespace = (String) parentContextMap.get("namespace");
			}
			if (parentContextMap.containsKey("extras")) {
				context.extras = (String) parentContextMap.get("extras");
			}
			if (parentContextMap.containsKey("jsonString")) {
				context.jsonString = (String) parentContextMap
						.get("jsonString");
			}
			if (parentContextMap.containsKey("workspace")) {
				context.workspace = (String) parentContextMap.get("workspace");
			}
			if (parentContextMap.containsKey("authorizationKey")) {
				context.authorizationKey = (String) parentContextMap
						.get("authorizationKey");
			}
			if (parentContextMap.containsKey("downloadResource")) {
				context.downloadResource = (String) parentContextMap
						.get("downloadResource");
			}
			if (parentContextMap.containsKey("resourceCount")) {
				context.resourceCount = (Integer) parentContextMap
						.get("resourceCount");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tHttpRequest_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tHttpRequest_1) {
			globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", -1);

			e_tHttpRequest_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : generate_json_datahub_file");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 143709 characters generated by Talend Open Studio for Data Integration on the
 * 11 août 2014 16:32:21 EDT
 ************************************************************************************************/
