// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bio2rdf.datahub_get_stats_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.BioUtil;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.MD5;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: datahub_get_stats Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.5.0.r117820
 * @status 
 */
public class datahub_get_stats implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (inputFile != null) {

				this.setProperty("inputFile", inputFile.toString());

			}

			if (endpoint_namespace != null) {

				this.setProperty("endpoint_namespace",
						endpoint_namespace.toString());

			}

		}

		public String inputFile;

		public String getInputFile() {
			return this.inputFile;
		}

		public String endpoint_namespace;

		public String getEndpoint_namespace() {
			return this.endpoint_namespace;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "datahub_get_stats";
	private final String projectName = "BIO2RDF";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					datahub_get_stats.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(datahub_get_stats.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFlowToIterate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSparqlSelectRequest_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_datahub_get_stats = new byte[0];
		static byte[] commonByteArray_BIO2RDF_datahub_get_stats = new byte[0];

		public String link_namespace;

		public String getLink_namespace() {
			return this.link_namespace;
		}

		public String stat;

		public String getStat() {
			return this.stat;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_datahub_get_stats.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_datahub_get_stats.length == 0) {
						commonByteArray_BIO2RDF_datahub_get_stats = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_datahub_get_stats = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_datahub_get_stats, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_datahub_get_stats, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_datahub_get_stats) {

				try {

					int length = 0;

					this.link_namespace = readString(dis);

					this.stat = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.link_namespace, dos);

				// String

				writeString(this.stat, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("link_namespace=" + link_namespace);
			sb.append(",stat=" + stat);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_datahub_get_stats = new byte[0];
		static byte[] commonByteArray_BIO2RDF_datahub_get_stats = new byte[0];

		public String link_namespace;

		public String getLink_namespace() {
			return this.link_namespace;
		}

		public String stat;

		public String getStat() {
			return this.stat;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_datahub_get_stats.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_datahub_get_stats.length == 0) {
						commonByteArray_BIO2RDF_datahub_get_stats = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_datahub_get_stats = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_datahub_get_stats, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_datahub_get_stats, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_datahub_get_stats) {

				try {

					int length = 0;

					this.link_namespace = readString(dis);

					this.stat = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.link_namespace, dos);

				// String

				writeString(this.stat, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("link_namespace=" + link_namespace);
			sb.append(",stat=" + stat);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_datahub_get_stats = new byte[0];
		static byte[] commonByteArray_BIO2RDF_datahub_get_stats = new byte[0];

		public String stat;

		public String getStat() {
			return this.stat;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_datahub_get_stats.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_datahub_get_stats.length == 0) {
						commonByteArray_BIO2RDF_datahub_get_stats = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_datahub_get_stats = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_datahub_get_stats, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_datahub_get_stats, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_datahub_get_stats) {

				try {

					int length = 0;

					this.stat = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.stat, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("stat=" + stat);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_datahub_get_stats = new byte[0];
		static byte[] commonByteArray_BIO2RDF_datahub_get_stats = new byte[0];

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String example;

		public String getExample() {
			return this.example;
		}

		public String releaseDate;

		public String getReleaseDate() {
			return this.releaseDate;
		}

		public String tripleCount;

		public String getTripleCount() {
			return this.tripleCount;
		}

		public String uniqueEntityCount;

		public String getUniqueEntityCount() {
			return this.uniqueEntityCount;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_datahub_get_stats.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_datahub_get_stats.length == 0) {
						commonByteArray_BIO2RDF_datahub_get_stats = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_datahub_get_stats = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_datahub_get_stats, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_datahub_get_stats, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_datahub_get_stats) {

				try {

					int length = 0;

					this.namespace = readString(dis);

					this.description = readString(dis);

					this.example = readString(dis);

					this.releaseDate = readString(dis);

					this.tripleCount = readString(dis);

					this.uniqueEntityCount = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.example, dos);

				// String

				writeString(this.releaseDate, dos);

				// String

				writeString(this.tripleCount, dos);

				// String

				writeString(this.uniqueEntityCount, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("namespace=" + namespace);
			sb.append(",description=" + description);
			sb.append(",example=" + example);
			sb.append(",releaseDate=" + releaseDate);
			sb.append(",tripleCount=" + tripleCount);
			sb.append(",uniqueEntityCount=" + uniqueEntityCount);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_datahub_get_stats = new byte[0];
		static byte[] commonByteArray_BIO2RDF_datahub_get_stats = new byte[0];

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String example;

		public String getExample() {
			return this.example;
		}

		public String releaseDate;

		public String getReleaseDate() {
			return this.releaseDate;
		}

		public String tripleCount;

		public String getTripleCount() {
			return this.tripleCount;
		}

		public String uniqueEntityCount;

		public String getUniqueEntityCount() {
			return this.uniqueEntityCount;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_datahub_get_stats.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_datahub_get_stats.length == 0) {
						commonByteArray_BIO2RDF_datahub_get_stats = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_datahub_get_stats = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_datahub_get_stats, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_datahub_get_stats, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_datahub_get_stats) {

				try {

					int length = 0;

					this.namespace = readString(dis);

					this.description = readString(dis);

					this.example = readString(dis);

					this.releaseDate = readString(dis);

					this.tripleCount = readString(dis);

					this.uniqueEntityCount = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.namespace, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.example, dos);

				// String

				writeString(this.releaseDate, dos);

				// String

				writeString(this.tripleCount, dos);

				// String

				writeString(this.uniqueEntityCount, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("namespace=" + namespace);
			sb.append(",description=" + description);
			sb.append(",example=" + example);
			sb.append(",releaseDate=" + releaseDate);
			sb.append(",tripleCount=" + tripleCount);
			sb.append(",uniqueEntityCount=" + uniqueEntityCount);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row4Struct row4 = new row4Struct();
				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();
				row3Struct row5 = row3;

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_tSparqlSelectRequest_1 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_1";

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = context.inputFile;
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {

							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								context.inputFile, "ISO-8859-15", "\t", "\n",
								true, 0, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.namespace = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.description = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.example = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.releaseDate = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.tripleCount = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.uniqueEntityCount = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tFilterRow_2 main ] start
							 */

							currentComponent = "tFilterRow_2";

							row4 = null;
							Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2(
									"&&");
							ope_tFilterRow_2
									.matches(
											(row1.namespace == null ? false
													: row1.namespace
															.matches(context.endpoint_namespace) != true),
											" namespace.matches(context.endpoint_namespace) != true failed");

							if (ope_tFilterRow_2.getMatchFlag()) {
								if (row4 == null) {
									row4 = new row4Struct();
								}
								row4.namespace = row1.namespace;
								row4.description = row1.description;
								row4.example = row1.example;
								row4.releaseDate = row1.releaseDate;
								row4.tripleCount = row1.tripleCount;
								row4.uniqueEntityCount = row1.uniqueEntityCount;
								nb_line_ok_tFilterRow_2++;
							} else {
								nb_line_reject_tFilterRow_2++;
							}

							nb_line_tFilterRow_2++;

							tos_count_tFilterRow_2++;

							/**
							 * [tFilterRow_2 main ] stop
							 */
							// Start of branch "row4"
							if (row4 != null) {

								/**
								 * [tFlowToIterate_1 main ] start
								 */

								currentComponent = "tFlowToIterate_1";

								globalMap.put("link_namespace", row4.namespace);
								nb_line_tFlowToIterate_1++;
								counter_tFlowToIterate_1++;
								globalMap.put(
										"tFlowToIterate_1_CURRENT_ITERATION",
										counter_tFlowToIterate_1);

								tos_count_tFlowToIterate_1++;

								/**
								 * [tFlowToIterate_1 main ] stop
								 */
								NB_ITERATE_tSparqlSelectRequest_1++;
								iterateLoop++;

								/**
								 * [tBufferOutput_1 begin ] start
								 */

								ok_Hash.put("tBufferOutput_1", false);
								start_Hash.put("tBufferOutput_1",
										System.currentTimeMillis());

								currentComponent = "tBufferOutput_1";

								int tos_count_tBufferOutput_1 = 0;

								/**
								 * [tBufferOutput_1 begin ] stop
								 */

								/**
								 * [tLogRow_1 begin ] start
								 */

								ok_Hash.put("tLogRow_1", false);
								start_Hash.put("tLogRow_1",
										System.currentTimeMillis());

								currentComponent = "tLogRow_1";

								int tos_count_tLogRow_1 = 0;

								/**
								 * [tLogRow_1 begin ] stop
								 */

								/**
								 * [tJavaRow_1 begin ] start
								 */

								ok_Hash.put("tJavaRow_1", false);
								start_Hash.put("tJavaRow_1",
										System.currentTimeMillis());

								currentComponent = "tJavaRow_1";

								int tos_count_tJavaRow_1 = 0;

								int nb_line_tJavaRow_1 = 0;

								/**
								 * [tJavaRow_1 begin ] stop
								 */

								/**
								 * [tSparqlSelectRequest_1 begin ] start
								 */

								ok_Hash.put("tSparqlSelectRequest_1", false);
								start_Hash.put("tSparqlSelectRequest_1",
										System.currentTimeMillis());

								currentComponent = "tSparqlSelectRequest_1";

								int tos_count_tSparqlSelectRequest_1 = 0;

								String URL_string_tSparqlSelectRequest_1;

								URL_string_tSparqlSelectRequest_1 = "http://"
										+ context.endpoint_namespace
										+ ".bio2rdf.org/sparql"
										+ "?default-graph-uri=&query="
										+ java.net.URLEncoder
												.encode("PREFIX void: <http://rdfs.org/ns/void#> PREFIX ds: <http://bio2rdf.org/bio2rdf.dataset_vocabulary:>  SELECT *  { [] void:subset [        a ds:Dataset-Type-Count;        void:class <http://bio2rdf.org/"
														+ (String) globalMap
																.get("link_namespace")
														+ "_vocabulary:Resource>;        void:distinctEntities ?distinctCount;    ]  }",
														"UTF-8")
										+ "&format=application%2Fsparql-results%2Bjson&timeout=0&debug=on";

								org.json.JSONArray jsonArray_tSparqlSelectRequest_1 = new org.json.JSONArray();

								org.json.JSONArray jsonKeysArray_tSparqlSelectRequest_1;

								java.util.ArrayList<String> queryKeys_tSparqlSelectRequest_1 = new java.util.ArrayList<String>();
								// ArrayList that will contain the key value of
								// the query sorted correctly

								org.json.JSONObject jsonObj_tSparqlSelectRequest_1;

								java.util.Iterator<String> queryKeysIterator_tSparqlSelectRequest_1;

								java.net.URL url_tSparqlSelectRequest_1 = new java.net.URL(
										URL_string_tSparqlSelectRequest_1);

								java.net.HttpURLConnection urlConn_tSparqlSelectRequest_1 = (java.net.HttpURLConnection) url_tSparqlSelectRequest_1
										.openConnection();
								urlConn_tSparqlSelectRequest_1
										.setRequestMethod("GET");
								urlConn_tSparqlSelectRequest_1
										.setDoOutput(true);
								urlConn_tSparqlSelectRequest_1.setDoInput(true);
								urlConn_tSparqlSelectRequest_1
										.setUseCaches(false);

								try {
									urlConn_tSparqlSelectRequest_1.connect();

									byte[] buffer_tSparqlSelectRequest_1 = new byte[1024];
									int bos_buffer_tSparqlSelectRequest_1 = 0;

									StringBuilder sb_tSparqlSelectRequest_1 = new StringBuilder();

									if (java.net.HttpURLConnection.HTTP_OK == (urlConn_tSparqlSelectRequest_1
											.getResponseCode())) {
										java.io.InputStream bis_tSparqlSelectRequest_1 = new java.io.BufferedInputStream(
												urlConn_tSparqlSelectRequest_1
														.getInputStream());

										while ((bos_buffer_tSparqlSelectRequest_1 = bis_tSparqlSelectRequest_1
												.read(buffer_tSparqlSelectRequest_1)) != -1) {
											// Then the table of bytes and its
											// size are used to generate a
											// string
											// which is added to a string
											// builder that will contain the
											// whole response
											sb_tSparqlSelectRequest_1
													.append(new String(
															buffer_tSparqlSelectRequest_1,
															0,
															bos_buffer_tSparqlSelectRequest_1));
										}
										bis_tSparqlSelectRequest_1.close();

									} else {
										System.err
												.println(urlConn_tSparqlSelectRequest_1
														.getResponseCode()
														+ " "
														+ urlConn_tSparqlSelectRequest_1
																.getResponseMessage());
									}

									urlConn_tSparqlSelectRequest_1.disconnect();

									jsonObj_tSparqlSelectRequest_1 = new org.json.JSONObject(
											sb_tSparqlSelectRequest_1
													.toString());

									jsonKeysArray_tSparqlSelectRequest_1 = jsonObj_tSparqlSelectRequest_1
											.getJSONObject("head")
											.getJSONArray("vars");
									for (int k_tSparqlSelectRequest_1 = 0; k_tSparqlSelectRequest_1 < jsonKeysArray_tSparqlSelectRequest_1
											.length(); k_tSparqlSelectRequest_1++) {
										queryKeys_tSparqlSelectRequest_1
												.add(jsonKeysArray_tSparqlSelectRequest_1
														.getString(k_tSparqlSelectRequest_1));
									}

									jsonArray_tSparqlSelectRequest_1 = jsonObj_tSparqlSelectRequest_1
											.getJSONObject("results")
											.getJSONArray("bindings");

								} catch (Exception e) {
									System.err.println("UnknownHostException");
								}

								if (jsonArray_tSparqlSelectRequest_1.length() == 0) {
									globalMap
											.put("tSparqlSelectRequest_1_HAS_RESULTS",
													false);
								} else {
									globalMap
											.put("tSparqlSelectRequest_1_HAS_RESULTS",
													true);
								}

								int i_tSparqlSelectRequest_1;
								int nb_line_tSparqlSelectRequest_1 = 0;

								for (i_tSparqlSelectRequest_1 = 0; i_tSparqlSelectRequest_1 < jsonArray_tSparqlSelectRequest_1
										.length(); i_tSparqlSelectRequest_1++) {

									/**
									 * [tSparqlSelectRequest_1 begin ] stop
									 */
									/**
									 * [tSparqlSelectRequest_1 main ] start
									 */

									currentComponent = "tSparqlSelectRequest_1";

									queryKeysIterator_tSparqlSelectRequest_1 = queryKeys_tSparqlSelectRequest_1
											.iterator();

									if (queryKeysIterator_tSparqlSelectRequest_1
											.hasNext()) {
										try {
											row2.stat = jsonArray_tSparqlSelectRequest_1
													.getJSONObject(
															i_tSparqlSelectRequest_1)
													.getJSONObject(
															queryKeysIterator_tSparqlSelectRequest_1
																	.next())
													.getString("value");
										} catch (org.json.JSONException e_tSparqlSelectRequest_1) {
											row2.stat = "";
										}
									}

									tos_count_tSparqlSelectRequest_1++;

									/**
									 * [tSparqlSelectRequest_1 main ] stop
									 */

									/**
									 * [tJavaRow_1 main ] start
									 */

									currentComponent = "tJavaRow_1";

									row3.link_namespace = (String) globalMap
											.get("link_namespace");

									row3.stat = row2.stat;

									// System.out.println((String)
									// globalMap.get("link_namespace"));

									// System.out.println(row2.stat);
									nb_line_tJavaRow_1++;

									tos_count_tJavaRow_1++;

									/**
									 * [tJavaRow_1 main ] stop
									 */

									/**
									 * [tLogRow_1 main ] start
									 */

									currentComponent = "tLogRow_1";

									row5 = row3;

									tos_count_tLogRow_1++;

									/**
									 * [tLogRow_1 main ] stop
									 */

									/**
									 * [tBufferOutput_1 main ] start
									 */

									currentComponent = "tBufferOutput_1";

									String[] row_tBufferOutput_1 = new String[] {
											"", "", };
									if (row5.link_namespace != null) {

										row_tBufferOutput_1[0] = row5.link_namespace;

									} else {
										row_tBufferOutput_1[0] = null;
									}
									if (row5.stat != null) {

										row_tBufferOutput_1[1] = row5.stat;

									} else {
										row_tBufferOutput_1[1] = null;
									}
									globalBuffer.add(row_tBufferOutput_1);

									tos_count_tBufferOutput_1++;

									/**
									 * [tBufferOutput_1 main ] stop
									 */

									/**
									 * [tSparqlSelectRequest_1 end ] start
									 */

									currentComponent = "tSparqlSelectRequest_1";

									nb_line_tSparqlSelectRequest_1++;
								}

								globalMap.put("tSparqlSelectRequest_1_NB_LINE",
										nb_line_tSparqlSelectRequest_1);

								ok_Hash.put("tSparqlSelectRequest_1", true);
								end_Hash.put("tSparqlSelectRequest_1",
										System.currentTimeMillis());

								/**
								 * [tSparqlSelectRequest_1 end ] stop
								 */

								/**
								 * [tJavaRow_1 end ] start
								 */

								currentComponent = "tJavaRow_1";

								globalMap.put("tJavaRow_1_NB_LINE",
										nb_line_tJavaRow_1);

								ok_Hash.put("tJavaRow_1", true);
								end_Hash.put("tJavaRow_1",
										System.currentTimeMillis());

								/**
								 * [tJavaRow_1 end ] stop
								 */

								/**
								 * [tLogRow_1 end ] start
								 */

								currentComponent = "tLogRow_1";

								ok_Hash.put("tLogRow_1", true);
								end_Hash.put("tLogRow_1",
										System.currentTimeMillis());

								/**
								 * [tLogRow_1 end ] stop
								 */

								/**
								 * [tBufferOutput_1 end ] start
								 */

								currentComponent = "tBufferOutput_1";

								ok_Hash.put("tBufferOutput_1", true);
								end_Hash.put("tBufferOutput_1",
										System.currentTimeMillis());

								/**
								 * [tBufferOutput_1 end ] stop
								 */

							} // End of branch "row4"

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) (context.inputFile) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK",
						nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_2);

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE",
						nb_line_tFlowToIterate_1);

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tSparqlSelectRequest_1 finally ] start
				 */

				currentComponent = "tSparqlSelectRequest_1";

				/**
				 * [tSparqlSelectRequest_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tBufferOutput_1 finally ] start
				 */

				currentComponent = "tBufferOutput_1";

				/**
				 * [tBufferOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final datahub_get_stats datahub_get_statsClass = new datahub_get_stats();

		int exitCode = datahub_get_statsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = (String[][]) globalBuffer
				.toArray(new String[globalBuffer.size()][]);

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		hastBufferOutput = true;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = datahub_get_stats.class
					.getClassLoader().getResourceAsStream(
							"bio2rdf/datahub_get_stats_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.inputFile = (String) context.getProperty("inputFile");
			context.endpoint_namespace = (String) context
					.getProperty("endpoint_namespace");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("inputFile")) {
				context.inputFile = (String) parentContextMap.get("inputFile");
			}
			if (parentContextMap.containsKey("endpoint_namespace")) {
				context.endpoint_namespace = (String) parentContextMap
						.get("endpoint_namespace");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : datahub_get_stats");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 58403 characters generated by Talend Open Studio for Data Integration on the
 * 8 août 2014 15:39:18 EDT
 ************************************************************************************************/
